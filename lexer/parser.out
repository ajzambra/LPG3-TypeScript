Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANY
    AS
    AWAIT
    BIGINT_TYPE
    BREAK
    CATCH
    CONTINUE
    EXPORT
    FINALLY
    IMPORT
    INTERFACE
    NEW
    NULL_TYPE
    OF
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    SYMBOL_TYPE
    THIS
    TRY
    TYPE
    UNDEFINED_TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> program element
Rule 2     program -> element
Rule 3     element -> letAssignment
Rule 4     element -> declaracion
Rule 5     element -> function
Rule 6     element -> arrow_function
Rule 7     element -> async_function
Rule 8     element -> constAssignment
Rule 9     element -> enum_definition
Rule 10    element -> controlEstructure
Rule 11    element -> forEstructure
Rule 12    element -> class_definition
Rule 13    element -> statement
Rule 14    element -> expression SEMICOLON
Rule 15    element -> consolelog
Rule 16    letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 17    letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON
Rule 18    declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
Rule 19    lista_expresiones_opt -> lista_expresiones
Rule 20    lista_expresiones_opt -> empty
Rule 21    lista_expresiones -> expression
Rule 22    lista_expresiones -> expression COMMA lista_expresiones
Rule 23    forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
Rule 24    for_init -> LET IDENTIFIER EQUAL expression
Rule 25    for_init -> LET IDENTIFIER COLON type EQUAL expression
Rule 26    for_init -> expression
Rule 27    for_init -> empty
Rule 28    for_update -> expression
Rule 29    for_update -> expression PLUSPLUS
Rule 30    for_update -> expression MINUSMINUS
Rule 31    for_update -> PLUSPLUS expression
Rule 32    for_update -> MINUSMINUS expression
Rule 33    for_update -> empty
Rule 34    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
Rule 35    parameters -> IDENTIFIER COLON type
Rule 36    parameters -> IDENTIFIER COLON type COMMA parameters
Rule 37    parameters -> empty
Rule 38    body_function -> instruction_list
Rule 39    type -> LBRACKET type COMMA type RBRACKET
Rule 40    expression -> LBRACKET expression COMMA expression RBRACKET
Rule 41    type -> NUMBER_TYPE
Rule 42    type -> STRING_TYPE
Rule 43    type -> BOOLEAN_TYPE
Rule 44    type -> IDENTIFIER
Rule 45    type -> VOID
Rule 46    type -> type LBRACKET RBRACKET
Rule 47    expression -> expression PLUS expression
Rule 48    expression -> expression MINUS expression
Rule 49    expression -> expression TIMES expression
Rule 50    expression -> expression DIV expression
Rule 51    expression -> expression MOD expression
Rule 52    expression -> expression PLUS_ASSIGN expression
Rule 53    expression -> expression MINUS_ASSIGN expression
Rule 54    expression -> expression MULT_ASSIGN expression
Rule 55    expression -> expression DIV_ASSIGN expression
Rule 56    expression -> expression MOD_ASSIGN expression
Rule 57    expression -> expression POT expression
Rule 58    expression -> expression AND expression
Rule 59    expression -> expression OR expression
Rule 60    expression -> expression EQ expression
Rule 61    expression -> expression NEQ expression
Rule 62    expression -> expression STRICT_EQ expression
Rule 63    expression -> expression STRICT_NEQ expression
Rule 64    expression -> expression LT expression
Rule 65    expression -> expression GT expression
Rule 66    expression -> expression LE expression
Rule 67    expression -> expression GE expression
Rule 68    expression -> PROMPT LPAREN STRING RPAREN
Rule 69    expression -> NOT expression
Rule 70    expression -> LPAREN expression RPAREN
Rule 71    expression -> expression DOT IDENTIFIER
Rule 72    expression -> expression LBRACKET expression RBRACKET
Rule 73    expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN
Rule 74    expression -> NUMBER
Rule 75    expression -> FLOAT
Rule 76    expression -> STRING
Rule 77    expression -> IDENTIFIER
Rule 78    expression -> TRUE
Rule 79    expression -> FALSE
Rule 80    expression -> expression PLUSPLUS
Rule 81    expression -> expression MINUSMINUS
Rule 82    expression -> PLUSPLUS expression
Rule 83    expression -> MINUSMINUS expression
Rule 84    consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
Rule 85    controlEstructure -> IF LPAREN expression RPAREN statement
Rule 86    controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement
Rule 87    controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
Rule 88    controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
Rule 89    statement -> LBRACE instruction_list RBRACE
Rule 90    statement -> letAssignment
Rule 91    statement -> varAssignment
Rule 92    statement -> constAssignment
Rule 93    statement -> declaracion
Rule 94    statement -> function
Rule 95    statement -> arrow_function
Rule 96    statement -> async_function
Rule 97    statement -> consolelog
Rule 98    statement -> expression SEMICOLON
Rule 99    statement -> controlEstructure
Rule 100   statement -> RETURN expression SEMICOLON
Rule 101   statement -> forEstructure
Rule 102   statement -> RETURN SEMICOLON
Rule 103   statement -> class_definition
Rule 104   instruction_list -> instruction_list statement
Rule 105   instruction_list -> statement
Rule 106   instruction_list -> empty
Rule 107   empty -> <empty>
Rule 108   constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 109   constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON
Rule 110   class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 111   class_body -> class_body class_element
Rule 112   class_body -> class_element
Rule 113   class_body -> empty
Rule 114   class_element -> function
Rule 115   class_element -> letAssignment
Rule 116   class_element -> varAssignment
Rule 117   class_element -> constAssignment
Rule 118   controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
Rule 119   case_block -> case_block case
Rule 120   case_block -> case
Rule 121   case_block -> empty
Rule 122   case -> CASE expression COLON instruction_list
Rule 123   case -> DEFAULT COLON instruction_list
Rule 124   enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE
Rule 125   enum_members -> IDENTIFIER
Rule 126   enum_members -> IDENTIFIER COMMA enum_members
Rule 127   async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
Rule 128   controlEstructure -> WHILE LPAREN expression RPAREN statement
Rule 129   varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 130   varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON
Rule 131   arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

Terminals, with rules where they appear

AND                  : 58
ANY                  : 
ARROW                : 131
AS                   : 
ASYNC                : 127
AWAIT                : 
BIGINT_TYPE          : 
BOOLEAN_TYPE         : 43
BREAK                : 
CASE                 : 122
CATCH                : 
CLASS                : 110
COLON                : 16 18 25 34 35 36 108 122 123 127 129
COMMA                : 22 36 39 40 126
CONSOLE              : 84
CONST                : 108 109 131
CONTINUE             : 
DEFAULT              : 123
DIV                  : 50
DIV_ASSIGN           : 55
DOT                  : 71 84
ELSE                 : 86 87 88 88
ENUM                 : 124
EQ                   : 60
EQUAL                : 16 17 18 24 25 108 109 129 130 131
EXPORT               : 
FALSE                : 79
FINALLY              : 
FLOAT                : 75
FOR                  : 23
FUNCTION             : 34 127
GE                   : 67
GT                   : 65
IDENTIFIER           : 16 17 18 24 25 34 35 36 44 71 73 77 108 109 110 124 125 126 127 129 130 131
IF                   : 85 86 87 87 88 88
IMPORT               : 
INTERFACE            : 
LBRACE               : 34 89 110 118 124 127 131
LBRACKET             : 18 18 39 40 46 72
LE                   : 66
LET                  : 16 17 18 24 25
LOG                  : 84
LPAREN               : 23 34 68 70 73 84 85 86 87 87 88 88 118 127 128 131
LT                   : 64
MINUS                : 48
MINUSMINUS           : 30 32 81 83
MINUS_ASSIGN         : 53
MOD                  : 51
MOD_ASSIGN           : 56
MULT_ASSIGN          : 54
NEQ                  : 61
NEW                  : 
NOT                  : 69
NULL_TYPE            : 
NUMBER               : 74
NUMBER_TYPE          : 41
OF                   : 
OR                   : 59
PLUS                 : 47
PLUSPLUS             : 29 31 80 82
PLUS_ASSIGN          : 52
POT                  : 57
PRIVATE              : 
PROMPT               : 68
PROTECTED            : 
PUBLIC               : 
RBRACE               : 34 89 110 118 124 127 131
RBRACKET             : 18 18 39 40 46 72
RETURN               : 100 102
RPAREN               : 23 34 68 70 73 84 85 86 87 87 88 88 118 127 128 131
SEMICOLON            : 14 16 17 18 23 23 84 98 100 102 108 109 129 130 131
STATIC               : 
STRICT_EQ            : 62
STRICT_NEQ           : 63
STRING               : 68 76
STRING_TYPE          : 42
SUPER                : 
SWITCH               : 118
SYMBOL_TYPE          : 
THIS                 : 
TIMES                : 49
TRUE                 : 78
TRY                  : 
TYPE                 : 
UNDEFINED_TYPE       : 
VAR                  : 129 130
VOID                 : 45
WHILE                : 128
error                : 

Nonterminals, with rules where they appear

arrow_function       : 6 95
async_function       : 7 96
body_function        : 34 127 131
case                 : 119 120
case_block           : 118 119
class_body           : 110 111
class_definition     : 12 103
class_element        : 111 112
consolelog           : 15 97
constAssignment      : 8 92 117
controlEstructure    : 10 99
declaracion          : 4 93
element              : 1 2
empty                : 20 27 33 37 106 113 121
enum_definition      : 9
enum_members         : 124 126
expression           : 14 16 17 21 22 23 24 25 26 28 29 30 31 32 40 40 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 69 70 71 72 72 80 81 82 83 85 86 87 87 88 88 98 100 108 109 118 122 128 129 130
forEstructure        : 11 101
for_init             : 23
for_update           : 23
function             : 5 94 114
instruction_list     : 38 89 104 122 123
letAssignment        : 3 90 115
lista_expresiones    : 19 22
lista_expresiones_opt : 18 73 84
parameters           : 34 36 127 131
program              : 1 0
statement            : 13 23 85 86 86 87 87 88 88 88 104 105 128
type                 : 16 18 25 34 35 36 39 39 46 108 127 129
varAssignment        : 91 116

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program element
    (2) program -> . element
    (3) element -> . letAssignment
    (4) element -> . declaracion
    (5) element -> . function
    (6) element -> . arrow_function
    (7) element -> . async_function
    (8) element -> . constAssignment
    (9) element -> . enum_definition
    (10) element -> . controlEstructure
    (11) element -> . forEstructure
    (12) element -> . class_definition
    (13) element -> . statement
    (14) element -> . expression SEMICOLON
    (15) element -> . consolelog
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (124) enum_definition -> . ENUM IDENTIFIER LBRACE enum_members RBRACE
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON

    LET             shift and go to state 16
    FUNCTION        shift and go to state 19
    CONST           shift and go to state 22
    ASYNC           shift and go to state 23
    ENUM            shift and go to state 24
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    CONSOLE         shift and go to state 41
    VAR             shift and go to state 42

    program                        shift and go to state 1
    element                        shift and go to state 2
    letAssignment                  shift and go to state 3
    declaracion                    shift and go to state 4
    function                       shift and go to state 5
    arrow_function                 shift and go to state 6
    async_function                 shift and go to state 7
    constAssignment                shift and go to state 8
    enum_definition                shift and go to state 9
    controlEstructure              shift and go to state 10
    forEstructure                  shift and go to state 11
    class_definition               shift and go to state 12
    statement                      shift and go to state 13
    expression                     shift and go to state 14
    consolelog                     shift and go to state 15
    varAssignment                  shift and go to state 30

state 1

    (0) S' -> program .
    (1) program -> program . element
    (3) element -> . letAssignment
    (4) element -> . declaracion
    (5) element -> . function
    (6) element -> . arrow_function
    (7) element -> . async_function
    (8) element -> . constAssignment
    (9) element -> . enum_definition
    (10) element -> . controlEstructure
    (11) element -> . forEstructure
    (12) element -> . class_definition
    (13) element -> . statement
    (14) element -> . expression SEMICOLON
    (15) element -> . consolelog
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (124) enum_definition -> . ENUM IDENTIFIER LBRACE enum_members RBRACE
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON

    LET             shift and go to state 16
    FUNCTION        shift and go to state 19
    CONST           shift and go to state 22
    ASYNC           shift and go to state 23
    ENUM            shift and go to state 24
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    CONSOLE         shift and go to state 41
    VAR             shift and go to state 42

    element                        shift and go to state 43
    letAssignment                  shift and go to state 3
    declaracion                    shift and go to state 4
    function                       shift and go to state 5
    arrow_function                 shift and go to state 6
    async_function                 shift and go to state 7
    constAssignment                shift and go to state 8
    enum_definition                shift and go to state 9
    controlEstructure              shift and go to state 10
    forEstructure                  shift and go to state 11
    class_definition               shift and go to state 12
    statement                      shift and go to state 13
    expression                     shift and go to state 14
    consolelog                     shift and go to state 15
    varAssignment                  shift and go to state 30

state 2

    (2) program -> element .

    LET             reduce using rule 2 (program -> element .)
    FUNCTION        reduce using rule 2 (program -> element .)
    CONST           reduce using rule 2 (program -> element .)
    ASYNC           reduce using rule 2 (program -> element .)
    ENUM            reduce using rule 2 (program -> element .)
    IF              reduce using rule 2 (program -> element .)
    SWITCH          reduce using rule 2 (program -> element .)
    WHILE           reduce using rule 2 (program -> element .)
    FOR             reduce using rule 2 (program -> element .)
    CLASS           reduce using rule 2 (program -> element .)
    LBRACE          reduce using rule 2 (program -> element .)
    RETURN          reduce using rule 2 (program -> element .)
    LBRACKET        reduce using rule 2 (program -> element .)
    PROMPT          reduce using rule 2 (program -> element .)
    NOT             reduce using rule 2 (program -> element .)
    LPAREN          reduce using rule 2 (program -> element .)
    IDENTIFIER      reduce using rule 2 (program -> element .)
    NUMBER          reduce using rule 2 (program -> element .)
    FLOAT           reduce using rule 2 (program -> element .)
    STRING          reduce using rule 2 (program -> element .)
    TRUE            reduce using rule 2 (program -> element .)
    FALSE           reduce using rule 2 (program -> element .)
    PLUSPLUS        reduce using rule 2 (program -> element .)
    MINUSMINUS      reduce using rule 2 (program -> element .)
    CONSOLE         reduce using rule 2 (program -> element .)
    VAR             reduce using rule 2 (program -> element .)
    $end            reduce using rule 2 (program -> element .)


state 3

    (3) element -> letAssignment .
    (90) statement -> letAssignment .

  ! reduce/reduce conflict for LET resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONST resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for ASYNC resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for ENUM resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for IF resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for SWITCH resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CLASS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LBRACE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for PROMPT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for NOT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LPAREN resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for NUMBER resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FLOAT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for STRING resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for VAR resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for $end resolved using rule 3 (element -> letAssignment .)
    LET             reduce using rule 3 (element -> letAssignment .)
    FUNCTION        reduce using rule 3 (element -> letAssignment .)
    CONST           reduce using rule 3 (element -> letAssignment .)
    ASYNC           reduce using rule 3 (element -> letAssignment .)
    ENUM            reduce using rule 3 (element -> letAssignment .)
    IF              reduce using rule 3 (element -> letAssignment .)
    SWITCH          reduce using rule 3 (element -> letAssignment .)
    WHILE           reduce using rule 3 (element -> letAssignment .)
    FOR             reduce using rule 3 (element -> letAssignment .)
    CLASS           reduce using rule 3 (element -> letAssignment .)
    LBRACE          reduce using rule 3 (element -> letAssignment .)
    RETURN          reduce using rule 3 (element -> letAssignment .)
    LBRACKET        reduce using rule 3 (element -> letAssignment .)
    PROMPT          reduce using rule 3 (element -> letAssignment .)
    NOT             reduce using rule 3 (element -> letAssignment .)
    LPAREN          reduce using rule 3 (element -> letAssignment .)
    IDENTIFIER      reduce using rule 3 (element -> letAssignment .)
    NUMBER          reduce using rule 3 (element -> letAssignment .)
    FLOAT           reduce using rule 3 (element -> letAssignment .)
    STRING          reduce using rule 3 (element -> letAssignment .)
    TRUE            reduce using rule 3 (element -> letAssignment .)
    FALSE           reduce using rule 3 (element -> letAssignment .)
    PLUSPLUS        reduce using rule 3 (element -> letAssignment .)
    MINUSMINUS      reduce using rule 3 (element -> letAssignment .)
    CONSOLE         reduce using rule 3 (element -> letAssignment .)
    VAR             reduce using rule 3 (element -> letAssignment .)
    $end            reduce using rule 3 (element -> letAssignment .)

  ! LET             [ reduce using rule 90 (statement -> letAssignment .) ]
  ! FUNCTION        [ reduce using rule 90 (statement -> letAssignment .) ]
  ! CONST           [ reduce using rule 90 (statement -> letAssignment .) ]
  ! ASYNC           [ reduce using rule 90 (statement -> letAssignment .) ]
  ! ENUM            [ reduce using rule 90 (statement -> letAssignment .) ]
  ! IF              [ reduce using rule 90 (statement -> letAssignment .) ]
  ! SWITCH          [ reduce using rule 90 (statement -> letAssignment .) ]
  ! WHILE           [ reduce using rule 90 (statement -> letAssignment .) ]
  ! FOR             [ reduce using rule 90 (statement -> letAssignment .) ]
  ! CLASS           [ reduce using rule 90 (statement -> letAssignment .) ]
  ! LBRACE          [ reduce using rule 90 (statement -> letAssignment .) ]
  ! RETURN          [ reduce using rule 90 (statement -> letAssignment .) ]
  ! LBRACKET        [ reduce using rule 90 (statement -> letAssignment .) ]
  ! PROMPT          [ reduce using rule 90 (statement -> letAssignment .) ]
  ! NOT             [ reduce using rule 90 (statement -> letAssignment .) ]
  ! LPAREN          [ reduce using rule 90 (statement -> letAssignment .) ]
  ! IDENTIFIER      [ reduce using rule 90 (statement -> letAssignment .) ]
  ! NUMBER          [ reduce using rule 90 (statement -> letAssignment .) ]
  ! FLOAT           [ reduce using rule 90 (statement -> letAssignment .) ]
  ! STRING          [ reduce using rule 90 (statement -> letAssignment .) ]
  ! TRUE            [ reduce using rule 90 (statement -> letAssignment .) ]
  ! FALSE           [ reduce using rule 90 (statement -> letAssignment .) ]
  ! PLUSPLUS        [ reduce using rule 90 (statement -> letAssignment .) ]
  ! MINUSMINUS      [ reduce using rule 90 (statement -> letAssignment .) ]
  ! CONSOLE         [ reduce using rule 90 (statement -> letAssignment .) ]
  ! VAR             [ reduce using rule 90 (statement -> letAssignment .) ]
  ! $end            [ reduce using rule 90 (statement -> letAssignment .) ]


state 4

    (4) element -> declaracion .
    (93) statement -> declaracion .

  ! reduce/reduce conflict for LET resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONST resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for ASYNC resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for ENUM resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for IF resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CLASS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LBRACE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for PROMPT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for VAR resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 4 (element -> declaracion .)
    LET             reduce using rule 4 (element -> declaracion .)
    FUNCTION        reduce using rule 4 (element -> declaracion .)
    CONST           reduce using rule 4 (element -> declaracion .)
    ASYNC           reduce using rule 4 (element -> declaracion .)
    ENUM            reduce using rule 4 (element -> declaracion .)
    IF              reduce using rule 4 (element -> declaracion .)
    SWITCH          reduce using rule 4 (element -> declaracion .)
    WHILE           reduce using rule 4 (element -> declaracion .)
    FOR             reduce using rule 4 (element -> declaracion .)
    CLASS           reduce using rule 4 (element -> declaracion .)
    LBRACE          reduce using rule 4 (element -> declaracion .)
    RETURN          reduce using rule 4 (element -> declaracion .)
    LBRACKET        reduce using rule 4 (element -> declaracion .)
    PROMPT          reduce using rule 4 (element -> declaracion .)
    NOT             reduce using rule 4 (element -> declaracion .)
    LPAREN          reduce using rule 4 (element -> declaracion .)
    IDENTIFIER      reduce using rule 4 (element -> declaracion .)
    NUMBER          reduce using rule 4 (element -> declaracion .)
    FLOAT           reduce using rule 4 (element -> declaracion .)
    STRING          reduce using rule 4 (element -> declaracion .)
    TRUE            reduce using rule 4 (element -> declaracion .)
    FALSE           reduce using rule 4 (element -> declaracion .)
    PLUSPLUS        reduce using rule 4 (element -> declaracion .)
    MINUSMINUS      reduce using rule 4 (element -> declaracion .)
    CONSOLE         reduce using rule 4 (element -> declaracion .)
    VAR             reduce using rule 4 (element -> declaracion .)
    $end            reduce using rule 4 (element -> declaracion .)

  ! LET             [ reduce using rule 93 (statement -> declaracion .) ]
  ! FUNCTION        [ reduce using rule 93 (statement -> declaracion .) ]
  ! CONST           [ reduce using rule 93 (statement -> declaracion .) ]
  ! ASYNC           [ reduce using rule 93 (statement -> declaracion .) ]
  ! ENUM            [ reduce using rule 93 (statement -> declaracion .) ]
  ! IF              [ reduce using rule 93 (statement -> declaracion .) ]
  ! SWITCH          [ reduce using rule 93 (statement -> declaracion .) ]
  ! WHILE           [ reduce using rule 93 (statement -> declaracion .) ]
  ! FOR             [ reduce using rule 93 (statement -> declaracion .) ]
  ! CLASS           [ reduce using rule 93 (statement -> declaracion .) ]
  ! LBRACE          [ reduce using rule 93 (statement -> declaracion .) ]
  ! RETURN          [ reduce using rule 93 (statement -> declaracion .) ]
  ! LBRACKET        [ reduce using rule 93 (statement -> declaracion .) ]
  ! PROMPT          [ reduce using rule 93 (statement -> declaracion .) ]
  ! NOT             [ reduce using rule 93 (statement -> declaracion .) ]
  ! LPAREN          [ reduce using rule 93 (statement -> declaracion .) ]
  ! IDENTIFIER      [ reduce using rule 93 (statement -> declaracion .) ]
  ! NUMBER          [ reduce using rule 93 (statement -> declaracion .) ]
  ! FLOAT           [ reduce using rule 93 (statement -> declaracion .) ]
  ! STRING          [ reduce using rule 93 (statement -> declaracion .) ]
  ! TRUE            [ reduce using rule 93 (statement -> declaracion .) ]
  ! FALSE           [ reduce using rule 93 (statement -> declaracion .) ]
  ! PLUSPLUS        [ reduce using rule 93 (statement -> declaracion .) ]
  ! MINUSMINUS      [ reduce using rule 93 (statement -> declaracion .) ]
  ! CONSOLE         [ reduce using rule 93 (statement -> declaracion .) ]
  ! VAR             [ reduce using rule 93 (statement -> declaracion .) ]
  ! $end            [ reduce using rule 93 (statement -> declaracion .) ]


state 5

    (5) element -> function .
    (94) statement -> function .

  ! reduce/reduce conflict for LET resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for IF resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for NOT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for STRING resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for TRUE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FALSE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for VAR resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for $end resolved using rule 5 (element -> function .)
    LET             reduce using rule 5 (element -> function .)
    FUNCTION        reduce using rule 5 (element -> function .)
    CONST           reduce using rule 5 (element -> function .)
    ASYNC           reduce using rule 5 (element -> function .)
    ENUM            reduce using rule 5 (element -> function .)
    IF              reduce using rule 5 (element -> function .)
    SWITCH          reduce using rule 5 (element -> function .)
    WHILE           reduce using rule 5 (element -> function .)
    FOR             reduce using rule 5 (element -> function .)
    CLASS           reduce using rule 5 (element -> function .)
    LBRACE          reduce using rule 5 (element -> function .)
    RETURN          reduce using rule 5 (element -> function .)
    LBRACKET        reduce using rule 5 (element -> function .)
    PROMPT          reduce using rule 5 (element -> function .)
    NOT             reduce using rule 5 (element -> function .)
    LPAREN          reduce using rule 5 (element -> function .)
    IDENTIFIER      reduce using rule 5 (element -> function .)
    NUMBER          reduce using rule 5 (element -> function .)
    FLOAT           reduce using rule 5 (element -> function .)
    STRING          reduce using rule 5 (element -> function .)
    TRUE            reduce using rule 5 (element -> function .)
    FALSE           reduce using rule 5 (element -> function .)
    PLUSPLUS        reduce using rule 5 (element -> function .)
    MINUSMINUS      reduce using rule 5 (element -> function .)
    CONSOLE         reduce using rule 5 (element -> function .)
    VAR             reduce using rule 5 (element -> function .)
    $end            reduce using rule 5 (element -> function .)

  ! LET             [ reduce using rule 94 (statement -> function .) ]
  ! FUNCTION        [ reduce using rule 94 (statement -> function .) ]
  ! CONST           [ reduce using rule 94 (statement -> function .) ]
  ! ASYNC           [ reduce using rule 94 (statement -> function .) ]
  ! ENUM            [ reduce using rule 94 (statement -> function .) ]
  ! IF              [ reduce using rule 94 (statement -> function .) ]
  ! SWITCH          [ reduce using rule 94 (statement -> function .) ]
  ! WHILE           [ reduce using rule 94 (statement -> function .) ]
  ! FOR             [ reduce using rule 94 (statement -> function .) ]
  ! CLASS           [ reduce using rule 94 (statement -> function .) ]
  ! LBRACE          [ reduce using rule 94 (statement -> function .) ]
  ! RETURN          [ reduce using rule 94 (statement -> function .) ]
  ! LBRACKET        [ reduce using rule 94 (statement -> function .) ]
  ! PROMPT          [ reduce using rule 94 (statement -> function .) ]
  ! NOT             [ reduce using rule 94 (statement -> function .) ]
  ! LPAREN          [ reduce using rule 94 (statement -> function .) ]
  ! IDENTIFIER      [ reduce using rule 94 (statement -> function .) ]
  ! NUMBER          [ reduce using rule 94 (statement -> function .) ]
  ! FLOAT           [ reduce using rule 94 (statement -> function .) ]
  ! STRING          [ reduce using rule 94 (statement -> function .) ]
  ! TRUE            [ reduce using rule 94 (statement -> function .) ]
  ! FALSE           [ reduce using rule 94 (statement -> function .) ]
  ! PLUSPLUS        [ reduce using rule 94 (statement -> function .) ]
  ! MINUSMINUS      [ reduce using rule 94 (statement -> function .) ]
  ! CONSOLE         [ reduce using rule 94 (statement -> function .) ]
  ! VAR             [ reduce using rule 94 (statement -> function .) ]
  ! $end            [ reduce using rule 94 (statement -> function .) ]


state 6

    (6) element -> arrow_function .
    (95) statement -> arrow_function .

  ! reduce/reduce conflict for LET resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONST resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for ENUM resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for IF resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CLASS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for RETURN resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for NOT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for STRING resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for TRUE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FALSE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for VAR resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for $end resolved using rule 6 (element -> arrow_function .)
    LET             reduce using rule 6 (element -> arrow_function .)
    FUNCTION        reduce using rule 6 (element -> arrow_function .)
    CONST           reduce using rule 6 (element -> arrow_function .)
    ASYNC           reduce using rule 6 (element -> arrow_function .)
    ENUM            reduce using rule 6 (element -> arrow_function .)
    IF              reduce using rule 6 (element -> arrow_function .)
    SWITCH          reduce using rule 6 (element -> arrow_function .)
    WHILE           reduce using rule 6 (element -> arrow_function .)
    FOR             reduce using rule 6 (element -> arrow_function .)
    CLASS           reduce using rule 6 (element -> arrow_function .)
    LBRACE          reduce using rule 6 (element -> arrow_function .)
    RETURN          reduce using rule 6 (element -> arrow_function .)
    LBRACKET        reduce using rule 6 (element -> arrow_function .)
    PROMPT          reduce using rule 6 (element -> arrow_function .)
    NOT             reduce using rule 6 (element -> arrow_function .)
    LPAREN          reduce using rule 6 (element -> arrow_function .)
    IDENTIFIER      reduce using rule 6 (element -> arrow_function .)
    NUMBER          reduce using rule 6 (element -> arrow_function .)
    FLOAT           reduce using rule 6 (element -> arrow_function .)
    STRING          reduce using rule 6 (element -> arrow_function .)
    TRUE            reduce using rule 6 (element -> arrow_function .)
    FALSE           reduce using rule 6 (element -> arrow_function .)
    PLUSPLUS        reduce using rule 6 (element -> arrow_function .)
    MINUSMINUS      reduce using rule 6 (element -> arrow_function .)
    CONSOLE         reduce using rule 6 (element -> arrow_function .)
    VAR             reduce using rule 6 (element -> arrow_function .)
    $end            reduce using rule 6 (element -> arrow_function .)

  ! LET             [ reduce using rule 95 (statement -> arrow_function .) ]
  ! FUNCTION        [ reduce using rule 95 (statement -> arrow_function .) ]
  ! CONST           [ reduce using rule 95 (statement -> arrow_function .) ]
  ! ASYNC           [ reduce using rule 95 (statement -> arrow_function .) ]
  ! ENUM            [ reduce using rule 95 (statement -> arrow_function .) ]
  ! IF              [ reduce using rule 95 (statement -> arrow_function .) ]
  ! SWITCH          [ reduce using rule 95 (statement -> arrow_function .) ]
  ! WHILE           [ reduce using rule 95 (statement -> arrow_function .) ]
  ! FOR             [ reduce using rule 95 (statement -> arrow_function .) ]
  ! CLASS           [ reduce using rule 95 (statement -> arrow_function .) ]
  ! LBRACE          [ reduce using rule 95 (statement -> arrow_function .) ]
  ! RETURN          [ reduce using rule 95 (statement -> arrow_function .) ]
  ! LBRACKET        [ reduce using rule 95 (statement -> arrow_function .) ]
  ! PROMPT          [ reduce using rule 95 (statement -> arrow_function .) ]
  ! NOT             [ reduce using rule 95 (statement -> arrow_function .) ]
  ! LPAREN          [ reduce using rule 95 (statement -> arrow_function .) ]
  ! IDENTIFIER      [ reduce using rule 95 (statement -> arrow_function .) ]
  ! NUMBER          [ reduce using rule 95 (statement -> arrow_function .) ]
  ! FLOAT           [ reduce using rule 95 (statement -> arrow_function .) ]
  ! STRING          [ reduce using rule 95 (statement -> arrow_function .) ]
  ! TRUE            [ reduce using rule 95 (statement -> arrow_function .) ]
  ! FALSE           [ reduce using rule 95 (statement -> arrow_function .) ]
  ! PLUSPLUS        [ reduce using rule 95 (statement -> arrow_function .) ]
  ! MINUSMINUS      [ reduce using rule 95 (statement -> arrow_function .) ]
  ! CONSOLE         [ reduce using rule 95 (statement -> arrow_function .) ]
  ! VAR             [ reduce using rule 95 (statement -> arrow_function .) ]
  ! $end            [ reduce using rule 95 (statement -> arrow_function .) ]


state 7

    (7) element -> async_function .
    (96) statement -> async_function .

  ! reduce/reduce conflict for LET resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONST resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for ENUM resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for IF resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CLASS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for NOT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for STRING resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for TRUE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FALSE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for VAR resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for $end resolved using rule 7 (element -> async_function .)
    LET             reduce using rule 7 (element -> async_function .)
    FUNCTION        reduce using rule 7 (element -> async_function .)
    CONST           reduce using rule 7 (element -> async_function .)
    ASYNC           reduce using rule 7 (element -> async_function .)
    ENUM            reduce using rule 7 (element -> async_function .)
    IF              reduce using rule 7 (element -> async_function .)
    SWITCH          reduce using rule 7 (element -> async_function .)
    WHILE           reduce using rule 7 (element -> async_function .)
    FOR             reduce using rule 7 (element -> async_function .)
    CLASS           reduce using rule 7 (element -> async_function .)
    LBRACE          reduce using rule 7 (element -> async_function .)
    RETURN          reduce using rule 7 (element -> async_function .)
    LBRACKET        reduce using rule 7 (element -> async_function .)
    PROMPT          reduce using rule 7 (element -> async_function .)
    NOT             reduce using rule 7 (element -> async_function .)
    LPAREN          reduce using rule 7 (element -> async_function .)
    IDENTIFIER      reduce using rule 7 (element -> async_function .)
    NUMBER          reduce using rule 7 (element -> async_function .)
    FLOAT           reduce using rule 7 (element -> async_function .)
    STRING          reduce using rule 7 (element -> async_function .)
    TRUE            reduce using rule 7 (element -> async_function .)
    FALSE           reduce using rule 7 (element -> async_function .)
    PLUSPLUS        reduce using rule 7 (element -> async_function .)
    MINUSMINUS      reduce using rule 7 (element -> async_function .)
    CONSOLE         reduce using rule 7 (element -> async_function .)
    VAR             reduce using rule 7 (element -> async_function .)
    $end            reduce using rule 7 (element -> async_function .)

  ! LET             [ reduce using rule 96 (statement -> async_function .) ]
  ! FUNCTION        [ reduce using rule 96 (statement -> async_function .) ]
  ! CONST           [ reduce using rule 96 (statement -> async_function .) ]
  ! ASYNC           [ reduce using rule 96 (statement -> async_function .) ]
  ! ENUM            [ reduce using rule 96 (statement -> async_function .) ]
  ! IF              [ reduce using rule 96 (statement -> async_function .) ]
  ! SWITCH          [ reduce using rule 96 (statement -> async_function .) ]
  ! WHILE           [ reduce using rule 96 (statement -> async_function .) ]
  ! FOR             [ reduce using rule 96 (statement -> async_function .) ]
  ! CLASS           [ reduce using rule 96 (statement -> async_function .) ]
  ! LBRACE          [ reduce using rule 96 (statement -> async_function .) ]
  ! RETURN          [ reduce using rule 96 (statement -> async_function .) ]
  ! LBRACKET        [ reduce using rule 96 (statement -> async_function .) ]
  ! PROMPT          [ reduce using rule 96 (statement -> async_function .) ]
  ! NOT             [ reduce using rule 96 (statement -> async_function .) ]
  ! LPAREN          [ reduce using rule 96 (statement -> async_function .) ]
  ! IDENTIFIER      [ reduce using rule 96 (statement -> async_function .) ]
  ! NUMBER          [ reduce using rule 96 (statement -> async_function .) ]
  ! FLOAT           [ reduce using rule 96 (statement -> async_function .) ]
  ! STRING          [ reduce using rule 96 (statement -> async_function .) ]
  ! TRUE            [ reduce using rule 96 (statement -> async_function .) ]
  ! FALSE           [ reduce using rule 96 (statement -> async_function .) ]
  ! PLUSPLUS        [ reduce using rule 96 (statement -> async_function .) ]
  ! MINUSMINUS      [ reduce using rule 96 (statement -> async_function .) ]
  ! CONSOLE         [ reduce using rule 96 (statement -> async_function .) ]
  ! VAR             [ reduce using rule 96 (statement -> async_function .) ]
  ! $end            [ reduce using rule 96 (statement -> async_function .) ]


state 8

    (8) element -> constAssignment .
    (92) statement -> constAssignment .

  ! reduce/reduce conflict for LET resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONST resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for ASYNC resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for ENUM resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for IF resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for SWITCH resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CLASS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LBRACE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for RETURN resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for PROMPT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for NOT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LPAREN resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for NUMBER resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FLOAT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for STRING resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for TRUE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FALSE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for VAR resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for $end resolved using rule 8 (element -> constAssignment .)
    LET             reduce using rule 8 (element -> constAssignment .)
    FUNCTION        reduce using rule 8 (element -> constAssignment .)
    CONST           reduce using rule 8 (element -> constAssignment .)
    ASYNC           reduce using rule 8 (element -> constAssignment .)
    ENUM            reduce using rule 8 (element -> constAssignment .)
    IF              reduce using rule 8 (element -> constAssignment .)
    SWITCH          reduce using rule 8 (element -> constAssignment .)
    WHILE           reduce using rule 8 (element -> constAssignment .)
    FOR             reduce using rule 8 (element -> constAssignment .)
    CLASS           reduce using rule 8 (element -> constAssignment .)
    LBRACE          reduce using rule 8 (element -> constAssignment .)
    RETURN          reduce using rule 8 (element -> constAssignment .)
    LBRACKET        reduce using rule 8 (element -> constAssignment .)
    PROMPT          reduce using rule 8 (element -> constAssignment .)
    NOT             reduce using rule 8 (element -> constAssignment .)
    LPAREN          reduce using rule 8 (element -> constAssignment .)
    IDENTIFIER      reduce using rule 8 (element -> constAssignment .)
    NUMBER          reduce using rule 8 (element -> constAssignment .)
    FLOAT           reduce using rule 8 (element -> constAssignment .)
    STRING          reduce using rule 8 (element -> constAssignment .)
    TRUE            reduce using rule 8 (element -> constAssignment .)
    FALSE           reduce using rule 8 (element -> constAssignment .)
    PLUSPLUS        reduce using rule 8 (element -> constAssignment .)
    MINUSMINUS      reduce using rule 8 (element -> constAssignment .)
    CONSOLE         reduce using rule 8 (element -> constAssignment .)
    VAR             reduce using rule 8 (element -> constAssignment .)
    $end            reduce using rule 8 (element -> constAssignment .)

  ! LET             [ reduce using rule 92 (statement -> constAssignment .) ]
  ! FUNCTION        [ reduce using rule 92 (statement -> constAssignment .) ]
  ! CONST           [ reduce using rule 92 (statement -> constAssignment .) ]
  ! ASYNC           [ reduce using rule 92 (statement -> constAssignment .) ]
  ! ENUM            [ reduce using rule 92 (statement -> constAssignment .) ]
  ! IF              [ reduce using rule 92 (statement -> constAssignment .) ]
  ! SWITCH          [ reduce using rule 92 (statement -> constAssignment .) ]
  ! WHILE           [ reduce using rule 92 (statement -> constAssignment .) ]
  ! FOR             [ reduce using rule 92 (statement -> constAssignment .) ]
  ! CLASS           [ reduce using rule 92 (statement -> constAssignment .) ]
  ! LBRACE          [ reduce using rule 92 (statement -> constAssignment .) ]
  ! RETURN          [ reduce using rule 92 (statement -> constAssignment .) ]
  ! LBRACKET        [ reduce using rule 92 (statement -> constAssignment .) ]
  ! PROMPT          [ reduce using rule 92 (statement -> constAssignment .) ]
  ! NOT             [ reduce using rule 92 (statement -> constAssignment .) ]
  ! LPAREN          [ reduce using rule 92 (statement -> constAssignment .) ]
  ! IDENTIFIER      [ reduce using rule 92 (statement -> constAssignment .) ]
  ! NUMBER          [ reduce using rule 92 (statement -> constAssignment .) ]
  ! FLOAT           [ reduce using rule 92 (statement -> constAssignment .) ]
  ! STRING          [ reduce using rule 92 (statement -> constAssignment .) ]
  ! TRUE            [ reduce using rule 92 (statement -> constAssignment .) ]
  ! FALSE           [ reduce using rule 92 (statement -> constAssignment .) ]
  ! PLUSPLUS        [ reduce using rule 92 (statement -> constAssignment .) ]
  ! MINUSMINUS      [ reduce using rule 92 (statement -> constAssignment .) ]
  ! CONSOLE         [ reduce using rule 92 (statement -> constAssignment .) ]
  ! VAR             [ reduce using rule 92 (statement -> constAssignment .) ]
  ! $end            [ reduce using rule 92 (statement -> constAssignment .) ]


state 9

    (9) element -> enum_definition .

    LET             reduce using rule 9 (element -> enum_definition .)
    FUNCTION        reduce using rule 9 (element -> enum_definition .)
    CONST           reduce using rule 9 (element -> enum_definition .)
    ASYNC           reduce using rule 9 (element -> enum_definition .)
    ENUM            reduce using rule 9 (element -> enum_definition .)
    IF              reduce using rule 9 (element -> enum_definition .)
    SWITCH          reduce using rule 9 (element -> enum_definition .)
    WHILE           reduce using rule 9 (element -> enum_definition .)
    FOR             reduce using rule 9 (element -> enum_definition .)
    CLASS           reduce using rule 9 (element -> enum_definition .)
    LBRACE          reduce using rule 9 (element -> enum_definition .)
    RETURN          reduce using rule 9 (element -> enum_definition .)
    LBRACKET        reduce using rule 9 (element -> enum_definition .)
    PROMPT          reduce using rule 9 (element -> enum_definition .)
    NOT             reduce using rule 9 (element -> enum_definition .)
    LPAREN          reduce using rule 9 (element -> enum_definition .)
    IDENTIFIER      reduce using rule 9 (element -> enum_definition .)
    NUMBER          reduce using rule 9 (element -> enum_definition .)
    FLOAT           reduce using rule 9 (element -> enum_definition .)
    STRING          reduce using rule 9 (element -> enum_definition .)
    TRUE            reduce using rule 9 (element -> enum_definition .)
    FALSE           reduce using rule 9 (element -> enum_definition .)
    PLUSPLUS        reduce using rule 9 (element -> enum_definition .)
    MINUSMINUS      reduce using rule 9 (element -> enum_definition .)
    CONSOLE         reduce using rule 9 (element -> enum_definition .)
    VAR             reduce using rule 9 (element -> enum_definition .)
    $end            reduce using rule 9 (element -> enum_definition .)


state 10

    (10) element -> controlEstructure .
    (99) statement -> controlEstructure .

  ! reduce/reduce conflict for LET resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONST resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for ASYNC resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for ENUM resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for IF resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for SWITCH resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LBRACE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for RETURN resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for PROMPT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FLOAT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for TRUE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FALSE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for VAR resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for $end resolved using rule 10 (element -> controlEstructure .)
    LET             reduce using rule 10 (element -> controlEstructure .)
    FUNCTION        reduce using rule 10 (element -> controlEstructure .)
    CONST           reduce using rule 10 (element -> controlEstructure .)
    ASYNC           reduce using rule 10 (element -> controlEstructure .)
    ENUM            reduce using rule 10 (element -> controlEstructure .)
    IF              reduce using rule 10 (element -> controlEstructure .)
    SWITCH          reduce using rule 10 (element -> controlEstructure .)
    WHILE           reduce using rule 10 (element -> controlEstructure .)
    FOR             reduce using rule 10 (element -> controlEstructure .)
    CLASS           reduce using rule 10 (element -> controlEstructure .)
    LBRACE          reduce using rule 10 (element -> controlEstructure .)
    RETURN          reduce using rule 10 (element -> controlEstructure .)
    LBRACKET        reduce using rule 10 (element -> controlEstructure .)
    PROMPT          reduce using rule 10 (element -> controlEstructure .)
    NOT             reduce using rule 10 (element -> controlEstructure .)
    LPAREN          reduce using rule 10 (element -> controlEstructure .)
    IDENTIFIER      reduce using rule 10 (element -> controlEstructure .)
    NUMBER          reduce using rule 10 (element -> controlEstructure .)
    FLOAT           reduce using rule 10 (element -> controlEstructure .)
    STRING          reduce using rule 10 (element -> controlEstructure .)
    TRUE            reduce using rule 10 (element -> controlEstructure .)
    FALSE           reduce using rule 10 (element -> controlEstructure .)
    PLUSPLUS        reduce using rule 10 (element -> controlEstructure .)
    MINUSMINUS      reduce using rule 10 (element -> controlEstructure .)
    CONSOLE         reduce using rule 10 (element -> controlEstructure .)
    VAR             reduce using rule 10 (element -> controlEstructure .)
    $end            reduce using rule 10 (element -> controlEstructure .)

  ! LET             [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! FUNCTION        [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! CONST           [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! ASYNC           [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! ENUM            [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! IF              [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! SWITCH          [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! WHILE           [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! FOR             [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! CLASS           [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! LBRACE          [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! RETURN          [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! LBRACKET        [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! PROMPT          [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! NOT             [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! LPAREN          [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! IDENTIFIER      [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! NUMBER          [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! FLOAT           [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! STRING          [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! TRUE            [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! FALSE           [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! PLUSPLUS        [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! MINUSMINUS      [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! CONSOLE         [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! VAR             [ reduce using rule 99 (statement -> controlEstructure .) ]
  ! $end            [ reduce using rule 99 (statement -> controlEstructure .) ]


state 11

    (11) element -> forEstructure .
    (101) statement -> forEstructure .

  ! reduce/reduce conflict for LET resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for CONST resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for ASYNC resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for ENUM resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for IF resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for SWITCH resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for CLASS resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for LBRACE resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for RETURN resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for PROMPT resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for VAR resolved using rule 11 (element -> forEstructure .)
  ! reduce/reduce conflict for $end resolved using rule 11 (element -> forEstructure .)
    LET             reduce using rule 11 (element -> forEstructure .)
    FUNCTION        reduce using rule 11 (element -> forEstructure .)
    CONST           reduce using rule 11 (element -> forEstructure .)
    ASYNC           reduce using rule 11 (element -> forEstructure .)
    ENUM            reduce using rule 11 (element -> forEstructure .)
    IF              reduce using rule 11 (element -> forEstructure .)
    SWITCH          reduce using rule 11 (element -> forEstructure .)
    WHILE           reduce using rule 11 (element -> forEstructure .)
    FOR             reduce using rule 11 (element -> forEstructure .)
    CLASS           reduce using rule 11 (element -> forEstructure .)
    LBRACE          reduce using rule 11 (element -> forEstructure .)
    RETURN          reduce using rule 11 (element -> forEstructure .)
    LBRACKET        reduce using rule 11 (element -> forEstructure .)
    PROMPT          reduce using rule 11 (element -> forEstructure .)
    NOT             reduce using rule 11 (element -> forEstructure .)
    LPAREN          reduce using rule 11 (element -> forEstructure .)
    IDENTIFIER      reduce using rule 11 (element -> forEstructure .)
    NUMBER          reduce using rule 11 (element -> forEstructure .)
    FLOAT           reduce using rule 11 (element -> forEstructure .)
    STRING          reduce using rule 11 (element -> forEstructure .)
    TRUE            reduce using rule 11 (element -> forEstructure .)
    FALSE           reduce using rule 11 (element -> forEstructure .)
    PLUSPLUS        reduce using rule 11 (element -> forEstructure .)
    MINUSMINUS      reduce using rule 11 (element -> forEstructure .)
    CONSOLE         reduce using rule 11 (element -> forEstructure .)
    VAR             reduce using rule 11 (element -> forEstructure .)
    $end            reduce using rule 11 (element -> forEstructure .)

  ! LET             [ reduce using rule 101 (statement -> forEstructure .) ]
  ! FUNCTION        [ reduce using rule 101 (statement -> forEstructure .) ]
  ! CONST           [ reduce using rule 101 (statement -> forEstructure .) ]
  ! ASYNC           [ reduce using rule 101 (statement -> forEstructure .) ]
  ! ENUM            [ reduce using rule 101 (statement -> forEstructure .) ]
  ! IF              [ reduce using rule 101 (statement -> forEstructure .) ]
  ! SWITCH          [ reduce using rule 101 (statement -> forEstructure .) ]
  ! WHILE           [ reduce using rule 101 (statement -> forEstructure .) ]
  ! FOR             [ reduce using rule 101 (statement -> forEstructure .) ]
  ! CLASS           [ reduce using rule 101 (statement -> forEstructure .) ]
  ! LBRACE          [ reduce using rule 101 (statement -> forEstructure .) ]
  ! RETURN          [ reduce using rule 101 (statement -> forEstructure .) ]
  ! LBRACKET        [ reduce using rule 101 (statement -> forEstructure .) ]
  ! PROMPT          [ reduce using rule 101 (statement -> forEstructure .) ]
  ! NOT             [ reduce using rule 101 (statement -> forEstructure .) ]
  ! LPAREN          [ reduce using rule 101 (statement -> forEstructure .) ]
  ! IDENTIFIER      [ reduce using rule 101 (statement -> forEstructure .) ]
  ! NUMBER          [ reduce using rule 101 (statement -> forEstructure .) ]
  ! FLOAT           [ reduce using rule 101 (statement -> forEstructure .) ]
  ! STRING          [ reduce using rule 101 (statement -> forEstructure .) ]
  ! TRUE            [ reduce using rule 101 (statement -> forEstructure .) ]
  ! FALSE           [ reduce using rule 101 (statement -> forEstructure .) ]
  ! PLUSPLUS        [ reduce using rule 101 (statement -> forEstructure .) ]
  ! MINUSMINUS      [ reduce using rule 101 (statement -> forEstructure .) ]
  ! CONSOLE         [ reduce using rule 101 (statement -> forEstructure .) ]
  ! VAR             [ reduce using rule 101 (statement -> forEstructure .) ]
  ! $end            [ reduce using rule 101 (statement -> forEstructure .) ]


state 12

    (12) element -> class_definition .
    (103) statement -> class_definition .

  ! reduce/reduce conflict for LET resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for CONST resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for ASYNC resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for ENUM resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for IF resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for SWITCH resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for WHILE resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for FOR resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for CLASS resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for LBRACE resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for PROMPT resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for NOT resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for LPAREN resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for NUMBER resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for FLOAT resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for STRING resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for TRUE resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for FALSE resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for VAR resolved using rule 12 (element -> class_definition .)
  ! reduce/reduce conflict for $end resolved using rule 12 (element -> class_definition .)
    LET             reduce using rule 12 (element -> class_definition .)
    FUNCTION        reduce using rule 12 (element -> class_definition .)
    CONST           reduce using rule 12 (element -> class_definition .)
    ASYNC           reduce using rule 12 (element -> class_definition .)
    ENUM            reduce using rule 12 (element -> class_definition .)
    IF              reduce using rule 12 (element -> class_definition .)
    SWITCH          reduce using rule 12 (element -> class_definition .)
    WHILE           reduce using rule 12 (element -> class_definition .)
    FOR             reduce using rule 12 (element -> class_definition .)
    CLASS           reduce using rule 12 (element -> class_definition .)
    LBRACE          reduce using rule 12 (element -> class_definition .)
    RETURN          reduce using rule 12 (element -> class_definition .)
    LBRACKET        reduce using rule 12 (element -> class_definition .)
    PROMPT          reduce using rule 12 (element -> class_definition .)
    NOT             reduce using rule 12 (element -> class_definition .)
    LPAREN          reduce using rule 12 (element -> class_definition .)
    IDENTIFIER      reduce using rule 12 (element -> class_definition .)
    NUMBER          reduce using rule 12 (element -> class_definition .)
    FLOAT           reduce using rule 12 (element -> class_definition .)
    STRING          reduce using rule 12 (element -> class_definition .)
    TRUE            reduce using rule 12 (element -> class_definition .)
    FALSE           reduce using rule 12 (element -> class_definition .)
    PLUSPLUS        reduce using rule 12 (element -> class_definition .)
    MINUSMINUS      reduce using rule 12 (element -> class_definition .)
    CONSOLE         reduce using rule 12 (element -> class_definition .)
    VAR             reduce using rule 12 (element -> class_definition .)
    $end            reduce using rule 12 (element -> class_definition .)

  ! LET             [ reduce using rule 103 (statement -> class_definition .) ]
  ! FUNCTION        [ reduce using rule 103 (statement -> class_definition .) ]
  ! CONST           [ reduce using rule 103 (statement -> class_definition .) ]
  ! ASYNC           [ reduce using rule 103 (statement -> class_definition .) ]
  ! ENUM            [ reduce using rule 103 (statement -> class_definition .) ]
  ! IF              [ reduce using rule 103 (statement -> class_definition .) ]
  ! SWITCH          [ reduce using rule 103 (statement -> class_definition .) ]
  ! WHILE           [ reduce using rule 103 (statement -> class_definition .) ]
  ! FOR             [ reduce using rule 103 (statement -> class_definition .) ]
  ! CLASS           [ reduce using rule 103 (statement -> class_definition .) ]
  ! LBRACE          [ reduce using rule 103 (statement -> class_definition .) ]
  ! RETURN          [ reduce using rule 103 (statement -> class_definition .) ]
  ! LBRACKET        [ reduce using rule 103 (statement -> class_definition .) ]
  ! PROMPT          [ reduce using rule 103 (statement -> class_definition .) ]
  ! NOT             [ reduce using rule 103 (statement -> class_definition .) ]
  ! LPAREN          [ reduce using rule 103 (statement -> class_definition .) ]
  ! IDENTIFIER      [ reduce using rule 103 (statement -> class_definition .) ]
  ! NUMBER          [ reduce using rule 103 (statement -> class_definition .) ]
  ! FLOAT           [ reduce using rule 103 (statement -> class_definition .) ]
  ! STRING          [ reduce using rule 103 (statement -> class_definition .) ]
  ! TRUE            [ reduce using rule 103 (statement -> class_definition .) ]
  ! FALSE           [ reduce using rule 103 (statement -> class_definition .) ]
  ! PLUSPLUS        [ reduce using rule 103 (statement -> class_definition .) ]
  ! MINUSMINUS      [ reduce using rule 103 (statement -> class_definition .) ]
  ! CONSOLE         [ reduce using rule 103 (statement -> class_definition .) ]
  ! VAR             [ reduce using rule 103 (statement -> class_definition .) ]
  ! $end            [ reduce using rule 103 (statement -> class_definition .) ]


state 13

    (13) element -> statement .

    LET             reduce using rule 13 (element -> statement .)
    FUNCTION        reduce using rule 13 (element -> statement .)
    CONST           reduce using rule 13 (element -> statement .)
    ASYNC           reduce using rule 13 (element -> statement .)
    ENUM            reduce using rule 13 (element -> statement .)
    IF              reduce using rule 13 (element -> statement .)
    SWITCH          reduce using rule 13 (element -> statement .)
    WHILE           reduce using rule 13 (element -> statement .)
    FOR             reduce using rule 13 (element -> statement .)
    CLASS           reduce using rule 13 (element -> statement .)
    LBRACE          reduce using rule 13 (element -> statement .)
    RETURN          reduce using rule 13 (element -> statement .)
    LBRACKET        reduce using rule 13 (element -> statement .)
    PROMPT          reduce using rule 13 (element -> statement .)
    NOT             reduce using rule 13 (element -> statement .)
    LPAREN          reduce using rule 13 (element -> statement .)
    IDENTIFIER      reduce using rule 13 (element -> statement .)
    NUMBER          reduce using rule 13 (element -> statement .)
    FLOAT           reduce using rule 13 (element -> statement .)
    STRING          reduce using rule 13 (element -> statement .)
    TRUE            reduce using rule 13 (element -> statement .)
    FALSE           reduce using rule 13 (element -> statement .)
    PLUSPLUS        reduce using rule 13 (element -> statement .)
    MINUSMINUS      reduce using rule 13 (element -> statement .)
    CONSOLE         reduce using rule 13 (element -> statement .)
    VAR             reduce using rule 13 (element -> statement .)
    $end            reduce using rule 13 (element -> statement .)


state 14

    (14) element -> expression . SEMICOLON
    (98) statement -> expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 15

    (15) element -> consolelog .
    (97) statement -> consolelog .

  ! reduce/reduce conflict for LET resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for CONST resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for ASYNC resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for ENUM resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for IF resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for SWITCH resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for CLASS resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for LBRACE resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for PROMPT resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for FLOAT resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for VAR resolved using rule 15 (element -> consolelog .)
  ! reduce/reduce conflict for $end resolved using rule 15 (element -> consolelog .)
    LET             reduce using rule 15 (element -> consolelog .)
    FUNCTION        reduce using rule 15 (element -> consolelog .)
    CONST           reduce using rule 15 (element -> consolelog .)
    ASYNC           reduce using rule 15 (element -> consolelog .)
    ENUM            reduce using rule 15 (element -> consolelog .)
    IF              reduce using rule 15 (element -> consolelog .)
    SWITCH          reduce using rule 15 (element -> consolelog .)
    WHILE           reduce using rule 15 (element -> consolelog .)
    FOR             reduce using rule 15 (element -> consolelog .)
    CLASS           reduce using rule 15 (element -> consolelog .)
    LBRACE          reduce using rule 15 (element -> consolelog .)
    RETURN          reduce using rule 15 (element -> consolelog .)
    LBRACKET        reduce using rule 15 (element -> consolelog .)
    PROMPT          reduce using rule 15 (element -> consolelog .)
    NOT             reduce using rule 15 (element -> consolelog .)
    LPAREN          reduce using rule 15 (element -> consolelog .)
    IDENTIFIER      reduce using rule 15 (element -> consolelog .)
    NUMBER          reduce using rule 15 (element -> consolelog .)
    FLOAT           reduce using rule 15 (element -> consolelog .)
    STRING          reduce using rule 15 (element -> consolelog .)
    TRUE            reduce using rule 15 (element -> consolelog .)
    FALSE           reduce using rule 15 (element -> consolelog .)
    PLUSPLUS        reduce using rule 15 (element -> consolelog .)
    MINUSMINUS      reduce using rule 15 (element -> consolelog .)
    CONSOLE         reduce using rule 15 (element -> consolelog .)
    VAR             reduce using rule 15 (element -> consolelog .)
    $end            reduce using rule 15 (element -> consolelog .)

  ! LET             [ reduce using rule 97 (statement -> consolelog .) ]
  ! FUNCTION        [ reduce using rule 97 (statement -> consolelog .) ]
  ! CONST           [ reduce using rule 97 (statement -> consolelog .) ]
  ! ASYNC           [ reduce using rule 97 (statement -> consolelog .) ]
  ! ENUM            [ reduce using rule 97 (statement -> consolelog .) ]
  ! IF              [ reduce using rule 97 (statement -> consolelog .) ]
  ! SWITCH          [ reduce using rule 97 (statement -> consolelog .) ]
  ! WHILE           [ reduce using rule 97 (statement -> consolelog .) ]
  ! FOR             [ reduce using rule 97 (statement -> consolelog .) ]
  ! CLASS           [ reduce using rule 97 (statement -> consolelog .) ]
  ! LBRACE          [ reduce using rule 97 (statement -> consolelog .) ]
  ! RETURN          [ reduce using rule 97 (statement -> consolelog .) ]
  ! LBRACKET        [ reduce using rule 97 (statement -> consolelog .) ]
  ! PROMPT          [ reduce using rule 97 (statement -> consolelog .) ]
  ! NOT             [ reduce using rule 97 (statement -> consolelog .) ]
  ! LPAREN          [ reduce using rule 97 (statement -> consolelog .) ]
  ! IDENTIFIER      [ reduce using rule 97 (statement -> consolelog .) ]
  ! NUMBER          [ reduce using rule 97 (statement -> consolelog .) ]
  ! FLOAT           [ reduce using rule 97 (statement -> consolelog .) ]
  ! STRING          [ reduce using rule 97 (statement -> consolelog .) ]
  ! TRUE            [ reduce using rule 97 (statement -> consolelog .) ]
  ! FALSE           [ reduce using rule 97 (statement -> consolelog .) ]
  ! PLUSPLUS        [ reduce using rule 97 (statement -> consolelog .) ]
  ! MINUSMINUS      [ reduce using rule 97 (statement -> consolelog .) ]
  ! CONSOLE         [ reduce using rule 97 (statement -> consolelog .) ]
  ! VAR             [ reduce using rule 97 (statement -> consolelog .) ]
  ! $end            [ reduce using rule 97 (statement -> consolelog .) ]


state 16

    (16) letAssignment -> LET . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> LET . IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> LET . IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    IDENTIFIER      shift and go to state 70


state 17

    (73) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (77) expression -> IDENTIFIER .

    LPAREN          shift and go to state 71
    SEMICOLON       reduce using rule 77 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 77 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 77 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 77 (expression -> IDENTIFIER .)
    DIV             reduce using rule 77 (expression -> IDENTIFIER .)
    MOD             reduce using rule 77 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 77 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 77 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 77 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 77 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 77 (expression -> IDENTIFIER .)
    POT             reduce using rule 77 (expression -> IDENTIFIER .)
    AND             reduce using rule 77 (expression -> IDENTIFIER .)
    OR              reduce using rule 77 (expression -> IDENTIFIER .)
    EQ              reduce using rule 77 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 77 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 77 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 77 (expression -> IDENTIFIER .)
    LT              reduce using rule 77 (expression -> IDENTIFIER .)
    GT              reduce using rule 77 (expression -> IDENTIFIER .)
    LE              reduce using rule 77 (expression -> IDENTIFIER .)
    GE              reduce using rule 77 (expression -> IDENTIFIER .)
    DOT             reduce using rule 77 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 77 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 77 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 77 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 77 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 77 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 77 (expression -> IDENTIFIER .)
    COLON           reduce using rule 77 (expression -> IDENTIFIER .)


state 18

    (40) expression -> LBRACKET . expression COMMA expression RBRACKET
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 72

state 19

    (34) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    IDENTIFIER      shift and go to state 73


state 20

    (70) expression -> LPAREN . expression RPAREN
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 74

state 21

    (89) statement -> LBRACE . instruction_list RBRACE
    (104) instruction_list -> . instruction_list statement
    (105) instruction_list -> . statement
    (106) instruction_list -> . empty
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (107) empty -> .
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    RBRACE          reduce using rule 107 (empty -> .)
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

  ! LBRACE          [ reduce using rule 107 (empty -> .) ]
  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! ASYNC           [ reduce using rule 107 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 107 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 107 (empty -> .) ]
  ! PROMPT          [ reduce using rule 107 (empty -> .) ]
  ! NOT             [ reduce using rule 107 (empty -> .) ]
  ! LPAREN          [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! NUMBER          [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! STRING          [ reduce using rule 107 (empty -> .) ]
  ! TRUE            [ reduce using rule 107 (empty -> .) ]
  ! FALSE           [ reduce using rule 107 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 107 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]

    instruction_list               shift and go to state 75
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 22

    (131) arrow_function -> CONST . IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (108) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 90


state 23

    (127) async_function -> ASYNC . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    FUNCTION        shift and go to state 91


state 24

    (124) enum_definition -> ENUM . IDENTIFIER LBRACE enum_members RBRACE

    IDENTIFIER      shift and go to state 92


state 25

    (85) controlEstructure -> IF . LPAREN expression RPAREN statement
    (86) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 93


state 26

    (118) controlEstructure -> SWITCH . LPAREN expression RPAREN LBRACE case_block RBRACE

    LPAREN          shift and go to state 94


state 27

    (128) controlEstructure -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 95


state 28

    (23) forEstructure -> FOR . LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement

    LPAREN          shift and go to state 96


state 29

    (110) class_definition -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 97


state 30

    (91) statement -> varAssignment .

    LET             reduce using rule 91 (statement -> varAssignment .)
    FUNCTION        reduce using rule 91 (statement -> varAssignment .)
    CONST           reduce using rule 91 (statement -> varAssignment .)
    ASYNC           reduce using rule 91 (statement -> varAssignment .)
    ENUM            reduce using rule 91 (statement -> varAssignment .)
    IF              reduce using rule 91 (statement -> varAssignment .)
    SWITCH          reduce using rule 91 (statement -> varAssignment .)
    WHILE           reduce using rule 91 (statement -> varAssignment .)
    FOR             reduce using rule 91 (statement -> varAssignment .)
    CLASS           reduce using rule 91 (statement -> varAssignment .)
    LBRACE          reduce using rule 91 (statement -> varAssignment .)
    RETURN          reduce using rule 91 (statement -> varAssignment .)
    LBRACKET        reduce using rule 91 (statement -> varAssignment .)
    PROMPT          reduce using rule 91 (statement -> varAssignment .)
    NOT             reduce using rule 91 (statement -> varAssignment .)
    LPAREN          reduce using rule 91 (statement -> varAssignment .)
    IDENTIFIER      reduce using rule 91 (statement -> varAssignment .)
    NUMBER          reduce using rule 91 (statement -> varAssignment .)
    FLOAT           reduce using rule 91 (statement -> varAssignment .)
    STRING          reduce using rule 91 (statement -> varAssignment .)
    TRUE            reduce using rule 91 (statement -> varAssignment .)
    FALSE           reduce using rule 91 (statement -> varAssignment .)
    PLUSPLUS        reduce using rule 91 (statement -> varAssignment .)
    MINUSMINUS      reduce using rule 91 (statement -> varAssignment .)
    CONSOLE         reduce using rule 91 (statement -> varAssignment .)
    VAR             reduce using rule 91 (statement -> varAssignment .)
    $end            reduce using rule 91 (statement -> varAssignment .)
    RBRACE          reduce using rule 91 (statement -> varAssignment .)
    ELSE            reduce using rule 91 (statement -> varAssignment .)
    CASE            reduce using rule 91 (statement -> varAssignment .)
    DEFAULT         reduce using rule 91 (statement -> varAssignment .)


state 31

    (100) statement -> RETURN . expression SEMICOLON
    (102) statement -> RETURN . SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    SEMICOLON       shift and go to state 99
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 98

state 32

    (68) expression -> PROMPT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 100


state 33

    (76) expression -> STRING .

    SEMICOLON       reduce using rule 76 (expression -> STRING .)
    PLUS            reduce using rule 76 (expression -> STRING .)
    MINUS           reduce using rule 76 (expression -> STRING .)
    TIMES           reduce using rule 76 (expression -> STRING .)
    DIV             reduce using rule 76 (expression -> STRING .)
    MOD             reduce using rule 76 (expression -> STRING .)
    PLUS_ASSIGN     reduce using rule 76 (expression -> STRING .)
    MINUS_ASSIGN    reduce using rule 76 (expression -> STRING .)
    MULT_ASSIGN     reduce using rule 76 (expression -> STRING .)
    DIV_ASSIGN      reduce using rule 76 (expression -> STRING .)
    MOD_ASSIGN      reduce using rule 76 (expression -> STRING .)
    POT             reduce using rule 76 (expression -> STRING .)
    AND             reduce using rule 76 (expression -> STRING .)
    OR              reduce using rule 76 (expression -> STRING .)
    EQ              reduce using rule 76 (expression -> STRING .)
    NEQ             reduce using rule 76 (expression -> STRING .)
    STRICT_EQ       reduce using rule 76 (expression -> STRING .)
    STRICT_NEQ      reduce using rule 76 (expression -> STRING .)
    LT              reduce using rule 76 (expression -> STRING .)
    GT              reduce using rule 76 (expression -> STRING .)
    LE              reduce using rule 76 (expression -> STRING .)
    GE              reduce using rule 76 (expression -> STRING .)
    DOT             reduce using rule 76 (expression -> STRING .)
    LBRACKET        reduce using rule 76 (expression -> STRING .)
    PLUSPLUS        reduce using rule 76 (expression -> STRING .)
    MINUSMINUS      reduce using rule 76 (expression -> STRING .)
    COMMA           reduce using rule 76 (expression -> STRING .)
    RPAREN          reduce using rule 76 (expression -> STRING .)
    RBRACKET        reduce using rule 76 (expression -> STRING .)
    COLON           reduce using rule 76 (expression -> STRING .)


state 34

    (69) expression -> NOT . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 101

state 35

    (74) expression -> NUMBER .

    SEMICOLON       reduce using rule 74 (expression -> NUMBER .)
    PLUS            reduce using rule 74 (expression -> NUMBER .)
    MINUS           reduce using rule 74 (expression -> NUMBER .)
    TIMES           reduce using rule 74 (expression -> NUMBER .)
    DIV             reduce using rule 74 (expression -> NUMBER .)
    MOD             reduce using rule 74 (expression -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 74 (expression -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 74 (expression -> NUMBER .)
    MULT_ASSIGN     reduce using rule 74 (expression -> NUMBER .)
    DIV_ASSIGN      reduce using rule 74 (expression -> NUMBER .)
    MOD_ASSIGN      reduce using rule 74 (expression -> NUMBER .)
    POT             reduce using rule 74 (expression -> NUMBER .)
    AND             reduce using rule 74 (expression -> NUMBER .)
    OR              reduce using rule 74 (expression -> NUMBER .)
    EQ              reduce using rule 74 (expression -> NUMBER .)
    NEQ             reduce using rule 74 (expression -> NUMBER .)
    STRICT_EQ       reduce using rule 74 (expression -> NUMBER .)
    STRICT_NEQ      reduce using rule 74 (expression -> NUMBER .)
    LT              reduce using rule 74 (expression -> NUMBER .)
    GT              reduce using rule 74 (expression -> NUMBER .)
    LE              reduce using rule 74 (expression -> NUMBER .)
    GE              reduce using rule 74 (expression -> NUMBER .)
    DOT             reduce using rule 74 (expression -> NUMBER .)
    LBRACKET        reduce using rule 74 (expression -> NUMBER .)
    PLUSPLUS        reduce using rule 74 (expression -> NUMBER .)
    MINUSMINUS      reduce using rule 74 (expression -> NUMBER .)
    COMMA           reduce using rule 74 (expression -> NUMBER .)
    RPAREN          reduce using rule 74 (expression -> NUMBER .)
    RBRACKET        reduce using rule 74 (expression -> NUMBER .)
    COLON           reduce using rule 74 (expression -> NUMBER .)


state 36

    (75) expression -> FLOAT .

    SEMICOLON       reduce using rule 75 (expression -> FLOAT .)
    PLUS            reduce using rule 75 (expression -> FLOAT .)
    MINUS           reduce using rule 75 (expression -> FLOAT .)
    TIMES           reduce using rule 75 (expression -> FLOAT .)
    DIV             reduce using rule 75 (expression -> FLOAT .)
    MOD             reduce using rule 75 (expression -> FLOAT .)
    PLUS_ASSIGN     reduce using rule 75 (expression -> FLOAT .)
    MINUS_ASSIGN    reduce using rule 75 (expression -> FLOAT .)
    MULT_ASSIGN     reduce using rule 75 (expression -> FLOAT .)
    DIV_ASSIGN      reduce using rule 75 (expression -> FLOAT .)
    MOD_ASSIGN      reduce using rule 75 (expression -> FLOAT .)
    POT             reduce using rule 75 (expression -> FLOAT .)
    AND             reduce using rule 75 (expression -> FLOAT .)
    OR              reduce using rule 75 (expression -> FLOAT .)
    EQ              reduce using rule 75 (expression -> FLOAT .)
    NEQ             reduce using rule 75 (expression -> FLOAT .)
    STRICT_EQ       reduce using rule 75 (expression -> FLOAT .)
    STRICT_NEQ      reduce using rule 75 (expression -> FLOAT .)
    LT              reduce using rule 75 (expression -> FLOAT .)
    GT              reduce using rule 75 (expression -> FLOAT .)
    LE              reduce using rule 75 (expression -> FLOAT .)
    GE              reduce using rule 75 (expression -> FLOAT .)
    DOT             reduce using rule 75 (expression -> FLOAT .)
    LBRACKET        reduce using rule 75 (expression -> FLOAT .)
    PLUSPLUS        reduce using rule 75 (expression -> FLOAT .)
    MINUSMINUS      reduce using rule 75 (expression -> FLOAT .)
    COMMA           reduce using rule 75 (expression -> FLOAT .)
    RPAREN          reduce using rule 75 (expression -> FLOAT .)
    RBRACKET        reduce using rule 75 (expression -> FLOAT .)
    COLON           reduce using rule 75 (expression -> FLOAT .)


state 37

    (78) expression -> TRUE .

    SEMICOLON       reduce using rule 78 (expression -> TRUE .)
    PLUS            reduce using rule 78 (expression -> TRUE .)
    MINUS           reduce using rule 78 (expression -> TRUE .)
    TIMES           reduce using rule 78 (expression -> TRUE .)
    DIV             reduce using rule 78 (expression -> TRUE .)
    MOD             reduce using rule 78 (expression -> TRUE .)
    PLUS_ASSIGN     reduce using rule 78 (expression -> TRUE .)
    MINUS_ASSIGN    reduce using rule 78 (expression -> TRUE .)
    MULT_ASSIGN     reduce using rule 78 (expression -> TRUE .)
    DIV_ASSIGN      reduce using rule 78 (expression -> TRUE .)
    MOD_ASSIGN      reduce using rule 78 (expression -> TRUE .)
    POT             reduce using rule 78 (expression -> TRUE .)
    AND             reduce using rule 78 (expression -> TRUE .)
    OR              reduce using rule 78 (expression -> TRUE .)
    EQ              reduce using rule 78 (expression -> TRUE .)
    NEQ             reduce using rule 78 (expression -> TRUE .)
    STRICT_EQ       reduce using rule 78 (expression -> TRUE .)
    STRICT_NEQ      reduce using rule 78 (expression -> TRUE .)
    LT              reduce using rule 78 (expression -> TRUE .)
    GT              reduce using rule 78 (expression -> TRUE .)
    LE              reduce using rule 78 (expression -> TRUE .)
    GE              reduce using rule 78 (expression -> TRUE .)
    DOT             reduce using rule 78 (expression -> TRUE .)
    LBRACKET        reduce using rule 78 (expression -> TRUE .)
    PLUSPLUS        reduce using rule 78 (expression -> TRUE .)
    MINUSMINUS      reduce using rule 78 (expression -> TRUE .)
    COMMA           reduce using rule 78 (expression -> TRUE .)
    RPAREN          reduce using rule 78 (expression -> TRUE .)
    RBRACKET        reduce using rule 78 (expression -> TRUE .)
    COLON           reduce using rule 78 (expression -> TRUE .)


state 38

    (79) expression -> FALSE .

    SEMICOLON       reduce using rule 79 (expression -> FALSE .)
    PLUS            reduce using rule 79 (expression -> FALSE .)
    MINUS           reduce using rule 79 (expression -> FALSE .)
    TIMES           reduce using rule 79 (expression -> FALSE .)
    DIV             reduce using rule 79 (expression -> FALSE .)
    MOD             reduce using rule 79 (expression -> FALSE .)
    PLUS_ASSIGN     reduce using rule 79 (expression -> FALSE .)
    MINUS_ASSIGN    reduce using rule 79 (expression -> FALSE .)
    MULT_ASSIGN     reduce using rule 79 (expression -> FALSE .)
    DIV_ASSIGN      reduce using rule 79 (expression -> FALSE .)
    MOD_ASSIGN      reduce using rule 79 (expression -> FALSE .)
    POT             reduce using rule 79 (expression -> FALSE .)
    AND             reduce using rule 79 (expression -> FALSE .)
    OR              reduce using rule 79 (expression -> FALSE .)
    EQ              reduce using rule 79 (expression -> FALSE .)
    NEQ             reduce using rule 79 (expression -> FALSE .)
    STRICT_EQ       reduce using rule 79 (expression -> FALSE .)
    STRICT_NEQ      reduce using rule 79 (expression -> FALSE .)
    LT              reduce using rule 79 (expression -> FALSE .)
    GT              reduce using rule 79 (expression -> FALSE .)
    LE              reduce using rule 79 (expression -> FALSE .)
    GE              reduce using rule 79 (expression -> FALSE .)
    DOT             reduce using rule 79 (expression -> FALSE .)
    LBRACKET        reduce using rule 79 (expression -> FALSE .)
    PLUSPLUS        reduce using rule 79 (expression -> FALSE .)
    MINUSMINUS      reduce using rule 79 (expression -> FALSE .)
    COMMA           reduce using rule 79 (expression -> FALSE .)
    RPAREN          reduce using rule 79 (expression -> FALSE .)
    RBRACKET        reduce using rule 79 (expression -> FALSE .)
    COLON           reduce using rule 79 (expression -> FALSE .)


state 39

    (82) expression -> PLUSPLUS . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 102

state 40

    (83) expression -> MINUSMINUS . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 103

state 41

    (84) consolelog -> CONSOLE . DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON

    DOT             shift and go to state 104


state 42

    (129) varAssignment -> VAR . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> VAR . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 105


state 43

    (1) program -> program element .

    LET             reduce using rule 1 (program -> program element .)
    FUNCTION        reduce using rule 1 (program -> program element .)
    CONST           reduce using rule 1 (program -> program element .)
    ASYNC           reduce using rule 1 (program -> program element .)
    ENUM            reduce using rule 1 (program -> program element .)
    IF              reduce using rule 1 (program -> program element .)
    SWITCH          reduce using rule 1 (program -> program element .)
    WHILE           reduce using rule 1 (program -> program element .)
    FOR             reduce using rule 1 (program -> program element .)
    CLASS           reduce using rule 1 (program -> program element .)
    LBRACE          reduce using rule 1 (program -> program element .)
    RETURN          reduce using rule 1 (program -> program element .)
    LBRACKET        reduce using rule 1 (program -> program element .)
    PROMPT          reduce using rule 1 (program -> program element .)
    NOT             reduce using rule 1 (program -> program element .)
    LPAREN          reduce using rule 1 (program -> program element .)
    IDENTIFIER      reduce using rule 1 (program -> program element .)
    NUMBER          reduce using rule 1 (program -> program element .)
    FLOAT           reduce using rule 1 (program -> program element .)
    STRING          reduce using rule 1 (program -> program element .)
    TRUE            reduce using rule 1 (program -> program element .)
    FALSE           reduce using rule 1 (program -> program element .)
    PLUSPLUS        reduce using rule 1 (program -> program element .)
    MINUSMINUS      reduce using rule 1 (program -> program element .)
    CONSOLE         reduce using rule 1 (program -> program element .)
    VAR             reduce using rule 1 (program -> program element .)
    $end            reduce using rule 1 (program -> program element .)


state 44

    (14) element -> expression SEMICOLON .
    (98) statement -> expression SEMICOLON .

  ! reduce/reduce conflict for LET resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for ASYNC resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for ENUM resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LBRACE resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for PROMPT resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for NOT resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for VAR resolved using rule 14 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 14 (element -> expression SEMICOLON .)
    LET             reduce using rule 14 (element -> expression SEMICOLON .)
    FUNCTION        reduce using rule 14 (element -> expression SEMICOLON .)
    CONST           reduce using rule 14 (element -> expression SEMICOLON .)
    ASYNC           reduce using rule 14 (element -> expression SEMICOLON .)
    ENUM            reduce using rule 14 (element -> expression SEMICOLON .)
    IF              reduce using rule 14 (element -> expression SEMICOLON .)
    SWITCH          reduce using rule 14 (element -> expression SEMICOLON .)
    WHILE           reduce using rule 14 (element -> expression SEMICOLON .)
    FOR             reduce using rule 14 (element -> expression SEMICOLON .)
    CLASS           reduce using rule 14 (element -> expression SEMICOLON .)
    LBRACE          reduce using rule 14 (element -> expression SEMICOLON .)
    RETURN          reduce using rule 14 (element -> expression SEMICOLON .)
    LBRACKET        reduce using rule 14 (element -> expression SEMICOLON .)
    PROMPT          reduce using rule 14 (element -> expression SEMICOLON .)
    NOT             reduce using rule 14 (element -> expression SEMICOLON .)
    LPAREN          reduce using rule 14 (element -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 14 (element -> expression SEMICOLON .)
    NUMBER          reduce using rule 14 (element -> expression SEMICOLON .)
    FLOAT           reduce using rule 14 (element -> expression SEMICOLON .)
    STRING          reduce using rule 14 (element -> expression SEMICOLON .)
    TRUE            reduce using rule 14 (element -> expression SEMICOLON .)
    FALSE           reduce using rule 14 (element -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 14 (element -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 14 (element -> expression SEMICOLON .)
    CONSOLE         reduce using rule 14 (element -> expression SEMICOLON .)
    VAR             reduce using rule 14 (element -> expression SEMICOLON .)
    $end            reduce using rule 14 (element -> expression SEMICOLON .)

  ! LET             [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! CONST           [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! ASYNC           [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! ENUM            [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! IF              [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! WHILE           [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! FOR             [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! CLASS           [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! LBRACE          [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! RETURN          [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! LBRACKET        [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! PROMPT          [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! NOT             [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! IDENTIFIER      [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! STRING          [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! TRUE            [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! FALSE           [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! PLUSPLUS        [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! MINUSMINUS      [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! CONSOLE         [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! VAR             [ reduce using rule 98 (statement -> expression SEMICOLON .) ]
  ! $end            [ reduce using rule 98 (statement -> expression SEMICOLON .) ]


state 45

    (47) expression -> expression PLUS . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 106

state 46

    (48) expression -> expression MINUS . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 107

state 47

    (49) expression -> expression TIMES . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 108

state 48

    (50) expression -> expression DIV . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 109

state 49

    (51) expression -> expression MOD . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 110

state 50

    (52) expression -> expression PLUS_ASSIGN . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 111

state 51

    (53) expression -> expression MINUS_ASSIGN . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 112

state 52

    (54) expression -> expression MULT_ASSIGN . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 113

state 53

    (55) expression -> expression DIV_ASSIGN . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 114

state 54

    (56) expression -> expression MOD_ASSIGN . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 115

state 55

    (57) expression -> expression POT . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 116

state 56

    (58) expression -> expression AND . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 117

state 57

    (59) expression -> expression OR . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 118

state 58

    (60) expression -> expression EQ . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 119

state 59

    (61) expression -> expression NEQ . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 120

state 60

    (62) expression -> expression STRICT_EQ . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 121

state 61

    (63) expression -> expression STRICT_NEQ . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 122

state 62

    (64) expression -> expression LT . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 123

state 63

    (65) expression -> expression GT . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 124

state 64

    (66) expression -> expression LE . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 125

state 65

    (67) expression -> expression GE . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 126

state 66

    (71) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 127


state 67

    (72) expression -> expression LBRACKET . expression RBRACKET
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 128

state 68

    (80) expression -> expression PLUSPLUS .

    SEMICOLON       reduce using rule 80 (expression -> expression PLUSPLUS .)
    PLUS            reduce using rule 80 (expression -> expression PLUSPLUS .)
    MINUS           reduce using rule 80 (expression -> expression PLUSPLUS .)
    TIMES           reduce using rule 80 (expression -> expression PLUSPLUS .)
    DIV             reduce using rule 80 (expression -> expression PLUSPLUS .)
    MOD             reduce using rule 80 (expression -> expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 80 (expression -> expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 80 (expression -> expression PLUSPLUS .)
    MULT_ASSIGN     reduce using rule 80 (expression -> expression PLUSPLUS .)
    DIV_ASSIGN      reduce using rule 80 (expression -> expression PLUSPLUS .)
    MOD_ASSIGN      reduce using rule 80 (expression -> expression PLUSPLUS .)
    POT             reduce using rule 80 (expression -> expression PLUSPLUS .)
    AND             reduce using rule 80 (expression -> expression PLUSPLUS .)
    OR              reduce using rule 80 (expression -> expression PLUSPLUS .)
    EQ              reduce using rule 80 (expression -> expression PLUSPLUS .)
    NEQ             reduce using rule 80 (expression -> expression PLUSPLUS .)
    STRICT_EQ       reduce using rule 80 (expression -> expression PLUSPLUS .)
    STRICT_NEQ      reduce using rule 80 (expression -> expression PLUSPLUS .)
    LT              reduce using rule 80 (expression -> expression PLUSPLUS .)
    GT              reduce using rule 80 (expression -> expression PLUSPLUS .)
    LE              reduce using rule 80 (expression -> expression PLUSPLUS .)
    GE              reduce using rule 80 (expression -> expression PLUSPLUS .)
    DOT             reduce using rule 80 (expression -> expression PLUSPLUS .)
    LBRACKET        reduce using rule 80 (expression -> expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 80 (expression -> expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 80 (expression -> expression PLUSPLUS .)
    COMMA           reduce using rule 80 (expression -> expression PLUSPLUS .)
    RPAREN          reduce using rule 80 (expression -> expression PLUSPLUS .)
    RBRACKET        reduce using rule 80 (expression -> expression PLUSPLUS .)
    COLON           reduce using rule 80 (expression -> expression PLUSPLUS .)


state 69

    (81) expression -> expression MINUSMINUS .

    SEMICOLON       reduce using rule 81 (expression -> expression MINUSMINUS .)
    PLUS            reduce using rule 81 (expression -> expression MINUSMINUS .)
    MINUS           reduce using rule 81 (expression -> expression MINUSMINUS .)
    TIMES           reduce using rule 81 (expression -> expression MINUSMINUS .)
    DIV             reduce using rule 81 (expression -> expression MINUSMINUS .)
    MOD             reduce using rule 81 (expression -> expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 81 (expression -> expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 81 (expression -> expression MINUSMINUS .)
    MULT_ASSIGN     reduce using rule 81 (expression -> expression MINUSMINUS .)
    DIV_ASSIGN      reduce using rule 81 (expression -> expression MINUSMINUS .)
    MOD_ASSIGN      reduce using rule 81 (expression -> expression MINUSMINUS .)
    POT             reduce using rule 81 (expression -> expression MINUSMINUS .)
    AND             reduce using rule 81 (expression -> expression MINUSMINUS .)
    OR              reduce using rule 81 (expression -> expression MINUSMINUS .)
    EQ              reduce using rule 81 (expression -> expression MINUSMINUS .)
    NEQ             reduce using rule 81 (expression -> expression MINUSMINUS .)
    STRICT_EQ       reduce using rule 81 (expression -> expression MINUSMINUS .)
    STRICT_NEQ      reduce using rule 81 (expression -> expression MINUSMINUS .)
    LT              reduce using rule 81 (expression -> expression MINUSMINUS .)
    GT              reduce using rule 81 (expression -> expression MINUSMINUS .)
    LE              reduce using rule 81 (expression -> expression MINUSMINUS .)
    GE              reduce using rule 81 (expression -> expression MINUSMINUS .)
    DOT             reduce using rule 81 (expression -> expression MINUSMINUS .)
    LBRACKET        reduce using rule 81 (expression -> expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 81 (expression -> expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 81 (expression -> expression MINUSMINUS .)
    COMMA           reduce using rule 81 (expression -> expression MINUSMINUS .)
    RPAREN          reduce using rule 81 (expression -> expression MINUSMINUS .)
    RBRACKET        reduce using rule 81 (expression -> expression MINUSMINUS .)
    COLON           reduce using rule 81 (expression -> expression MINUSMINUS .)


state 70

    (16) letAssignment -> LET IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> LET IDENTIFIER . EQUAL expression SEMICOLON
    (18) declaracion -> LET IDENTIFIER . COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    COLON           shift and go to state 129
    EQUAL           shift and go to state 130


state 71

    (73) expression -> IDENTIFIER LPAREN . lista_expresiones_opt RPAREN
    (19) lista_expresiones_opt -> . lista_expresiones
    (20) lista_expresiones_opt -> . empty
    (21) lista_expresiones -> . expression
    (22) lista_expresiones -> . expression COMMA lista_expresiones
    (107) empty -> .
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    RPAREN          reduce using rule 107 (empty -> .)
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    lista_expresiones_opt          shift and go to state 131
    lista_expresiones              shift and go to state 132
    empty                          shift and go to state 133
    expression                     shift and go to state 134

state 72

    (40) expression -> LBRACKET expression . COMMA expression RBRACKET
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    COMMA           shift and go to state 135
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 73

    (34) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    LPAREN          shift and go to state 136


state 74

    (70) expression -> LPAREN expression . RPAREN
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 75

    (89) statement -> LBRACE instruction_list . RBRACE
    (104) instruction_list -> instruction_list . statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          shift and go to state 138
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    statement                      shift and go to state 139
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 76

    (105) instruction_list -> statement .

    RBRACE          reduce using rule 105 (instruction_list -> statement .)
    LBRACE          reduce using rule 105 (instruction_list -> statement .)
    RETURN          reduce using rule 105 (instruction_list -> statement .)
    LET             reduce using rule 105 (instruction_list -> statement .)
    VAR             reduce using rule 105 (instruction_list -> statement .)
    CONST           reduce using rule 105 (instruction_list -> statement .)
    FUNCTION        reduce using rule 105 (instruction_list -> statement .)
    ASYNC           reduce using rule 105 (instruction_list -> statement .)
    CONSOLE         reduce using rule 105 (instruction_list -> statement .)
    LBRACKET        reduce using rule 105 (instruction_list -> statement .)
    PROMPT          reduce using rule 105 (instruction_list -> statement .)
    NOT             reduce using rule 105 (instruction_list -> statement .)
    LPAREN          reduce using rule 105 (instruction_list -> statement .)
    IDENTIFIER      reduce using rule 105 (instruction_list -> statement .)
    NUMBER          reduce using rule 105 (instruction_list -> statement .)
    FLOAT           reduce using rule 105 (instruction_list -> statement .)
    STRING          reduce using rule 105 (instruction_list -> statement .)
    TRUE            reduce using rule 105 (instruction_list -> statement .)
    FALSE           reduce using rule 105 (instruction_list -> statement .)
    PLUSPLUS        reduce using rule 105 (instruction_list -> statement .)
    MINUSMINUS      reduce using rule 105 (instruction_list -> statement .)
    IF              reduce using rule 105 (instruction_list -> statement .)
    SWITCH          reduce using rule 105 (instruction_list -> statement .)
    WHILE           reduce using rule 105 (instruction_list -> statement .)
    FOR             reduce using rule 105 (instruction_list -> statement .)
    CLASS           reduce using rule 105 (instruction_list -> statement .)
    CASE            reduce using rule 105 (instruction_list -> statement .)
    DEFAULT         reduce using rule 105 (instruction_list -> statement .)


state 77

    (106) instruction_list -> empty .

    RBRACE          reduce using rule 106 (instruction_list -> empty .)
    LBRACE          reduce using rule 106 (instruction_list -> empty .)
    RETURN          reduce using rule 106 (instruction_list -> empty .)
    LET             reduce using rule 106 (instruction_list -> empty .)
    VAR             reduce using rule 106 (instruction_list -> empty .)
    CONST           reduce using rule 106 (instruction_list -> empty .)
    FUNCTION        reduce using rule 106 (instruction_list -> empty .)
    ASYNC           reduce using rule 106 (instruction_list -> empty .)
    CONSOLE         reduce using rule 106 (instruction_list -> empty .)
    LBRACKET        reduce using rule 106 (instruction_list -> empty .)
    PROMPT          reduce using rule 106 (instruction_list -> empty .)
    NOT             reduce using rule 106 (instruction_list -> empty .)
    LPAREN          reduce using rule 106 (instruction_list -> empty .)
    IDENTIFIER      reduce using rule 106 (instruction_list -> empty .)
    NUMBER          reduce using rule 106 (instruction_list -> empty .)
    FLOAT           reduce using rule 106 (instruction_list -> empty .)
    STRING          reduce using rule 106 (instruction_list -> empty .)
    TRUE            reduce using rule 106 (instruction_list -> empty .)
    FALSE           reduce using rule 106 (instruction_list -> empty .)
    PLUSPLUS        reduce using rule 106 (instruction_list -> empty .)
    MINUSMINUS      reduce using rule 106 (instruction_list -> empty .)
    IF              reduce using rule 106 (instruction_list -> empty .)
    SWITCH          reduce using rule 106 (instruction_list -> empty .)
    WHILE           reduce using rule 106 (instruction_list -> empty .)
    FOR             reduce using rule 106 (instruction_list -> empty .)
    CLASS           reduce using rule 106 (instruction_list -> empty .)
    CASE            reduce using rule 106 (instruction_list -> empty .)
    DEFAULT         reduce using rule 106 (instruction_list -> empty .)


state 78

    (90) statement -> letAssignment .

    RBRACE          reduce using rule 90 (statement -> letAssignment .)
    LBRACE          reduce using rule 90 (statement -> letAssignment .)
    RETURN          reduce using rule 90 (statement -> letAssignment .)
    LET             reduce using rule 90 (statement -> letAssignment .)
    VAR             reduce using rule 90 (statement -> letAssignment .)
    CONST           reduce using rule 90 (statement -> letAssignment .)
    FUNCTION        reduce using rule 90 (statement -> letAssignment .)
    ASYNC           reduce using rule 90 (statement -> letAssignment .)
    CONSOLE         reduce using rule 90 (statement -> letAssignment .)
    LBRACKET        reduce using rule 90 (statement -> letAssignment .)
    PROMPT          reduce using rule 90 (statement -> letAssignment .)
    NOT             reduce using rule 90 (statement -> letAssignment .)
    LPAREN          reduce using rule 90 (statement -> letAssignment .)
    IDENTIFIER      reduce using rule 90 (statement -> letAssignment .)
    NUMBER          reduce using rule 90 (statement -> letAssignment .)
    FLOAT           reduce using rule 90 (statement -> letAssignment .)
    STRING          reduce using rule 90 (statement -> letAssignment .)
    TRUE            reduce using rule 90 (statement -> letAssignment .)
    FALSE           reduce using rule 90 (statement -> letAssignment .)
    PLUSPLUS        reduce using rule 90 (statement -> letAssignment .)
    MINUSMINUS      reduce using rule 90 (statement -> letAssignment .)
    IF              reduce using rule 90 (statement -> letAssignment .)
    SWITCH          reduce using rule 90 (statement -> letAssignment .)
    WHILE           reduce using rule 90 (statement -> letAssignment .)
    FOR             reduce using rule 90 (statement -> letAssignment .)
    CLASS           reduce using rule 90 (statement -> letAssignment .)
    ELSE            reduce using rule 90 (statement -> letAssignment .)
    ENUM            reduce using rule 90 (statement -> letAssignment .)
    $end            reduce using rule 90 (statement -> letAssignment .)
    CASE            reduce using rule 90 (statement -> letAssignment .)
    DEFAULT         reduce using rule 90 (statement -> letAssignment .)


state 79

    (92) statement -> constAssignment .

    RBRACE          reduce using rule 92 (statement -> constAssignment .)
    LBRACE          reduce using rule 92 (statement -> constAssignment .)
    RETURN          reduce using rule 92 (statement -> constAssignment .)
    LET             reduce using rule 92 (statement -> constAssignment .)
    VAR             reduce using rule 92 (statement -> constAssignment .)
    CONST           reduce using rule 92 (statement -> constAssignment .)
    FUNCTION        reduce using rule 92 (statement -> constAssignment .)
    ASYNC           reduce using rule 92 (statement -> constAssignment .)
    CONSOLE         reduce using rule 92 (statement -> constAssignment .)
    LBRACKET        reduce using rule 92 (statement -> constAssignment .)
    PROMPT          reduce using rule 92 (statement -> constAssignment .)
    NOT             reduce using rule 92 (statement -> constAssignment .)
    LPAREN          reduce using rule 92 (statement -> constAssignment .)
    IDENTIFIER      reduce using rule 92 (statement -> constAssignment .)
    NUMBER          reduce using rule 92 (statement -> constAssignment .)
    FLOAT           reduce using rule 92 (statement -> constAssignment .)
    STRING          reduce using rule 92 (statement -> constAssignment .)
    TRUE            reduce using rule 92 (statement -> constAssignment .)
    FALSE           reduce using rule 92 (statement -> constAssignment .)
    PLUSPLUS        reduce using rule 92 (statement -> constAssignment .)
    MINUSMINUS      reduce using rule 92 (statement -> constAssignment .)
    IF              reduce using rule 92 (statement -> constAssignment .)
    SWITCH          reduce using rule 92 (statement -> constAssignment .)
    WHILE           reduce using rule 92 (statement -> constAssignment .)
    FOR             reduce using rule 92 (statement -> constAssignment .)
    CLASS           reduce using rule 92 (statement -> constAssignment .)
    ELSE            reduce using rule 92 (statement -> constAssignment .)
    ENUM            reduce using rule 92 (statement -> constAssignment .)
    $end            reduce using rule 92 (statement -> constAssignment .)
    CASE            reduce using rule 92 (statement -> constAssignment .)
    DEFAULT         reduce using rule 92 (statement -> constAssignment .)


state 80

    (93) statement -> declaracion .

    RBRACE          reduce using rule 93 (statement -> declaracion .)
    LBRACE          reduce using rule 93 (statement -> declaracion .)
    RETURN          reduce using rule 93 (statement -> declaracion .)
    LET             reduce using rule 93 (statement -> declaracion .)
    VAR             reduce using rule 93 (statement -> declaracion .)
    CONST           reduce using rule 93 (statement -> declaracion .)
    FUNCTION        reduce using rule 93 (statement -> declaracion .)
    ASYNC           reduce using rule 93 (statement -> declaracion .)
    CONSOLE         reduce using rule 93 (statement -> declaracion .)
    LBRACKET        reduce using rule 93 (statement -> declaracion .)
    PROMPT          reduce using rule 93 (statement -> declaracion .)
    NOT             reduce using rule 93 (statement -> declaracion .)
    LPAREN          reduce using rule 93 (statement -> declaracion .)
    IDENTIFIER      reduce using rule 93 (statement -> declaracion .)
    NUMBER          reduce using rule 93 (statement -> declaracion .)
    FLOAT           reduce using rule 93 (statement -> declaracion .)
    STRING          reduce using rule 93 (statement -> declaracion .)
    TRUE            reduce using rule 93 (statement -> declaracion .)
    FALSE           reduce using rule 93 (statement -> declaracion .)
    PLUSPLUS        reduce using rule 93 (statement -> declaracion .)
    MINUSMINUS      reduce using rule 93 (statement -> declaracion .)
    IF              reduce using rule 93 (statement -> declaracion .)
    SWITCH          reduce using rule 93 (statement -> declaracion .)
    WHILE           reduce using rule 93 (statement -> declaracion .)
    FOR             reduce using rule 93 (statement -> declaracion .)
    CLASS           reduce using rule 93 (statement -> declaracion .)
    ELSE            reduce using rule 93 (statement -> declaracion .)
    ENUM            reduce using rule 93 (statement -> declaracion .)
    $end            reduce using rule 93 (statement -> declaracion .)
    CASE            reduce using rule 93 (statement -> declaracion .)
    DEFAULT         reduce using rule 93 (statement -> declaracion .)


state 81

    (94) statement -> function .

    RBRACE          reduce using rule 94 (statement -> function .)
    LBRACE          reduce using rule 94 (statement -> function .)
    RETURN          reduce using rule 94 (statement -> function .)
    LET             reduce using rule 94 (statement -> function .)
    VAR             reduce using rule 94 (statement -> function .)
    CONST           reduce using rule 94 (statement -> function .)
    FUNCTION        reduce using rule 94 (statement -> function .)
    ASYNC           reduce using rule 94 (statement -> function .)
    CONSOLE         reduce using rule 94 (statement -> function .)
    LBRACKET        reduce using rule 94 (statement -> function .)
    PROMPT          reduce using rule 94 (statement -> function .)
    NOT             reduce using rule 94 (statement -> function .)
    LPAREN          reduce using rule 94 (statement -> function .)
    IDENTIFIER      reduce using rule 94 (statement -> function .)
    NUMBER          reduce using rule 94 (statement -> function .)
    FLOAT           reduce using rule 94 (statement -> function .)
    STRING          reduce using rule 94 (statement -> function .)
    TRUE            reduce using rule 94 (statement -> function .)
    FALSE           reduce using rule 94 (statement -> function .)
    PLUSPLUS        reduce using rule 94 (statement -> function .)
    MINUSMINUS      reduce using rule 94 (statement -> function .)
    IF              reduce using rule 94 (statement -> function .)
    SWITCH          reduce using rule 94 (statement -> function .)
    WHILE           reduce using rule 94 (statement -> function .)
    FOR             reduce using rule 94 (statement -> function .)
    CLASS           reduce using rule 94 (statement -> function .)
    ELSE            reduce using rule 94 (statement -> function .)
    ENUM            reduce using rule 94 (statement -> function .)
    $end            reduce using rule 94 (statement -> function .)
    CASE            reduce using rule 94 (statement -> function .)
    DEFAULT         reduce using rule 94 (statement -> function .)


state 82

    (95) statement -> arrow_function .

    RBRACE          reduce using rule 95 (statement -> arrow_function .)
    LBRACE          reduce using rule 95 (statement -> arrow_function .)
    RETURN          reduce using rule 95 (statement -> arrow_function .)
    LET             reduce using rule 95 (statement -> arrow_function .)
    VAR             reduce using rule 95 (statement -> arrow_function .)
    CONST           reduce using rule 95 (statement -> arrow_function .)
    FUNCTION        reduce using rule 95 (statement -> arrow_function .)
    ASYNC           reduce using rule 95 (statement -> arrow_function .)
    CONSOLE         reduce using rule 95 (statement -> arrow_function .)
    LBRACKET        reduce using rule 95 (statement -> arrow_function .)
    PROMPT          reduce using rule 95 (statement -> arrow_function .)
    NOT             reduce using rule 95 (statement -> arrow_function .)
    LPAREN          reduce using rule 95 (statement -> arrow_function .)
    IDENTIFIER      reduce using rule 95 (statement -> arrow_function .)
    NUMBER          reduce using rule 95 (statement -> arrow_function .)
    FLOAT           reduce using rule 95 (statement -> arrow_function .)
    STRING          reduce using rule 95 (statement -> arrow_function .)
    TRUE            reduce using rule 95 (statement -> arrow_function .)
    FALSE           reduce using rule 95 (statement -> arrow_function .)
    PLUSPLUS        reduce using rule 95 (statement -> arrow_function .)
    MINUSMINUS      reduce using rule 95 (statement -> arrow_function .)
    IF              reduce using rule 95 (statement -> arrow_function .)
    SWITCH          reduce using rule 95 (statement -> arrow_function .)
    WHILE           reduce using rule 95 (statement -> arrow_function .)
    FOR             reduce using rule 95 (statement -> arrow_function .)
    CLASS           reduce using rule 95 (statement -> arrow_function .)
    ELSE            reduce using rule 95 (statement -> arrow_function .)
    ENUM            reduce using rule 95 (statement -> arrow_function .)
    $end            reduce using rule 95 (statement -> arrow_function .)
    CASE            reduce using rule 95 (statement -> arrow_function .)
    DEFAULT         reduce using rule 95 (statement -> arrow_function .)


state 83

    (96) statement -> async_function .

    RBRACE          reduce using rule 96 (statement -> async_function .)
    LBRACE          reduce using rule 96 (statement -> async_function .)
    RETURN          reduce using rule 96 (statement -> async_function .)
    LET             reduce using rule 96 (statement -> async_function .)
    VAR             reduce using rule 96 (statement -> async_function .)
    CONST           reduce using rule 96 (statement -> async_function .)
    FUNCTION        reduce using rule 96 (statement -> async_function .)
    ASYNC           reduce using rule 96 (statement -> async_function .)
    CONSOLE         reduce using rule 96 (statement -> async_function .)
    LBRACKET        reduce using rule 96 (statement -> async_function .)
    PROMPT          reduce using rule 96 (statement -> async_function .)
    NOT             reduce using rule 96 (statement -> async_function .)
    LPAREN          reduce using rule 96 (statement -> async_function .)
    IDENTIFIER      reduce using rule 96 (statement -> async_function .)
    NUMBER          reduce using rule 96 (statement -> async_function .)
    FLOAT           reduce using rule 96 (statement -> async_function .)
    STRING          reduce using rule 96 (statement -> async_function .)
    TRUE            reduce using rule 96 (statement -> async_function .)
    FALSE           reduce using rule 96 (statement -> async_function .)
    PLUSPLUS        reduce using rule 96 (statement -> async_function .)
    MINUSMINUS      reduce using rule 96 (statement -> async_function .)
    IF              reduce using rule 96 (statement -> async_function .)
    SWITCH          reduce using rule 96 (statement -> async_function .)
    WHILE           reduce using rule 96 (statement -> async_function .)
    FOR             reduce using rule 96 (statement -> async_function .)
    CLASS           reduce using rule 96 (statement -> async_function .)
    ELSE            reduce using rule 96 (statement -> async_function .)
    ENUM            reduce using rule 96 (statement -> async_function .)
    $end            reduce using rule 96 (statement -> async_function .)
    CASE            reduce using rule 96 (statement -> async_function .)
    DEFAULT         reduce using rule 96 (statement -> async_function .)


state 84

    (97) statement -> consolelog .

    RBRACE          reduce using rule 97 (statement -> consolelog .)
    LBRACE          reduce using rule 97 (statement -> consolelog .)
    RETURN          reduce using rule 97 (statement -> consolelog .)
    LET             reduce using rule 97 (statement -> consolelog .)
    VAR             reduce using rule 97 (statement -> consolelog .)
    CONST           reduce using rule 97 (statement -> consolelog .)
    FUNCTION        reduce using rule 97 (statement -> consolelog .)
    ASYNC           reduce using rule 97 (statement -> consolelog .)
    CONSOLE         reduce using rule 97 (statement -> consolelog .)
    LBRACKET        reduce using rule 97 (statement -> consolelog .)
    PROMPT          reduce using rule 97 (statement -> consolelog .)
    NOT             reduce using rule 97 (statement -> consolelog .)
    LPAREN          reduce using rule 97 (statement -> consolelog .)
    IDENTIFIER      reduce using rule 97 (statement -> consolelog .)
    NUMBER          reduce using rule 97 (statement -> consolelog .)
    FLOAT           reduce using rule 97 (statement -> consolelog .)
    STRING          reduce using rule 97 (statement -> consolelog .)
    TRUE            reduce using rule 97 (statement -> consolelog .)
    FALSE           reduce using rule 97 (statement -> consolelog .)
    PLUSPLUS        reduce using rule 97 (statement -> consolelog .)
    MINUSMINUS      reduce using rule 97 (statement -> consolelog .)
    IF              reduce using rule 97 (statement -> consolelog .)
    SWITCH          reduce using rule 97 (statement -> consolelog .)
    WHILE           reduce using rule 97 (statement -> consolelog .)
    FOR             reduce using rule 97 (statement -> consolelog .)
    CLASS           reduce using rule 97 (statement -> consolelog .)
    ELSE            reduce using rule 97 (statement -> consolelog .)
    ENUM            reduce using rule 97 (statement -> consolelog .)
    $end            reduce using rule 97 (statement -> consolelog .)
    CASE            reduce using rule 97 (statement -> consolelog .)
    DEFAULT         reduce using rule 97 (statement -> consolelog .)


state 85

    (98) statement -> expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 140
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 86

    (99) statement -> controlEstructure .

    RBRACE          reduce using rule 99 (statement -> controlEstructure .)
    LBRACE          reduce using rule 99 (statement -> controlEstructure .)
    RETURN          reduce using rule 99 (statement -> controlEstructure .)
    LET             reduce using rule 99 (statement -> controlEstructure .)
    VAR             reduce using rule 99 (statement -> controlEstructure .)
    CONST           reduce using rule 99 (statement -> controlEstructure .)
    FUNCTION        reduce using rule 99 (statement -> controlEstructure .)
    ASYNC           reduce using rule 99 (statement -> controlEstructure .)
    CONSOLE         reduce using rule 99 (statement -> controlEstructure .)
    LBRACKET        reduce using rule 99 (statement -> controlEstructure .)
    PROMPT          reduce using rule 99 (statement -> controlEstructure .)
    NOT             reduce using rule 99 (statement -> controlEstructure .)
    LPAREN          reduce using rule 99 (statement -> controlEstructure .)
    IDENTIFIER      reduce using rule 99 (statement -> controlEstructure .)
    NUMBER          reduce using rule 99 (statement -> controlEstructure .)
    FLOAT           reduce using rule 99 (statement -> controlEstructure .)
    STRING          reduce using rule 99 (statement -> controlEstructure .)
    TRUE            reduce using rule 99 (statement -> controlEstructure .)
    FALSE           reduce using rule 99 (statement -> controlEstructure .)
    PLUSPLUS        reduce using rule 99 (statement -> controlEstructure .)
    MINUSMINUS      reduce using rule 99 (statement -> controlEstructure .)
    IF              reduce using rule 99 (statement -> controlEstructure .)
    SWITCH          reduce using rule 99 (statement -> controlEstructure .)
    WHILE           reduce using rule 99 (statement -> controlEstructure .)
    FOR             reduce using rule 99 (statement -> controlEstructure .)
    CLASS           reduce using rule 99 (statement -> controlEstructure .)
    ELSE            reduce using rule 99 (statement -> controlEstructure .)
    ENUM            reduce using rule 99 (statement -> controlEstructure .)
    $end            reduce using rule 99 (statement -> controlEstructure .)
    CASE            reduce using rule 99 (statement -> controlEstructure .)
    DEFAULT         reduce using rule 99 (statement -> controlEstructure .)


state 87

    (101) statement -> forEstructure .

    RBRACE          reduce using rule 101 (statement -> forEstructure .)
    LBRACE          reduce using rule 101 (statement -> forEstructure .)
    RETURN          reduce using rule 101 (statement -> forEstructure .)
    LET             reduce using rule 101 (statement -> forEstructure .)
    VAR             reduce using rule 101 (statement -> forEstructure .)
    CONST           reduce using rule 101 (statement -> forEstructure .)
    FUNCTION        reduce using rule 101 (statement -> forEstructure .)
    ASYNC           reduce using rule 101 (statement -> forEstructure .)
    CONSOLE         reduce using rule 101 (statement -> forEstructure .)
    LBRACKET        reduce using rule 101 (statement -> forEstructure .)
    PROMPT          reduce using rule 101 (statement -> forEstructure .)
    NOT             reduce using rule 101 (statement -> forEstructure .)
    LPAREN          reduce using rule 101 (statement -> forEstructure .)
    IDENTIFIER      reduce using rule 101 (statement -> forEstructure .)
    NUMBER          reduce using rule 101 (statement -> forEstructure .)
    FLOAT           reduce using rule 101 (statement -> forEstructure .)
    STRING          reduce using rule 101 (statement -> forEstructure .)
    TRUE            reduce using rule 101 (statement -> forEstructure .)
    FALSE           reduce using rule 101 (statement -> forEstructure .)
    PLUSPLUS        reduce using rule 101 (statement -> forEstructure .)
    MINUSMINUS      reduce using rule 101 (statement -> forEstructure .)
    IF              reduce using rule 101 (statement -> forEstructure .)
    SWITCH          reduce using rule 101 (statement -> forEstructure .)
    WHILE           reduce using rule 101 (statement -> forEstructure .)
    FOR             reduce using rule 101 (statement -> forEstructure .)
    CLASS           reduce using rule 101 (statement -> forEstructure .)
    ELSE            reduce using rule 101 (statement -> forEstructure .)
    ENUM            reduce using rule 101 (statement -> forEstructure .)
    $end            reduce using rule 101 (statement -> forEstructure .)
    CASE            reduce using rule 101 (statement -> forEstructure .)
    DEFAULT         reduce using rule 101 (statement -> forEstructure .)


state 88

    (103) statement -> class_definition .

    RBRACE          reduce using rule 103 (statement -> class_definition .)
    LBRACE          reduce using rule 103 (statement -> class_definition .)
    RETURN          reduce using rule 103 (statement -> class_definition .)
    LET             reduce using rule 103 (statement -> class_definition .)
    VAR             reduce using rule 103 (statement -> class_definition .)
    CONST           reduce using rule 103 (statement -> class_definition .)
    FUNCTION        reduce using rule 103 (statement -> class_definition .)
    ASYNC           reduce using rule 103 (statement -> class_definition .)
    CONSOLE         reduce using rule 103 (statement -> class_definition .)
    LBRACKET        reduce using rule 103 (statement -> class_definition .)
    PROMPT          reduce using rule 103 (statement -> class_definition .)
    NOT             reduce using rule 103 (statement -> class_definition .)
    LPAREN          reduce using rule 103 (statement -> class_definition .)
    IDENTIFIER      reduce using rule 103 (statement -> class_definition .)
    NUMBER          reduce using rule 103 (statement -> class_definition .)
    FLOAT           reduce using rule 103 (statement -> class_definition .)
    STRING          reduce using rule 103 (statement -> class_definition .)
    TRUE            reduce using rule 103 (statement -> class_definition .)
    FALSE           reduce using rule 103 (statement -> class_definition .)
    PLUSPLUS        reduce using rule 103 (statement -> class_definition .)
    MINUSMINUS      reduce using rule 103 (statement -> class_definition .)
    IF              reduce using rule 103 (statement -> class_definition .)
    SWITCH          reduce using rule 103 (statement -> class_definition .)
    WHILE           reduce using rule 103 (statement -> class_definition .)
    FOR             reduce using rule 103 (statement -> class_definition .)
    CLASS           reduce using rule 103 (statement -> class_definition .)
    ELSE            reduce using rule 103 (statement -> class_definition .)
    ENUM            reduce using rule 103 (statement -> class_definition .)
    $end            reduce using rule 103 (statement -> class_definition .)
    CASE            reduce using rule 103 (statement -> class_definition .)
    DEFAULT         reduce using rule 103 (statement -> class_definition .)


state 89

    (108) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON
    (131) arrow_function -> CONST . IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    IDENTIFIER      shift and go to state 141


state 90

    (131) arrow_function -> CONST IDENTIFIER . EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (108) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 142
    COLON           shift and go to state 143


state 91

    (127) async_function -> ASYNC FUNCTION . IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    IDENTIFIER      shift and go to state 144


state 92

    (124) enum_definition -> ENUM IDENTIFIER . LBRACE enum_members RBRACE

    LBRACE          shift and go to state 145


state 93

    (85) controlEstructure -> IF LPAREN . expression RPAREN statement
    (86) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE statement
    (87) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 146

state 94

    (118) controlEstructure -> SWITCH LPAREN . expression RPAREN LBRACE case_block RBRACE
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 147

state 95

    (128) controlEstructure -> WHILE LPAREN . expression RPAREN statement
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 148

state 96

    (23) forEstructure -> FOR LPAREN . for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (24) for_init -> . LET IDENTIFIER EQUAL expression
    (25) for_init -> . LET IDENTIFIER COLON type EQUAL expression
    (26) for_init -> . expression
    (27) for_init -> . empty
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (107) empty -> .

    LET             shift and go to state 151
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    SEMICOLON       reduce using rule 107 (empty -> .)

    for_init                       shift and go to state 149
    expression                     shift and go to state 150
    empty                          shift and go to state 152

state 97

    (110) class_definition -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 153


state 98

    (100) statement -> RETURN expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 154
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 99

    (102) statement -> RETURN SEMICOLON .

    LET             reduce using rule 102 (statement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 102 (statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 102 (statement -> RETURN SEMICOLON .)
    ASYNC           reduce using rule 102 (statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 102 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 102 (statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 102 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 102 (statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 102 (statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    LBRACKET        reduce using rule 102 (statement -> RETURN SEMICOLON .)
    PROMPT          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 102 (statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 102 (statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 102 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 102 (statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 102 (statement -> RETURN SEMICOLON .)
    PLUSPLUS        reduce using rule 102 (statement -> RETURN SEMICOLON .)
    MINUSMINUS      reduce using rule 102 (statement -> RETURN SEMICOLON .)
    CONSOLE         reduce using rule 102 (statement -> RETURN SEMICOLON .)
    VAR             reduce using rule 102 (statement -> RETURN SEMICOLON .)
    $end            reduce using rule 102 (statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 102 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 102 (statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 102 (statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 102 (statement -> RETURN SEMICOLON .)


state 100

    (68) expression -> PROMPT LPAREN . STRING RPAREN

    STRING          shift and go to state 155


state 101

    (69) expression -> NOT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 69 (expression -> NOT expression .)
    COMMA           reduce using rule 69 (expression -> NOT expression .)
    RPAREN          reduce using rule 69 (expression -> NOT expression .)
    RBRACKET        reduce using rule 69 (expression -> NOT expression .)
    COLON           reduce using rule 69 (expression -> NOT expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 69 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 69 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 69 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 69 (expression -> NOT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 69 (expression -> NOT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 69 (expression -> NOT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 69 (expression -> NOT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 69 (expression -> NOT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 69 (expression -> NOT expression .) ]
  ! POT             [ reduce using rule 69 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 69 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 69 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 69 (expression -> NOT expression .) ]
  ! NEQ             [ reduce using rule 69 (expression -> NOT expression .) ]
  ! STRICT_EQ       [ reduce using rule 69 (expression -> NOT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 69 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 69 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 69 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 69 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 69 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 69 (expression -> NOT expression .) ]
  ! LBRACKET        [ reduce using rule 69 (expression -> NOT expression .) ]
  ! PLUSPLUS        [ reduce using rule 69 (expression -> NOT expression .) ]
  ! MINUSMINUS      [ reduce using rule 69 (expression -> NOT expression .) ]


state 102

    (82) expression -> PLUSPLUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 82 (expression -> PLUSPLUS expression .)
    COMMA           reduce using rule 82 (expression -> PLUSPLUS expression .)
    RPAREN          reduce using rule 82 (expression -> PLUSPLUS expression .)
    RBRACKET        reduce using rule 82 (expression -> PLUSPLUS expression .)
    COLON           reduce using rule 82 (expression -> PLUSPLUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! DIV             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! POT             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! AND             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! OR              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! EQ              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! NEQ             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! LT              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! GT              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! LE              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! GE              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! DOT             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! LBRACKET        [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]


state 103

    (83) expression -> MINUSMINUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 83 (expression -> MINUSMINUS expression .)
    COMMA           reduce using rule 83 (expression -> MINUSMINUS expression .)
    RPAREN          reduce using rule 83 (expression -> MINUSMINUS expression .)
    RBRACKET        reduce using rule 83 (expression -> MINUSMINUS expression .)
    COLON           reduce using rule 83 (expression -> MINUSMINUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! TIMES           [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! DIV             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! POT             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! AND             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! OR              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! EQ              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! NEQ             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! LT              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! GT              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! LE              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! GE              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! DOT             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! LBRACKET        [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]


state 104

    (84) consolelog -> CONSOLE DOT . LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON

    LOG             shift and go to state 156


state 105

    (129) varAssignment -> VAR IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> VAR IDENTIFIER . EQUAL expression SEMICOLON

    COLON           shift and go to state 157
    EQUAL           shift and go to state 158


state 106

    (47) expression -> expression PLUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 47 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 47 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 47 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 47 (expression -> expression PLUS expression .)
    COLON           reduce using rule 47 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! POT             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! NEQ             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! DOT             [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! LBRACKET        [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 47 (expression -> expression PLUS expression .) ]


state 107

    (48) expression -> expression MINUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 48 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 48 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 48 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 48 (expression -> expression MINUS expression .)
    COLON           reduce using rule 48 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! POT             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! NEQ             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! DOT             [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! LBRACKET        [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 48 (expression -> expression MINUS expression .) ]


state 108

    (49) expression -> expression TIMES expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 49 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 49 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 49 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 49 (expression -> expression TIMES expression .)
    COLON           reduce using rule 49 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! DIV             [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! POT             [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! NEQ             [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! STRICT_EQ       [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! STRICT_NEQ      [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! DOT             [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! LBRACKET        [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! PLUSPLUS        [ reduce using rule 49 (expression -> expression TIMES expression .) ]
  ! MINUSMINUS      [ reduce using rule 49 (expression -> expression TIMES expression .) ]


state 109

    (50) expression -> expression DIV expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 50 (expression -> expression DIV expression .)
    COMMA           reduce using rule 50 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 50 (expression -> expression DIV expression .)
    RBRACKET        reduce using rule 50 (expression -> expression DIV expression .)
    COLON           reduce using rule 50 (expression -> expression DIV expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! POT             [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! AND             [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! OR              [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! EQ              [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! NEQ             [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! STRICT_EQ       [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! STRICT_NEQ      [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! LT              [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! GT              [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! LE              [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! GE              [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! DOT             [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! LBRACKET        [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! PLUSPLUS        [ reduce using rule 50 (expression -> expression DIV expression .) ]
  ! MINUSMINUS      [ reduce using rule 50 (expression -> expression DIV expression .) ]


state 110

    (51) expression -> expression MOD expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 51 (expression -> expression MOD expression .)
    COMMA           reduce using rule 51 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 51 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 51 (expression -> expression MOD expression .)
    COLON           reduce using rule 51 (expression -> expression MOD expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! DIV             [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! POT             [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! NEQ             [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! STRICT_EQ       [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! STRICT_NEQ      [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! LT              [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! DOT             [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! LBRACKET        [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! PLUSPLUS        [ reduce using rule 51 (expression -> expression MOD expression .) ]
  ! MINUSMINUS      [ reduce using rule 51 (expression -> expression MOD expression .) ]


state 111

    (52) expression -> expression PLUS_ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .)
    COMMA           reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .)
    COLON           reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! POT             [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LT              [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! GT              [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 52 (expression -> expression PLUS_ASSIGN expression .) ]


state 112

    (53) expression -> expression MINUS_ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .)
    COMMA           reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .)
    COLON           reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! POT             [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LT              [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! GT              [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LE              [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! GE              [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 53 (expression -> expression MINUS_ASSIGN expression .) ]


state 113

    (54) expression -> expression MULT_ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 54 (expression -> expression MULT_ASSIGN expression .)
    COMMA           reduce using rule 54 (expression -> expression MULT_ASSIGN expression .)
    RPAREN          reduce using rule 54 (expression -> expression MULT_ASSIGN expression .)
    RBRACKET        reduce using rule 54 (expression -> expression MULT_ASSIGN expression .)
    COLON           reduce using rule 54 (expression -> expression MULT_ASSIGN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! POT             [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! AND             [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! OR              [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! LT              [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! GT              [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 54 (expression -> expression MULT_ASSIGN expression .) ]


state 114

    (55) expression -> expression DIV_ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 55 (expression -> expression DIV_ASSIGN expression .)
    COMMA           reduce using rule 55 (expression -> expression DIV_ASSIGN expression .)
    RPAREN          reduce using rule 55 (expression -> expression DIV_ASSIGN expression .)
    RBRACKET        reduce using rule 55 (expression -> expression DIV_ASSIGN expression .)
    COLON           reduce using rule 55 (expression -> expression DIV_ASSIGN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! POT             [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! LT              [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! GT              [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 55 (expression -> expression DIV_ASSIGN expression .) ]


state 115

    (56) expression -> expression MOD_ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 56 (expression -> expression MOD_ASSIGN expression .)
    COMMA           reduce using rule 56 (expression -> expression MOD_ASSIGN expression .)
    RPAREN          reduce using rule 56 (expression -> expression MOD_ASSIGN expression .)
    RBRACKET        reduce using rule 56 (expression -> expression MOD_ASSIGN expression .)
    COLON           reduce using rule 56 (expression -> expression MOD_ASSIGN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! POT             [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 56 (expression -> expression MOD_ASSIGN expression .) ]


state 116

    (57) expression -> expression POT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 57 (expression -> expression POT expression .)
    COMMA           reduce using rule 57 (expression -> expression POT expression .)
    RPAREN          reduce using rule 57 (expression -> expression POT expression .)
    RBRACKET        reduce using rule 57 (expression -> expression POT expression .)
    COLON           reduce using rule 57 (expression -> expression POT expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! DIV             [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! POT             [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! OR              [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! STRICT_EQ       [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! DOT             [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! LBRACKET        [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! PLUSPLUS        [ reduce using rule 57 (expression -> expression POT expression .) ]
  ! MINUSMINUS      [ reduce using rule 57 (expression -> expression POT expression .) ]


state 117

    (58) expression -> expression AND expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 58 (expression -> expression AND expression .)
    COMMA           reduce using rule 58 (expression -> expression AND expression .)
    RPAREN          reduce using rule 58 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 58 (expression -> expression AND expression .)
    COLON           reduce using rule 58 (expression -> expression AND expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! POT             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! STRICT_EQ       [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! STRICT_NEQ      [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! DOT             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! LBRACKET        [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! PLUSPLUS        [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! MINUSMINUS      [ reduce using rule 58 (expression -> expression AND expression .) ]


state 118

    (59) expression -> expression OR expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 59 (expression -> expression OR expression .)
    COMMA           reduce using rule 59 (expression -> expression OR expression .)
    RPAREN          reduce using rule 59 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 59 (expression -> expression OR expression .)
    COLON           reduce using rule 59 (expression -> expression OR expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! POT             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! STRICT_EQ       [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! STRICT_NEQ      [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! DOT             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! LBRACKET        [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! PLUSPLUS        [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! MINUSMINUS      [ reduce using rule 59 (expression -> expression OR expression .) ]


state 119

    (60) expression -> expression EQ expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 60 (expression -> expression EQ expression .)
    COMMA           reduce using rule 60 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 60 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 60 (expression -> expression EQ expression .)
    COLON           reduce using rule 60 (expression -> expression EQ expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! POT             [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! DOT             [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! LBRACKET        [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 60 (expression -> expression EQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 60 (expression -> expression EQ expression .) ]


state 120

    (61) expression -> expression NEQ expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 61 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 61 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 61 (expression -> expression NEQ expression .)
    RBRACKET        reduce using rule 61 (expression -> expression NEQ expression .)
    COLON           reduce using rule 61 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! POT             [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! DOT             [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! LBRACKET        [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 61 (expression -> expression NEQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 61 (expression -> expression NEQ expression .) ]


state 121

    (62) expression -> expression STRICT_EQ expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 62 (expression -> expression STRICT_EQ expression .)
    COMMA           reduce using rule 62 (expression -> expression STRICT_EQ expression .)
    RPAREN          reduce using rule 62 (expression -> expression STRICT_EQ expression .)
    RBRACKET        reduce using rule 62 (expression -> expression STRICT_EQ expression .)
    COLON           reduce using rule 62 (expression -> expression STRICT_EQ expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! DIV             [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! POT             [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! NEQ             [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! DOT             [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! LBRACKET        [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 62 (expression -> expression STRICT_EQ expression .) ]


state 122

    (63) expression -> expression STRICT_NEQ expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 63 (expression -> expression STRICT_NEQ expression .)
    COMMA           reduce using rule 63 (expression -> expression STRICT_NEQ expression .)
    RPAREN          reduce using rule 63 (expression -> expression STRICT_NEQ expression .)
    RBRACKET        reduce using rule 63 (expression -> expression STRICT_NEQ expression .)
    COLON           reduce using rule 63 (expression -> expression STRICT_NEQ expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! DIV             [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! POT             [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! EQ              [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! NEQ             [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! DOT             [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! LBRACKET        [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 63 (expression -> expression STRICT_NEQ expression .) ]


state 123

    (64) expression -> expression LT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 64 (expression -> expression LT expression .)
    COMMA           reduce using rule 64 (expression -> expression LT expression .)
    RPAREN          reduce using rule 64 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 64 (expression -> expression LT expression .)
    COLON           reduce using rule 64 (expression -> expression LT expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! POT             [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! STRICT_EQ       [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! DOT             [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! LBRACKET        [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! PLUSPLUS        [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MINUSMINUS      [ reduce using rule 64 (expression -> expression LT expression .) ]


state 124

    (65) expression -> expression GT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 65 (expression -> expression GT expression .)
    COMMA           reduce using rule 65 (expression -> expression GT expression .)
    RPAREN          reduce using rule 65 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 65 (expression -> expression GT expression .)
    COLON           reduce using rule 65 (expression -> expression GT expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! POT             [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! STRICT_EQ       [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! DOT             [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! LBRACKET        [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! PLUSPLUS        [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MINUSMINUS      [ reduce using rule 65 (expression -> expression GT expression .) ]


state 125

    (66) expression -> expression LE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 66 (expression -> expression LE expression .)
    COMMA           reduce using rule 66 (expression -> expression LE expression .)
    RPAREN          reduce using rule 66 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 66 (expression -> expression LE expression .)
    COLON           reduce using rule 66 (expression -> expression LE expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! POT             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! NEQ             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! STRICT_EQ       [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! STRICT_NEQ      [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! DOT             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! LBRACKET        [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! PLUSPLUS        [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! MINUSMINUS      [ reduce using rule 66 (expression -> expression LE expression .) ]


state 126

    (67) expression -> expression GE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 67 (expression -> expression GE expression .)
    COMMA           reduce using rule 67 (expression -> expression GE expression .)
    RPAREN          reduce using rule 67 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 67 (expression -> expression GE expression .)
    COLON           reduce using rule 67 (expression -> expression GE expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUS            [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! POT             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! NEQ             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! STRICT_EQ       [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! STRICT_NEQ      [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! DOT             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! LBRACKET        [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! PLUSPLUS        [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! MINUSMINUS      [ reduce using rule 67 (expression -> expression GE expression .) ]


state 127

    (71) expression -> expression DOT IDENTIFIER .

    SEMICOLON       reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    DIV             reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    POT             reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    STRICT_EQ       reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    STRICT_NEQ      reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    DOT             reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    PLUSPLUS        reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    MINUSMINUS      reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 71 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 71 (expression -> expression DOT IDENTIFIER .)


state 128

    (72) expression -> expression LBRACKET expression . RBRACKET
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RBRACKET        shift and go to state 159
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 129

    (16) letAssignment -> LET IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (18) declaracion -> LET IDENTIFIER COLON . type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 161

state 130

    (17) letAssignment -> LET IDENTIFIER EQUAL . expression SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 167

state 131

    (73) expression -> IDENTIFIER LPAREN lista_expresiones_opt . RPAREN

    RPAREN          shift and go to state 168


state 132

    (19) lista_expresiones_opt -> lista_expresiones .

    RPAREN          reduce using rule 19 (lista_expresiones_opt -> lista_expresiones .)
    RBRACKET        reduce using rule 19 (lista_expresiones_opt -> lista_expresiones .)


state 133

    (20) lista_expresiones_opt -> empty .

    RPAREN          reduce using rule 20 (lista_expresiones_opt -> empty .)
    RBRACKET        reduce using rule 20 (lista_expresiones_opt -> empty .)


state 134

    (21) lista_expresiones -> expression .
    (22) lista_expresiones -> expression . COMMA lista_expresiones
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RPAREN          reduce using rule 21 (lista_expresiones -> expression .)
    RBRACKET        reduce using rule 21 (lista_expresiones -> expression .)
    COMMA           shift and go to state 169
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 135

    (40) expression -> LBRACKET expression COMMA . expression RBRACKET
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 170

state 136

    (34) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN COLON type LBRACE body_function RBRACE
    (35) parameters -> . IDENTIFIER COLON type
    (36) parameters -> . IDENTIFIER COLON type COMMA parameters
    (37) parameters -> . empty
    (107) empty -> .

    IDENTIFIER      shift and go to state 171
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 172
    empty                          shift and go to state 173

state 137

    (70) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MULT_ASSIGN     reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    POT             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    STRICT_EQ       reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    STRICT_NEQ      reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 70 (expression -> LPAREN expression RPAREN .)


state 138

    (89) statement -> LBRACE instruction_list RBRACE .

    LET             reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    FUNCTION        reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    CONST           reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    ASYNC           reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    ENUM            reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    IF              reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    SWITCH          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    WHILE           reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    FOR             reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    CLASS           reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    LBRACE          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    RETURN          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    LBRACKET        reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    PROMPT          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    NOT             reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    LPAREN          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    IDENTIFIER      reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    NUMBER          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    FLOAT           reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    STRING          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    TRUE            reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    FALSE           reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    PLUSPLUS        reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    MINUSMINUS      reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    CONSOLE         reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    VAR             reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    $end            reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    RBRACE          reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    ELSE            reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    CASE            reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)
    DEFAULT         reduce using rule 89 (statement -> LBRACE instruction_list RBRACE .)


state 139

    (104) instruction_list -> instruction_list statement .

    RBRACE          reduce using rule 104 (instruction_list -> instruction_list statement .)
    LBRACE          reduce using rule 104 (instruction_list -> instruction_list statement .)
    RETURN          reduce using rule 104 (instruction_list -> instruction_list statement .)
    LET             reduce using rule 104 (instruction_list -> instruction_list statement .)
    VAR             reduce using rule 104 (instruction_list -> instruction_list statement .)
    CONST           reduce using rule 104 (instruction_list -> instruction_list statement .)
    FUNCTION        reduce using rule 104 (instruction_list -> instruction_list statement .)
    ASYNC           reduce using rule 104 (instruction_list -> instruction_list statement .)
    CONSOLE         reduce using rule 104 (instruction_list -> instruction_list statement .)
    LBRACKET        reduce using rule 104 (instruction_list -> instruction_list statement .)
    PROMPT          reduce using rule 104 (instruction_list -> instruction_list statement .)
    NOT             reduce using rule 104 (instruction_list -> instruction_list statement .)
    LPAREN          reduce using rule 104 (instruction_list -> instruction_list statement .)
    IDENTIFIER      reduce using rule 104 (instruction_list -> instruction_list statement .)
    NUMBER          reduce using rule 104 (instruction_list -> instruction_list statement .)
    FLOAT           reduce using rule 104 (instruction_list -> instruction_list statement .)
    STRING          reduce using rule 104 (instruction_list -> instruction_list statement .)
    TRUE            reduce using rule 104 (instruction_list -> instruction_list statement .)
    FALSE           reduce using rule 104 (instruction_list -> instruction_list statement .)
    PLUSPLUS        reduce using rule 104 (instruction_list -> instruction_list statement .)
    MINUSMINUS      reduce using rule 104 (instruction_list -> instruction_list statement .)
    IF              reduce using rule 104 (instruction_list -> instruction_list statement .)
    SWITCH          reduce using rule 104 (instruction_list -> instruction_list statement .)
    WHILE           reduce using rule 104 (instruction_list -> instruction_list statement .)
    FOR             reduce using rule 104 (instruction_list -> instruction_list statement .)
    CLASS           reduce using rule 104 (instruction_list -> instruction_list statement .)
    CASE            reduce using rule 104 (instruction_list -> instruction_list statement .)
    DEFAULT         reduce using rule 104 (instruction_list -> instruction_list statement .)


state 140

    (98) statement -> expression SEMICOLON .

    RBRACE          reduce using rule 98 (statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 98 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 98 (statement -> expression SEMICOLON .)
    LET             reduce using rule 98 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 98 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 98 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 98 (statement -> expression SEMICOLON .)
    ASYNC           reduce using rule 98 (statement -> expression SEMICOLON .)
    CONSOLE         reduce using rule 98 (statement -> expression SEMICOLON .)
    LBRACKET        reduce using rule 98 (statement -> expression SEMICOLON .)
    PROMPT          reduce using rule 98 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 98 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 98 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 98 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 98 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 98 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 98 (statement -> expression SEMICOLON .)
    TRUE            reduce using rule 98 (statement -> expression SEMICOLON .)
    FALSE           reduce using rule 98 (statement -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 98 (statement -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 98 (statement -> expression SEMICOLON .)
    IF              reduce using rule 98 (statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 98 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 98 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 98 (statement -> expression SEMICOLON .)
    CLASS           reduce using rule 98 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 98 (statement -> expression SEMICOLON .)
    ENUM            reduce using rule 98 (statement -> expression SEMICOLON .)
    $end            reduce using rule 98 (statement -> expression SEMICOLON .)
    CASE            reduce using rule 98 (statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 98 (statement -> expression SEMICOLON .)


state 141

    (108) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON
    (131) arrow_function -> CONST IDENTIFIER . EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    COLON           shift and go to state 143
    EQUAL           shift and go to state 174


state 142

    (131) arrow_function -> CONST IDENTIFIER EQUAL . LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (109) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LPAREN          shift and go to state 175
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 176

state 143

    (108) constAssignment -> CONST IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 177

state 144

    (127) async_function -> ASYNC FUNCTION IDENTIFIER . LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    LPAREN          shift and go to state 178


state 145

    (124) enum_definition -> ENUM IDENTIFIER LBRACE . enum_members RBRACE
    (125) enum_members -> . IDENTIFIER
    (126) enum_members -> . IDENTIFIER COMMA enum_members

    IDENTIFIER      shift and go to state 179

    enum_members                   shift and go to state 180

state 146

    (85) controlEstructure -> IF LPAREN expression . RPAREN statement
    (86) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE statement
    (87) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 181
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 147

    (118) controlEstructure -> SWITCH LPAREN expression . RPAREN LBRACE case_block RBRACE
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 182
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 148

    (128) controlEstructure -> WHILE LPAREN expression . RPAREN statement
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 183
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 149

    (23) forEstructure -> FOR LPAREN for_init . SEMICOLON expression SEMICOLON for_update RPAREN statement

    SEMICOLON       shift and go to state 184


state 150

    (26) for_init -> expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 26 (for_init -> expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 151

    (24) for_init -> LET . IDENTIFIER EQUAL expression
    (25) for_init -> LET . IDENTIFIER COLON type EQUAL expression

    IDENTIFIER      shift and go to state 185


state 152

    (27) for_init -> empty .

    SEMICOLON       reduce using rule 27 (for_init -> empty .)


state 153

    (110) class_definition -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (111) class_body -> . class_body class_element
    (112) class_body -> . class_element
    (113) class_body -> . empty
    (114) class_element -> . function
    (115) class_element -> . letAssignment
    (116) class_element -> . varAssignment
    (117) class_element -> . constAssignment
    (107) empty -> .
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    RBRACE          reduce using rule 107 (empty -> .)
    FUNCTION        shift and go to state 19
    LET             shift and go to state 193
    VAR             shift and go to state 42
    CONST           shift and go to state 194

  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]

    class_body                     shift and go to state 186
    class_element                  shift and go to state 187
    empty                          shift and go to state 188
    function                       shift and go to state 189
    letAssignment                  shift and go to state 190
    varAssignment                  shift and go to state 191
    constAssignment                shift and go to state 192

state 154

    (100) statement -> RETURN expression SEMICOLON .

    LET             reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    ASYNC           reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    LBRACKET        reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    PROMPT          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    PLUSPLUS        reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    MINUSMINUS      reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 100 (statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 100 (statement -> RETURN expression SEMICOLON .)


state 155

    (68) expression -> PROMPT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 195


state 156

    (84) consolelog -> CONSOLE DOT LOG . LPAREN lista_expresiones_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 196


state 157

    (129) varAssignment -> VAR IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 197

state 158

    (130) varAssignment -> VAR IDENTIFIER EQUAL . expression SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 198

state 159

    (72) expression -> expression LBRACKET expression RBRACKET .

    SEMICOLON       reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    MULT_ASSIGN     reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    POT             reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    STRICT_EQ       reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    STRICT_NEQ      reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 72 (expression -> expression LBRACKET expression RBRACKET .)


state 160

    (44) type -> IDENTIFIER .

    EQUAL           reduce using rule 44 (type -> IDENTIFIER .)
    LBRACKET        reduce using rule 44 (type -> IDENTIFIER .)
    COMMA           reduce using rule 44 (type -> IDENTIFIER .)
    RPAREN          reduce using rule 44 (type -> IDENTIFIER .)
    RBRACKET        reduce using rule 44 (type -> IDENTIFIER .)
    LBRACE          reduce using rule 44 (type -> IDENTIFIER .)


state 161

    (16) letAssignment -> LET IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (18) declaracion -> LET IDENTIFIER COLON type . LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (46) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 199
    LBRACKET        shift and go to state 200


state 162

    (39) type -> LBRACKET . type COMMA type RBRACKET
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 201

state 163

    (41) type -> NUMBER_TYPE .

    EQUAL           reduce using rule 41 (type -> NUMBER_TYPE .)
    LBRACKET        reduce using rule 41 (type -> NUMBER_TYPE .)
    COMMA           reduce using rule 41 (type -> NUMBER_TYPE .)
    RPAREN          reduce using rule 41 (type -> NUMBER_TYPE .)
    RBRACKET        reduce using rule 41 (type -> NUMBER_TYPE .)
    LBRACE          reduce using rule 41 (type -> NUMBER_TYPE .)


state 164

    (42) type -> STRING_TYPE .

    EQUAL           reduce using rule 42 (type -> STRING_TYPE .)
    LBRACKET        reduce using rule 42 (type -> STRING_TYPE .)
    COMMA           reduce using rule 42 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 42 (type -> STRING_TYPE .)
    RBRACKET        reduce using rule 42 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 42 (type -> STRING_TYPE .)


state 165

    (43) type -> BOOLEAN_TYPE .

    EQUAL           reduce using rule 43 (type -> BOOLEAN_TYPE .)
    LBRACKET        reduce using rule 43 (type -> BOOLEAN_TYPE .)
    COMMA           reduce using rule 43 (type -> BOOLEAN_TYPE .)
    RPAREN          reduce using rule 43 (type -> BOOLEAN_TYPE .)
    RBRACKET        reduce using rule 43 (type -> BOOLEAN_TYPE .)
    LBRACE          reduce using rule 43 (type -> BOOLEAN_TYPE .)


state 166

    (45) type -> VOID .

    EQUAL           reduce using rule 45 (type -> VOID .)
    LBRACKET        reduce using rule 45 (type -> VOID .)
    COMMA           reduce using rule 45 (type -> VOID .)
    RPAREN          reduce using rule 45 (type -> VOID .)
    RBRACKET        reduce using rule 45 (type -> VOID .)
    LBRACE          reduce using rule 45 (type -> VOID .)


state 167

    (17) letAssignment -> LET IDENTIFIER EQUAL expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 202
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 168

    (73) expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .

    SEMICOLON       reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUS            reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUS           reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    TIMES           reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DIV             reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MOD             reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUS_ASSIGN     reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUS_ASSIGN    reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MULT_ASSIGN     reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DIV_ASSIGN      reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MOD_ASSIGN      reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    POT             reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    AND             reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    OR              reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    EQ              reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    NEQ             reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    STRICT_EQ       reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    STRICT_NEQ      reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LT              reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    GT              reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LE              reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    GE              reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DOT             reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LBRACKET        reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUSPLUS        reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUSMINUS      reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    COMMA           reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RPAREN          reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RBRACKET        reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    COLON           reduce using rule 73 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)


state 169

    (22) lista_expresiones -> expression COMMA . lista_expresiones
    (21) lista_expresiones -> . expression
    (22) lista_expresiones -> . expression COMMA lista_expresiones
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 134
    lista_expresiones              shift and go to state 203

state 170

    (40) expression -> LBRACKET expression COMMA expression . RBRACKET
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RBRACKET        shift and go to state 204
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 171

    (35) parameters -> IDENTIFIER . COLON type
    (36) parameters -> IDENTIFIER . COLON type COMMA parameters

    COLON           shift and go to state 205


state 172

    (34) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN COLON type LBRACE body_function RBRACE

    RPAREN          shift and go to state 206


state 173

    (37) parameters -> empty .

    RPAREN          reduce using rule 37 (parameters -> empty .)


state 174

    (109) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (131) arrow_function -> CONST IDENTIFIER EQUAL . LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LPAREN          shift and go to state 175
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 176

state 175

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN . parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (70) expression -> LPAREN . expression RPAREN
    (35) parameters -> . IDENTIFIER COLON type
    (36) parameters -> . IDENTIFIER COLON type COMMA parameters
    (37) parameters -> . empty
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (107) empty -> .

    IDENTIFIER      shift and go to state 207
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 208
    expression                     shift and go to state 74
    empty                          shift and go to state 173

state 176

    (109) constAssignment -> CONST IDENTIFIER EQUAL expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 209
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 177

    (108) constAssignment -> CONST IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (46) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 210
    LBRACKET        shift and go to state 211


state 178

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN . parameters RPAREN COLON type LBRACE body_function RBRACE
    (35) parameters -> . IDENTIFIER COLON type
    (36) parameters -> . IDENTIFIER COLON type COMMA parameters
    (37) parameters -> . empty
    (107) empty -> .

    IDENTIFIER      shift and go to state 171
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 212
    empty                          shift and go to state 173

state 179

    (125) enum_members -> IDENTIFIER .
    (126) enum_members -> IDENTIFIER . COMMA enum_members

    RBRACE          reduce using rule 125 (enum_members -> IDENTIFIER .)
    COMMA           shift and go to state 213


state 180

    (124) enum_definition -> ENUM IDENTIFIER LBRACE enum_members . RBRACE

    RBRACE          shift and go to state 214


state 181

    (85) controlEstructure -> IF LPAREN expression RPAREN . statement
    (86) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE statement
    (87) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    expression                     shift and go to state 85
    statement                      shift and go to state 215
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 182

    (118) controlEstructure -> SWITCH LPAREN expression RPAREN . LBRACE case_block RBRACE

    LBRACE          shift and go to state 216


state 183

    (128) controlEstructure -> WHILE LPAREN expression RPAREN . statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    expression                     shift and go to state 85
    statement                      shift and go to state 217
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 184

    (23) forEstructure -> FOR LPAREN for_init SEMICOLON . expression SEMICOLON for_update RPAREN statement
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 218

state 185

    (24) for_init -> LET IDENTIFIER . EQUAL expression
    (25) for_init -> LET IDENTIFIER . COLON type EQUAL expression

    EQUAL           shift and go to state 219
    COLON           shift and go to state 220


state 186

    (110) class_definition -> CLASS IDENTIFIER LBRACE class_body . RBRACE
    (111) class_body -> class_body . class_element
    (114) class_element -> . function
    (115) class_element -> . letAssignment
    (116) class_element -> . varAssignment
    (117) class_element -> . constAssignment
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON

    RBRACE          shift and go to state 221
    FUNCTION        shift and go to state 19
    LET             shift and go to state 193
    VAR             shift and go to state 42
    CONST           shift and go to state 194

    class_element                  shift and go to state 222
    function                       shift and go to state 189
    letAssignment                  shift and go to state 190
    varAssignment                  shift and go to state 191
    constAssignment                shift and go to state 192

state 187

    (112) class_body -> class_element .

    RBRACE          reduce using rule 112 (class_body -> class_element .)
    FUNCTION        reduce using rule 112 (class_body -> class_element .)
    LET             reduce using rule 112 (class_body -> class_element .)
    VAR             reduce using rule 112 (class_body -> class_element .)
    CONST           reduce using rule 112 (class_body -> class_element .)


state 188

    (113) class_body -> empty .

    RBRACE          reduce using rule 113 (class_body -> empty .)
    FUNCTION        reduce using rule 113 (class_body -> empty .)
    LET             reduce using rule 113 (class_body -> empty .)
    VAR             reduce using rule 113 (class_body -> empty .)
    CONST           reduce using rule 113 (class_body -> empty .)


state 189

    (114) class_element -> function .

    RBRACE          reduce using rule 114 (class_element -> function .)
    FUNCTION        reduce using rule 114 (class_element -> function .)
    LET             reduce using rule 114 (class_element -> function .)
    VAR             reduce using rule 114 (class_element -> function .)
    CONST           reduce using rule 114 (class_element -> function .)


state 190

    (115) class_element -> letAssignment .

    RBRACE          reduce using rule 115 (class_element -> letAssignment .)
    FUNCTION        reduce using rule 115 (class_element -> letAssignment .)
    LET             reduce using rule 115 (class_element -> letAssignment .)
    VAR             reduce using rule 115 (class_element -> letAssignment .)
    CONST           reduce using rule 115 (class_element -> letAssignment .)


state 191

    (116) class_element -> varAssignment .

    RBRACE          reduce using rule 116 (class_element -> varAssignment .)
    FUNCTION        reduce using rule 116 (class_element -> varAssignment .)
    LET             reduce using rule 116 (class_element -> varAssignment .)
    VAR             reduce using rule 116 (class_element -> varAssignment .)
    CONST           reduce using rule 116 (class_element -> varAssignment .)


state 192

    (117) class_element -> constAssignment .

    RBRACE          reduce using rule 117 (class_element -> constAssignment .)
    FUNCTION        reduce using rule 117 (class_element -> constAssignment .)
    LET             reduce using rule 117 (class_element -> constAssignment .)
    VAR             reduce using rule 117 (class_element -> constAssignment .)
    CONST           reduce using rule 117 (class_element -> constAssignment .)


state 193

    (16) letAssignment -> LET . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> LET . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 223


state 194

    (108) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 224


state 195

    (68) expression -> PROMPT LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUS            reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUS           reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    TIMES           reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    DIV             reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    MOD             reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUS_ASSIGN     reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUS_ASSIGN    reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    MULT_ASSIGN     reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    DIV_ASSIGN      reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    MOD_ASSIGN      reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    POT             reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    AND             reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    OR              reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    EQ              reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    NEQ             reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    STRICT_EQ       reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    STRICT_NEQ      reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    LT              reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    GT              reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    LE              reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    GE              reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    DOT             reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    LBRACKET        reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUSPLUS        reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUSMINUS      reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    COMMA           reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    RBRACKET        reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)
    COLON           reduce using rule 68 (expression -> PROMPT LPAREN STRING RPAREN .)


state 196

    (84) consolelog -> CONSOLE DOT LOG LPAREN . lista_expresiones_opt RPAREN SEMICOLON
    (19) lista_expresiones_opt -> . lista_expresiones
    (20) lista_expresiones_opt -> . empty
    (21) lista_expresiones -> . expression
    (22) lista_expresiones -> . expression COMMA lista_expresiones
    (107) empty -> .
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    RPAREN          reduce using rule 107 (empty -> .)
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    lista_expresiones_opt          shift and go to state 225
    lista_expresiones              shift and go to state 132
    empty                          shift and go to state 133
    expression                     shift and go to state 134

state 197

    (129) varAssignment -> VAR IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (46) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 226
    LBRACKET        shift and go to state 211


state 198

    (130) varAssignment -> VAR IDENTIFIER EQUAL expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 227
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 199

    (16) letAssignment -> LET IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 228

state 200

    (18) declaracion -> LET IDENTIFIER COLON type LBRACKET . RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (46) type -> type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 229


state 201

    (39) type -> LBRACKET type . COMMA type RBRACKET
    (46) type -> type . LBRACKET RBRACKET

    COMMA           shift and go to state 230
    LBRACKET        shift and go to state 211


state 202

    (17) letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 17 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)


state 203

    (22) lista_expresiones -> expression COMMA lista_expresiones .

    RPAREN          reduce using rule 22 (lista_expresiones -> expression COMMA lista_expresiones .)
    RBRACKET        reduce using rule 22 (lista_expresiones -> expression COMMA lista_expresiones .)


state 204

    (40) expression -> LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUS            reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUS           reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    TIMES           reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DIV             reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MOD             reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MULT_ASSIGN     reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    POT             reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    AND             reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    OR              reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    EQ              reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    NEQ             reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    STRICT_EQ       reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    STRICT_NEQ      reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LT              reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    GT              reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LE              reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    GE              reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DOT             reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LBRACKET        reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUSPLUS        reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUSMINUS      reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    COMMA           reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RPAREN          reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RBRACKET        reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    COLON           reduce using rule 40 (expression -> LBRACKET expression COMMA expression RBRACKET .)


state 205

    (35) parameters -> IDENTIFIER COLON . type
    (36) parameters -> IDENTIFIER COLON . type COMMA parameters
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 231

state 206

    (34) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . COLON type LBRACE body_function RBRACE

    COLON           shift and go to state 232


state 207

    (35) parameters -> IDENTIFIER . COLON type
    (36) parameters -> IDENTIFIER . COLON type COMMA parameters
    (73) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (77) expression -> IDENTIFIER .

    COLON           shift and go to state 205
    LPAREN          shift and go to state 71
    RPAREN          reduce using rule 77 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 77 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 77 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 77 (expression -> IDENTIFIER .)
    DIV             reduce using rule 77 (expression -> IDENTIFIER .)
    MOD             reduce using rule 77 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 77 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 77 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 77 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 77 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 77 (expression -> IDENTIFIER .)
    POT             reduce using rule 77 (expression -> IDENTIFIER .)
    AND             reduce using rule 77 (expression -> IDENTIFIER .)
    OR              reduce using rule 77 (expression -> IDENTIFIER .)
    EQ              reduce using rule 77 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 77 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 77 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 77 (expression -> IDENTIFIER .)
    LT              reduce using rule 77 (expression -> IDENTIFIER .)
    GT              reduce using rule 77 (expression -> IDENTIFIER .)
    LE              reduce using rule 77 (expression -> IDENTIFIER .)
    GE              reduce using rule 77 (expression -> IDENTIFIER .)
    DOT             reduce using rule 77 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 77 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 77 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 77 (expression -> IDENTIFIER .)


state 208

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters . RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    RPAREN          shift and go to state 233


state 209

    (109) constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 109 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)


state 210

    (108) constAssignment -> CONST IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 234

state 211

    (46) type -> type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 235


state 212

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters . RPAREN COLON type LBRACE body_function RBRACE

    RPAREN          shift and go to state 236


state 213

    (126) enum_members -> IDENTIFIER COMMA . enum_members
    (125) enum_members -> . IDENTIFIER
    (126) enum_members -> . IDENTIFIER COMMA enum_members

    IDENTIFIER      shift and go to state 179

    enum_members                   shift and go to state 237

state 214

    (124) enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .

    LET             reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FUNCTION        reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONST           reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    ASYNC           reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    ENUM            reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    IF              reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    SWITCH          reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    WHILE           reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FOR             reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CLASS           reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LBRACE          reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    RETURN          reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LBRACKET        reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    PROMPT          reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    NOT             reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LPAREN          reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    IDENTIFIER      reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    NUMBER          reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FLOAT           reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    STRING          reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    TRUE            reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FALSE           reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    PLUSPLUS        reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    MINUSMINUS      reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONSOLE         reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    VAR             reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    $end            reduce using rule 124 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)


state 215

    (85) controlEstructure -> IF LPAREN expression RPAREN statement .
    (86) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE statement
    (87) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LET             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 238

  ! ELSE            [ reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .) ]


state 216

    (118) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE . case_block RBRACE
    (119) case_block -> . case_block case
    (120) case_block -> . case
    (121) case_block -> . empty
    (122) case -> . CASE expression COLON instruction_list
    (123) case -> . DEFAULT COLON instruction_list
    (107) empty -> .

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    CASE            shift and go to state 242
    DEFAULT         shift and go to state 243
    RBRACE          reduce using rule 107 (empty -> .)

  ! CASE            [ reduce using rule 107 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 107 (empty -> .) ]

    case_block                     shift and go to state 239
    case                           shift and go to state 240
    empty                          shift and go to state 241

state 217

    (128) controlEstructure -> WHILE LPAREN expression RPAREN statement .

    LET             reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    $end            reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 128 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)


state 218

    (23) forEstructure -> FOR LPAREN for_init SEMICOLON expression . SEMICOLON for_update RPAREN statement
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 244
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 219

    (24) for_init -> LET IDENTIFIER EQUAL . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 245

state 220

    (25) for_init -> LET IDENTIFIER COLON . type EQUAL expression
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 246

state 221

    (110) class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    LET             reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ASYNC           reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ENUM            reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    SWITCH          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FOR             reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LBRACE          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RETURN          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LBRACKET        reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROMPT          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NOT             reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LPAREN          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NUMBER          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    STRING          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    TRUE            reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FALSE           reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PLUSPLUS        reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    MINUSMINUS      reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONSOLE         reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    $end            reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ELSE            reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CASE            reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    DEFAULT         reduce using rule 110 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 222

    (111) class_body -> class_body class_element .

    RBRACE          reduce using rule 111 (class_body -> class_body class_element .)
    FUNCTION        reduce using rule 111 (class_body -> class_body class_element .)
    LET             reduce using rule 111 (class_body -> class_body class_element .)
    VAR             reduce using rule 111 (class_body -> class_body class_element .)
    CONST           reduce using rule 111 (class_body -> class_body class_element .)


state 223

    (16) letAssignment -> LET IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> LET IDENTIFIER . EQUAL expression SEMICOLON

    COLON           shift and go to state 247
    EQUAL           shift and go to state 130


state 224

    (108) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON

    COLON           shift and go to state 143
    EQUAL           shift and go to state 248


state 225

    (84) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 249


state 226

    (129) varAssignment -> VAR IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 250

state 227

    (130) varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 130 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)


state 228

    (16) letAssignment -> LET IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 251
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 229

    (18) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET . EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (46) type -> type LBRACKET RBRACKET .

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 252
    LBRACKET        reduce using rule 46 (type -> type LBRACKET RBRACKET .)

  ! EQUAL           [ reduce using rule 46 (type -> type LBRACKET RBRACKET .) ]


state 230

    (39) type -> LBRACKET type COMMA . type RBRACKET
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 253

state 231

    (35) parameters -> IDENTIFIER COLON type .
    (36) parameters -> IDENTIFIER COLON type . COMMA parameters
    (46) type -> type . LBRACKET RBRACKET

    RPAREN          reduce using rule 35 (parameters -> IDENTIFIER COLON type .)
    COMMA           shift and go to state 254
    LBRACKET        shift and go to state 211


state 232

    (34) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON . type LBRACE body_function RBRACE
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 255

state 233

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN . ARROW LBRACE body_function RBRACE SEMICOLON

    ARROW           shift and go to state 256


state 234

    (108) constAssignment -> CONST IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 257
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 235

    (46) type -> type LBRACKET RBRACKET .

    EQUAL           reduce using rule 46 (type -> type LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 46 (type -> type LBRACKET RBRACKET .)
    COMMA           reduce using rule 46 (type -> type LBRACKET RBRACKET .)
    RPAREN          reduce using rule 46 (type -> type LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 46 (type -> type LBRACKET RBRACKET .)
    LBRACE          reduce using rule 46 (type -> type LBRACKET RBRACKET .)


state 236

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN . COLON type LBRACE body_function RBRACE

    COLON           shift and go to state 258


state 237

    (126) enum_members -> IDENTIFIER COMMA enum_members .

    RBRACE          reduce using rule 126 (enum_members -> IDENTIFIER COMMA enum_members .)


state 238

    (86) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . statement
    (87) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement ELSE statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    IF              shift and go to state 259
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    expression                     shift and go to state 85
    statement                      shift and go to state 260
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 239

    (118) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block . RBRACE
    (119) case_block -> case_block . case
    (122) case -> . CASE expression COLON instruction_list
    (123) case -> . DEFAULT COLON instruction_list

    RBRACE          shift and go to state 261
    CASE            shift and go to state 242
    DEFAULT         shift and go to state 243

    case                           shift and go to state 262

state 240

    (120) case_block -> case .

    RBRACE          reduce using rule 120 (case_block -> case .)
    CASE            reduce using rule 120 (case_block -> case .)
    DEFAULT         reduce using rule 120 (case_block -> case .)


state 241

    (121) case_block -> empty .

    RBRACE          reduce using rule 121 (case_block -> empty .)
    CASE            reduce using rule 121 (case_block -> empty .)
    DEFAULT         reduce using rule 121 (case_block -> empty .)


state 242

    (122) case -> CASE . expression COLON instruction_list
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 263

state 243

    (123) case -> DEFAULT . COLON instruction_list

    COLON           shift and go to state 264


state 244

    (23) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON . for_update RPAREN statement
    (28) for_update -> . expression
    (29) for_update -> . expression PLUSPLUS
    (30) for_update -> . expression MINUSMINUS
    (31) for_update -> . PLUSPLUS expression
    (32) for_update -> . MINUSMINUS expression
    (33) for_update -> . empty
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (107) empty -> .

    PLUSPLUS        shift and go to state 267
    MINUSMINUS      shift and go to state 268
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    RPAREN          reduce using rule 107 (empty -> .)

    expression                     shift and go to state 265
    for_update                     shift and go to state 266
    empty                          shift and go to state 269

state 245

    (24) for_init -> LET IDENTIFIER EQUAL expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 24 (for_init -> LET IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 246

    (25) for_init -> LET IDENTIFIER COLON type . EQUAL expression
    (46) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 270
    LBRACKET        shift and go to state 211


state 247

    (16) letAssignment -> LET IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 271

state 248

    (109) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 176

state 249

    (84) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 272


state 250

    (129) varAssignment -> VAR IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 273
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 251

    (16) letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 16 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 252

    (18) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL . LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    LBRACKET        shift and go to state 274


state 253

    (39) type -> LBRACKET type COMMA type . RBRACKET
    (46) type -> type . LBRACKET RBRACKET

    RBRACKET        shift and go to state 275
    LBRACKET        shift and go to state 211


state 254

    (36) parameters -> IDENTIFIER COLON type COMMA . parameters
    (35) parameters -> . IDENTIFIER COLON type
    (36) parameters -> . IDENTIFIER COLON type COMMA parameters
    (37) parameters -> . empty
    (107) empty -> .

    IDENTIFIER      shift and go to state 171
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 276
    empty                          shift and go to state 173

state 255

    (34) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type . LBRACE body_function RBRACE
    (46) type -> type . LBRACKET RBRACKET

    LBRACE          shift and go to state 277
    LBRACKET        shift and go to state 211


state 256

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW . LBRACE body_function RBRACE SEMICOLON

    LBRACE          shift and go to state 278


state 257

    (108) constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 108 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 258

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON . type LBRACE body_function RBRACE
    (39) type -> . LBRACKET type COMMA type RBRACKET
    (41) type -> . NUMBER_TYPE
    (42) type -> . STRING_TYPE
    (43) type -> . BOOLEAN_TYPE
    (44) type -> . IDENTIFIER
    (45) type -> . VOID
    (46) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 162
    NUMBER_TYPE     shift and go to state 163
    STRING_TYPE     shift and go to state 164
    BOOLEAN_TYPE    shift and go to state 165
    IDENTIFIER      shift and go to state 160
    VOID            shift and go to state 166

    type                           shift and go to state 279

state 259

    (87) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF . LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF . LPAREN expression RPAREN statement ELSE statement
    (85) controlEstructure -> IF . LPAREN expression RPAREN statement
    (86) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 280


state 260

    (86) controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .

    LET             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASYNC           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACKET        reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PROMPT          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONSOLE         reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)


state 261

    (118) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .

    LET             reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FUNCTION        reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CONST           reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    ASYNC           reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    ENUM            reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    IF              reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    SWITCH          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    WHILE           reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FOR             reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CLASS           reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    LBRACE          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    RETURN          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    LBRACKET        reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    PROMPT          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    NOT             reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    LPAREN          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    IDENTIFIER      reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    NUMBER          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FLOAT           reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    STRING          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    TRUE            reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FALSE           reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    PLUSPLUS        reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    MINUSMINUS      reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CONSOLE         reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    VAR             reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    $end            reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    RBRACE          reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    ELSE            reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CASE            reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    DEFAULT         reduce using rule 118 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)


state 262

    (119) case_block -> case_block case .

    RBRACE          reduce using rule 119 (case_block -> case_block case .)
    CASE            reduce using rule 119 (case_block -> case_block case .)
    DEFAULT         reduce using rule 119 (case_block -> case_block case .)


state 263

    (122) case -> CASE expression . COLON instruction_list
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    COLON           shift and go to state 281
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 264

    (123) case -> DEFAULT COLON . instruction_list
    (104) instruction_list -> . instruction_list statement
    (105) instruction_list -> . statement
    (106) instruction_list -> . empty
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (107) empty -> .
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    RBRACE          reduce using rule 107 (empty -> .)
    CASE            reduce using rule 107 (empty -> .)
    DEFAULT         reduce using rule 107 (empty -> .)
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

  ! LBRACE          [ reduce using rule 107 (empty -> .) ]
  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! ASYNC           [ reduce using rule 107 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 107 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 107 (empty -> .) ]
  ! PROMPT          [ reduce using rule 107 (empty -> .) ]
  ! NOT             [ reduce using rule 107 (empty -> .) ]
  ! LPAREN          [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! NUMBER          [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! STRING          [ reduce using rule 107 (empty -> .) ]
  ! TRUE            [ reduce using rule 107 (empty -> .) ]
  ! FALSE           [ reduce using rule 107 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 107 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]

    instruction_list               shift and go to state 282
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 265

    (28) for_update -> expression .
    (29) for_update -> expression . PLUSPLUS
    (30) for_update -> expression . MINUSMINUS
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RPAREN          reduce using rule 28 (for_update -> expression .)
    PLUSPLUS        shift and go to state 283
    MINUSMINUS      shift and go to state 284
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67


state 266

    (23) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update . RPAREN statement

    RPAREN          shift and go to state 285


state 267

    (31) for_update -> PLUSPLUS . expression
    (82) expression -> PLUSPLUS . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 286

state 268

    (32) for_update -> MINUSMINUS . expression
    (83) expression -> MINUSMINUS . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 287

state 269

    (33) for_update -> empty .

    RPAREN          reduce using rule 33 (for_update -> empty .)


state 270

    (25) for_init -> LET IDENTIFIER COLON type EQUAL . expression
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 288

state 271

    (16) letAssignment -> LET IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (46) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 199
    LBRACKET        shift and go to state 211


state 272

    (84) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .

    LET             reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONST           reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ASYNC           reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ENUM            reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    IF              reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    PROMPT          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    NOT             reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    NUMBER          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    STRING          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    TRUE            reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FALSE           reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    PLUSPLUS        reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    MINUSMINUS      reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    VAR             reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    $end            reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 84 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)


state 273

    (129) varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 129 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 274

    (18) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET . lista_expresiones_opt RBRACKET SEMICOLON
    (19) lista_expresiones_opt -> . lista_expresiones
    (20) lista_expresiones_opt -> . empty
    (21) lista_expresiones -> . expression
    (22) lista_expresiones -> . expression COMMA lista_expresiones
    (107) empty -> .
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    RBRACKET        reduce using rule 107 (empty -> .)
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    lista_expresiones_opt          shift and go to state 289
    lista_expresiones              shift and go to state 132
    empty                          shift and go to state 133
    expression                     shift and go to state 134

state 275

    (39) type -> LBRACKET type COMMA type RBRACKET .

    EQUAL           reduce using rule 39 (type -> LBRACKET type COMMA type RBRACKET .)
    LBRACKET        reduce using rule 39 (type -> LBRACKET type COMMA type RBRACKET .)
    COMMA           reduce using rule 39 (type -> LBRACKET type COMMA type RBRACKET .)
    RPAREN          reduce using rule 39 (type -> LBRACKET type COMMA type RBRACKET .)
    RBRACKET        reduce using rule 39 (type -> LBRACKET type COMMA type RBRACKET .)
    LBRACE          reduce using rule 39 (type -> LBRACKET type COMMA type RBRACKET .)


state 276

    (36) parameters -> IDENTIFIER COLON type COMMA parameters .

    RPAREN          reduce using rule 36 (parameters -> IDENTIFIER COLON type COMMA parameters .)


state 277

    (34) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE . body_function RBRACE
    (38) body_function -> . instruction_list
    (104) instruction_list -> . instruction_list statement
    (105) instruction_list -> . statement
    (106) instruction_list -> . empty
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (107) empty -> .
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    RBRACE          reduce using rule 107 (empty -> .)
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

  ! LBRACE          [ reduce using rule 107 (empty -> .) ]
  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! ASYNC           [ reduce using rule 107 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 107 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 107 (empty -> .) ]
  ! PROMPT          [ reduce using rule 107 (empty -> .) ]
  ! NOT             [ reduce using rule 107 (empty -> .) ]
  ! LPAREN          [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! NUMBER          [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! STRING          [ reduce using rule 107 (empty -> .) ]
  ! TRUE            [ reduce using rule 107 (empty -> .) ]
  ! FALSE           [ reduce using rule 107 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 107 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]

    body_function                  shift and go to state 290
    instruction_list               shift and go to state 291
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 278

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE . body_function RBRACE SEMICOLON
    (38) body_function -> . instruction_list
    (104) instruction_list -> . instruction_list statement
    (105) instruction_list -> . statement
    (106) instruction_list -> . empty
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (107) empty -> .
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    RBRACE          reduce using rule 107 (empty -> .)
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

  ! LBRACE          [ reduce using rule 107 (empty -> .) ]
  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! ASYNC           [ reduce using rule 107 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 107 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 107 (empty -> .) ]
  ! PROMPT          [ reduce using rule 107 (empty -> .) ]
  ! NOT             [ reduce using rule 107 (empty -> .) ]
  ! LPAREN          [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! NUMBER          [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! STRING          [ reduce using rule 107 (empty -> .) ]
  ! TRUE            [ reduce using rule 107 (empty -> .) ]
  ! FALSE           [ reduce using rule 107 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 107 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]

    body_function                  shift and go to state 292
    instruction_list               shift and go to state 291
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 279

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type . LBRACE body_function RBRACE
    (46) type -> type . LBRACKET RBRACKET

    LBRACE          shift and go to state 293
    LBRACKET        shift and go to state 211


state 280

    (87) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN . expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN . expression RPAREN statement ELSE statement
    (85) controlEstructure -> IF LPAREN . expression RPAREN statement
    (86) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE statement
    (87) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression

    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40

    expression                     shift and go to state 294

state 281

    (122) case -> CASE expression COLON . instruction_list
    (104) instruction_list -> . instruction_list statement
    (105) instruction_list -> . statement
    (106) instruction_list -> . empty
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (107) empty -> .
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    RBRACE          reduce using rule 107 (empty -> .)
    CASE            reduce using rule 107 (empty -> .)
    DEFAULT         reduce using rule 107 (empty -> .)
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

  ! LBRACE          [ reduce using rule 107 (empty -> .) ]
  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! ASYNC           [ reduce using rule 107 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 107 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 107 (empty -> .) ]
  ! PROMPT          [ reduce using rule 107 (empty -> .) ]
  ! NOT             [ reduce using rule 107 (empty -> .) ]
  ! LPAREN          [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! NUMBER          [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! STRING          [ reduce using rule 107 (empty -> .) ]
  ! TRUE            [ reduce using rule 107 (empty -> .) ]
  ! FALSE           [ reduce using rule 107 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 107 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]

    expression                     shift and go to state 85
    instruction_list               shift and go to state 295
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 282

    (123) case -> DEFAULT COLON instruction_list .
    (104) instruction_list -> instruction_list . statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 123 (case -> DEFAULT COLON instruction_list .)
    CASE            reduce using rule 123 (case -> DEFAULT COLON instruction_list .)
    DEFAULT         reduce using rule 123 (case -> DEFAULT COLON instruction_list .)
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    statement                      shift and go to state 139
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 283

    (29) for_update -> expression PLUSPLUS .
    (80) expression -> expression PLUSPLUS .

  ! reduce/reduce conflict for RPAREN resolved using rule 29 (for_update -> expression PLUSPLUS .)
    RPAREN          reduce using rule 29 (for_update -> expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 80 (expression -> expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 80 (expression -> expression PLUSPLUS .)
    PLUS            reduce using rule 80 (expression -> expression PLUSPLUS .)
    MINUS           reduce using rule 80 (expression -> expression PLUSPLUS .)
    TIMES           reduce using rule 80 (expression -> expression PLUSPLUS .)
    DIV             reduce using rule 80 (expression -> expression PLUSPLUS .)
    MOD             reduce using rule 80 (expression -> expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 80 (expression -> expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 80 (expression -> expression PLUSPLUS .)
    MULT_ASSIGN     reduce using rule 80 (expression -> expression PLUSPLUS .)
    DIV_ASSIGN      reduce using rule 80 (expression -> expression PLUSPLUS .)
    MOD_ASSIGN      reduce using rule 80 (expression -> expression PLUSPLUS .)
    POT             reduce using rule 80 (expression -> expression PLUSPLUS .)
    AND             reduce using rule 80 (expression -> expression PLUSPLUS .)
    OR              reduce using rule 80 (expression -> expression PLUSPLUS .)
    EQ              reduce using rule 80 (expression -> expression PLUSPLUS .)
    NEQ             reduce using rule 80 (expression -> expression PLUSPLUS .)
    STRICT_EQ       reduce using rule 80 (expression -> expression PLUSPLUS .)
    STRICT_NEQ      reduce using rule 80 (expression -> expression PLUSPLUS .)
    LT              reduce using rule 80 (expression -> expression PLUSPLUS .)
    GT              reduce using rule 80 (expression -> expression PLUSPLUS .)
    LE              reduce using rule 80 (expression -> expression PLUSPLUS .)
    GE              reduce using rule 80 (expression -> expression PLUSPLUS .)
    DOT             reduce using rule 80 (expression -> expression PLUSPLUS .)
    LBRACKET        reduce using rule 80 (expression -> expression PLUSPLUS .)

  ! RPAREN          [ reduce using rule 80 (expression -> expression PLUSPLUS .) ]


state 284

    (30) for_update -> expression MINUSMINUS .
    (81) expression -> expression MINUSMINUS .

  ! reduce/reduce conflict for RPAREN resolved using rule 30 (for_update -> expression MINUSMINUS .)
    RPAREN          reduce using rule 30 (for_update -> expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 81 (expression -> expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 81 (expression -> expression MINUSMINUS .)
    PLUS            reduce using rule 81 (expression -> expression MINUSMINUS .)
    MINUS           reduce using rule 81 (expression -> expression MINUSMINUS .)
    TIMES           reduce using rule 81 (expression -> expression MINUSMINUS .)
    DIV             reduce using rule 81 (expression -> expression MINUSMINUS .)
    MOD             reduce using rule 81 (expression -> expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 81 (expression -> expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 81 (expression -> expression MINUSMINUS .)
    MULT_ASSIGN     reduce using rule 81 (expression -> expression MINUSMINUS .)
    DIV_ASSIGN      reduce using rule 81 (expression -> expression MINUSMINUS .)
    MOD_ASSIGN      reduce using rule 81 (expression -> expression MINUSMINUS .)
    POT             reduce using rule 81 (expression -> expression MINUSMINUS .)
    AND             reduce using rule 81 (expression -> expression MINUSMINUS .)
    OR              reduce using rule 81 (expression -> expression MINUSMINUS .)
    EQ              reduce using rule 81 (expression -> expression MINUSMINUS .)
    NEQ             reduce using rule 81 (expression -> expression MINUSMINUS .)
    STRICT_EQ       reduce using rule 81 (expression -> expression MINUSMINUS .)
    STRICT_NEQ      reduce using rule 81 (expression -> expression MINUSMINUS .)
    LT              reduce using rule 81 (expression -> expression MINUSMINUS .)
    GT              reduce using rule 81 (expression -> expression MINUSMINUS .)
    LE              reduce using rule 81 (expression -> expression MINUSMINUS .)
    GE              reduce using rule 81 (expression -> expression MINUSMINUS .)
    DOT             reduce using rule 81 (expression -> expression MINUSMINUS .)
    LBRACKET        reduce using rule 81 (expression -> expression MINUSMINUS .)

  ! RPAREN          [ reduce using rule 81 (expression -> expression MINUSMINUS .) ]


state 285

    (23) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN . statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    expression                     shift and go to state 85
    statement                      shift and go to state 296
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 286

    (31) for_update -> PLUSPLUS expression .
    (82) expression -> PLUSPLUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! reduce/reduce conflict for RPAREN resolved using rule 31 (for_update -> PLUSPLUS expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 31 (for_update -> PLUSPLUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUSPLUS        [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! PLUS            [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! DIV             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! POT             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! AND             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! OR              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! EQ              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! NEQ             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! LT              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! GT              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! LE              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! GE              [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! DOT             [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! LBRACKET        [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]
  ! RPAREN          [ reduce using rule 82 (expression -> PLUSPLUS expression .) ]


state 287

    (32) for_update -> MINUSMINUS expression .
    (83) expression -> MINUSMINUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

  ! reduce/reduce conflict for RPAREN resolved using rule 32 (for_update -> MINUSMINUS expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 32 (for_update -> MINUSMINUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69

  ! PLUSPLUS        [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! PLUS            [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! TIMES           [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! DIV             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! POT             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! AND             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! OR              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! EQ              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! NEQ             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! LT              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! GT              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! LE              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! GE              [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! DOT             [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! LBRACKET        [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]
  ! RPAREN          [ reduce using rule 83 (expression -> MINUSMINUS expression .) ]


state 288

    (25) for_init -> LET IDENTIFIER COLON type EQUAL expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 25 (for_init -> LET IDENTIFIER COLON type EQUAL expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 289

    (18) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 297


state 290

    (34) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function . RBRACE

    RBRACE          shift and go to state 298


state 291

    (38) body_function -> instruction_list .
    (104) instruction_list -> instruction_list . statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 38 (body_function -> instruction_list .)
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    statement                      shift and go to state 139
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 292

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function . RBRACE SEMICOLON

    RBRACE          shift and go to state 299


state 293

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE . body_function RBRACE
    (38) body_function -> . instruction_list
    (104) instruction_list -> . instruction_list statement
    (105) instruction_list -> . statement
    (106) instruction_list -> . empty
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (107) empty -> .
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    RBRACE          reduce using rule 107 (empty -> .)
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

  ! LBRACE          [ reduce using rule 107 (empty -> .) ]
  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! ASYNC           [ reduce using rule 107 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 107 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 107 (empty -> .) ]
  ! PROMPT          [ reduce using rule 107 (empty -> .) ]
  ! NOT             [ reduce using rule 107 (empty -> .) ]
  ! LPAREN          [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! NUMBER          [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! STRING          [ reduce using rule 107 (empty -> .) ]
  ! TRUE            [ reduce using rule 107 (empty -> .) ]
  ! FALSE           [ reduce using rule 107 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 107 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]

    body_function                  shift and go to state 300
    instruction_list               shift and go to state 291
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    expression                     shift and go to state 85
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 294

    (87) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression . RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression . RPAREN statement ELSE statement
    (85) controlEstructure -> IF LPAREN expression . RPAREN statement
    (86) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE statement
    (87) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIV expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . PLUS_ASSIGN expression
    (53) expression -> expression . MINUS_ASSIGN expression
    (54) expression -> expression . MULT_ASSIGN expression
    (55) expression -> expression . DIV_ASSIGN expression
    (56) expression -> expression . MOD_ASSIGN expression
    (57) expression -> expression . POT expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . EQ expression
    (61) expression -> expression . NEQ expression
    (62) expression -> expression . STRICT_EQ expression
    (63) expression -> expression . STRICT_NEQ expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression
    (71) expression -> expression . DOT IDENTIFIER
    (72) expression -> expression . LBRACKET expression RBRACKET
    (80) expression -> expression . PLUSPLUS
    (81) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 301
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIV             shift and go to state 48
    MOD             shift and go to state 49
    PLUS_ASSIGN     shift and go to state 50
    MINUS_ASSIGN    shift and go to state 51
    MULT_ASSIGN     shift and go to state 52
    DIV_ASSIGN      shift and go to state 53
    MOD_ASSIGN      shift and go to state 54
    POT             shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    STRICT_EQ       shift and go to state 60
    STRICT_NEQ      shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    DOT             shift and go to state 66
    LBRACKET        shift and go to state 67
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 69


state 295

    (122) case -> CASE expression COLON instruction_list .
    (104) instruction_list -> instruction_list . statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 122 (case -> CASE expression COLON instruction_list .)
    CASE            reduce using rule 122 (case -> CASE expression COLON instruction_list .)
    DEFAULT         reduce using rule 122 (case -> CASE expression COLON instruction_list .)
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    expression                     shift and go to state 85
    statement                      shift and go to state 139
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 296

    (23) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .

    LET             reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    FUNCTION        reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    CONST           reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    ASYNC           reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    ENUM            reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    IF              reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    SWITCH          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    WHILE           reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    FOR             reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    CLASS           reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    LBRACE          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    RETURN          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    LBRACKET        reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    PROMPT          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    NOT             reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    LPAREN          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    IDENTIFIER      reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    NUMBER          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    FLOAT           reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    STRING          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    TRUE            reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    FALSE           reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    PLUSPLUS        reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    MINUSMINUS      reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    CONSOLE         reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    VAR             reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    $end            reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    RBRACE          reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    ELSE            reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    CASE            reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)
    DEFAULT         reduce using rule 23 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement .)


state 297

    (18) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 302


state 298

    (34) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .

    LET             reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FUNCTION        reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONST           reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ASYNC           reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ENUM            reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IF              reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    SWITCH          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    WHILE           reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FOR             reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CLASS           reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACE          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RETURN          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACKET        reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PROMPT          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NOT             reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LPAREN          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IDENTIFIER      reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NUMBER          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FLOAT           reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    STRING          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    TRUE            reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FALSE           reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PLUSPLUS        reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    MINUSMINUS      reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONSOLE         reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    VAR             reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    $end            reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RBRACE          reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ELSE            reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CASE            reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    DEFAULT         reduce using rule 34 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)


state 299

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 303


state 300

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function . RBRACE

    RBRACE          shift and go to state 304


state 301

    (87) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN . statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN . statement ELSE statement
    (85) controlEstructure -> IF LPAREN expression RPAREN . statement
    (86) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE statement
    (87) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    IF              shift and go to state 25
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    expression                     shift and go to state 85
    statement                      shift and go to state 305
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 302

    (18) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .

    LET             reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONST           reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ASYNC           reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ENUM            reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    IF              reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    WHILE           reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FOR             reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CLASS           reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LBRACE          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    RETURN          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LBRACKET        reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    PROMPT          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    NOT             reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    STRING          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    TRUE            reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FALSE           reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    PLUSPLUS        reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    MINUSMINUS      reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONSOLE         reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    VAR             reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    $end            reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ELSE            reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CASE            reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 18 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)


state 303

    (131) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .

    LET             reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FUNCTION        reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONST           reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ASYNC           reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ENUM            reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    IF              reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    SWITCH          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    WHILE           reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FOR             reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CLASS           reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LBRACE          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    RETURN          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LBRACKET        reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    PROMPT          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    NOT             reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LPAREN          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    NUMBER          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FLOAT           reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    STRING          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    TRUE            reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FALSE           reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    PLUSPLUS        reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    MINUSMINUS      reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONSOLE         reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    VAR             reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    $end            reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    RBRACE          reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ELSE            reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CASE            reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 131 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)


state 304

    (127) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .

    LET             reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FUNCTION        reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONST           reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ASYNC           reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ENUM            reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IF              reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    SWITCH          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    WHILE           reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FOR             reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CLASS           reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACE          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RETURN          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACKET        reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PROMPT          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NOT             reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LPAREN          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IDENTIFIER      reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NUMBER          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FLOAT           reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    STRING          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    TRUE            reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FALSE           reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PLUSPLUS        reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    MINUSMINUS      reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONSOLE         reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    VAR             reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    $end            reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RBRACE          reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ELSE            reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CASE            reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    DEFAULT         reduce using rule 127 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)


state 305

    (87) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .
    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement . ELSE statement
    (85) controlEstructure -> IF LPAREN expression RPAREN statement .
    (86) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE statement
    (87) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONST resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for ASYNC resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for ENUM resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for IF resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FOR resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for PROMPT resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for NOT resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for NUMBER resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for STRING resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for VAR resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for $end resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CASE resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 306
    LET             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .)

  ! LET             [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FUNCTION        [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONST           [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ASYNC           [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ENUM            [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! IF              [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! SWITCH          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! WHILE           [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FOR             [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CLASS           [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LBRACE          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! RETURN          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LBRACKET        [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! PROMPT          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! NOT             [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LPAREN          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! IDENTIFIER      [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! NUMBER          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FLOAT           [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! STRING          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! TRUE            [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FALSE           [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! PLUSPLUS        [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! MINUSMINUS      [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONSOLE         [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! VAR             [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! $end            [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! RBRACE          [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CASE            [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! DEFAULT         [ reduce using rule 87 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 85 (controlEstructure -> IF LPAREN expression RPAREN statement .) ]


state 306

    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE . statement
    (86) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . statement
    (87) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement
    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement ELSE statement
    (89) statement -> . LBRACE instruction_list RBRACE
    (90) statement -> . letAssignment
    (91) statement -> . varAssignment
    (92) statement -> . constAssignment
    (93) statement -> . declaracion
    (94) statement -> . function
    (95) statement -> . arrow_function
    (96) statement -> . async_function
    (97) statement -> . consolelog
    (98) statement -> . expression SEMICOLON
    (99) statement -> . controlEstructure
    (100) statement -> . RETURN expression SEMICOLON
    (101) statement -> . forEstructure
    (102) statement -> . RETURN SEMICOLON
    (103) statement -> . class_definition
    (16) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (17) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (129) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (130) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (108) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (109) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (18) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (34) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (131) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (127) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (84) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (40) expression -> . LBRACKET expression COMMA expression RBRACKET
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIV expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression PLUS_ASSIGN expression
    (53) expression -> . expression MINUS_ASSIGN expression
    (54) expression -> . expression MULT_ASSIGN expression
    (55) expression -> . expression DIV_ASSIGN expression
    (56) expression -> . expression MOD_ASSIGN expression
    (57) expression -> . expression POT expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression EQ expression
    (61) expression -> . expression NEQ expression
    (62) expression -> . expression STRICT_EQ expression
    (63) expression -> . expression STRICT_NEQ expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . PROMPT LPAREN STRING RPAREN
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . expression DOT IDENTIFIER
    (72) expression -> . expression LBRACKET expression RBRACKET
    (73) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (74) expression -> . NUMBER
    (75) expression -> . FLOAT
    (76) expression -> . STRING
    (77) expression -> . IDENTIFIER
    (78) expression -> . TRUE
    (79) expression -> . FALSE
    (80) expression -> . expression PLUSPLUS
    (81) expression -> . expression MINUSMINUS
    (82) expression -> . PLUSPLUS expression
    (83) expression -> . MINUSMINUS expression
    (85) controlEstructure -> . IF LPAREN expression RPAREN statement
    (86) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (88) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (118) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (128) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (23) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement
    (110) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    IF              shift and go to state 259
    LBRACE          shift and go to state 21
    RETURN          shift and go to state 31
    LET             shift and go to state 16
    VAR             shift and go to state 42
    CONST           shift and go to state 89
    FUNCTION        shift and go to state 19
    ASYNC           shift and go to state 23
    CONSOLE         shift and go to state 41
    LBRACKET        shift and go to state 18
    PROMPT          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 20
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 33
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    CLASS           shift and go to state 29

    expression                     shift and go to state 85
    statement                      shift and go to state 307
    letAssignment                  shift and go to state 78
    varAssignment                  shift and go to state 30
    constAssignment                shift and go to state 79
    declaracion                    shift and go to state 80
    function                       shift and go to state 81
    arrow_function                 shift and go to state 82
    async_function                 shift and go to state 83
    consolelog                     shift and go to state 84
    controlEstructure              shift and go to state 86
    forEstructure                  shift and go to state 87
    class_definition               shift and go to state 88

state 307

    (88) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .
    (86) controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .

  ! reduce/reduce conflict for ELSE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LET resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONST resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for ASYNC resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for ENUM resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for IF resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FOR resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for PROMPT resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for NOT resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for NUMBER resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for STRING resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for VAR resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for $end resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CASE resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LET             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASYNC           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACKET        reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PROMPT          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONSOLE         reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 86 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)

  ! LET             [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FUNCTION        [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONST           [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ASYNC           [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ENUM            [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! IF              [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! SWITCH          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FOR             [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CLASS           [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LBRACE          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! RETURN          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LBRACKET        [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! PROMPT          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! NOT             [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LPAREN          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! IDENTIFIER      [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! NUMBER          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FLOAT           [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! STRING          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! TRUE            [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FALSE           [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! PLUSPLUS        [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! MINUSMINUS      [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONSOLE         [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! VAR             [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! $end            [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! RBRACE          [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ELSE            [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CASE            [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! DEFAULT         [ reduce using rule 88 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 21 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 21 resolved as shift
WARNING: shift/reduce conflict for LET in state 21 resolved as shift
WARNING: shift/reduce conflict for VAR in state 21 resolved as shift
WARNING: shift/reduce conflict for CONST in state 21 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 21 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 21 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 21 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 21 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 21 resolved as shift
WARNING: shift/reduce conflict for NOT in state 21 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 21 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 21 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 21 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING in state 21 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 21 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 21 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 21 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 21 resolved as shift
WARNING: shift/reduce conflict for IF in state 21 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 21 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 21 resolved as shift
WARNING: shift/reduce conflict for FOR in state 21 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 21 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIV in state 101 resolved as shift
WARNING: shift/reduce conflict for MOD in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 101 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 101 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 101 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 101 resolved as shift
WARNING: shift/reduce conflict for POT in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 101 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for DOT in state 101 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for DIV in state 102 resolved as shift
WARNING: shift/reduce conflict for MOD in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 102 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 102 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 102 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 102 resolved as shift
WARNING: shift/reduce conflict for POT in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: shift/reduce conflict for DOT in state 102 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for DIV in state 103 resolved as shift
WARNING: shift/reduce conflict for MOD in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 103 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 103 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 103 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 103 resolved as shift
WARNING: shift/reduce conflict for POT in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for LT in state 103 resolved as shift
WARNING: shift/reduce conflict for GT in state 103 resolved as shift
WARNING: shift/reduce conflict for LE in state 103 resolved as shift
WARNING: shift/reduce conflict for GE in state 103 resolved as shift
WARNING: shift/reduce conflict for DOT in state 103 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIV in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 106 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 106 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 106 resolved as shift
WARNING: shift/reduce conflict for POT in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 106 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for LE in state 106 resolved as shift
WARNING: shift/reduce conflict for GE in state 106 resolved as shift
WARNING: shift/reduce conflict for DOT in state 106 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIV in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 107 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 107 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 107 resolved as shift
WARNING: shift/reduce conflict for POT in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 107 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for LE in state 107 resolved as shift
WARNING: shift/reduce conflict for GE in state 107 resolved as shift
WARNING: shift/reduce conflict for DOT in state 107 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for DIV in state 108 resolved as shift
WARNING: shift/reduce conflict for MOD in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 108 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 108 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 108 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 108 resolved as shift
WARNING: shift/reduce conflict for POT in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 108 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for LE in state 108 resolved as shift
WARNING: shift/reduce conflict for GE in state 108 resolved as shift
WARNING: shift/reduce conflict for DOT in state 108 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 109 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 109 resolved as shift
WARNING: shift/reduce conflict for POT in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for LE in state 109 resolved as shift
WARNING: shift/reduce conflict for GE in state 109 resolved as shift
WARNING: shift/reduce conflict for DOT in state 109 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIV in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 110 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 110 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 110 resolved as shift
WARNING: shift/reduce conflict for POT in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 110 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for LE in state 110 resolved as shift
WARNING: shift/reduce conflict for GE in state 110 resolved as shift
WARNING: shift/reduce conflict for DOT in state 110 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIV in state 111 resolved as shift
WARNING: shift/reduce conflict for MOD in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for POT in state 111 resolved as shift
WARNING: shift/reduce conflict for AND in state 111 resolved as shift
WARNING: shift/reduce conflict for OR in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 111 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 111 resolved as shift
WARNING: shift/reduce conflict for LT in state 111 resolved as shift
WARNING: shift/reduce conflict for GT in state 111 resolved as shift
WARNING: shift/reduce conflict for LE in state 111 resolved as shift
WARNING: shift/reduce conflict for GE in state 111 resolved as shift
WARNING: shift/reduce conflict for DOT in state 111 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIV in state 112 resolved as shift
WARNING: shift/reduce conflict for MOD in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 112 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 112 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 112 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 112 resolved as shift
WARNING: shift/reduce conflict for POT in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 112 resolved as shift
WARNING: shift/reduce conflict for OR in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 112 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 112 resolved as shift
WARNING: shift/reduce conflict for LT in state 112 resolved as shift
WARNING: shift/reduce conflict for GT in state 112 resolved as shift
WARNING: shift/reduce conflict for LE in state 112 resolved as shift
WARNING: shift/reduce conflict for GE in state 112 resolved as shift
WARNING: shift/reduce conflict for DOT in state 112 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for DIV in state 113 resolved as shift
WARNING: shift/reduce conflict for MOD in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 113 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 113 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 113 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 113 resolved as shift
WARNING: shift/reduce conflict for POT in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for OR in state 113 resolved as shift
WARNING: shift/reduce conflict for EQ in state 113 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 113 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 113 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 113 resolved as shift
WARNING: shift/reduce conflict for LT in state 113 resolved as shift
WARNING: shift/reduce conflict for GT in state 113 resolved as shift
WARNING: shift/reduce conflict for LE in state 113 resolved as shift
WARNING: shift/reduce conflict for GE in state 113 resolved as shift
WARNING: shift/reduce conflict for DOT in state 113 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV in state 114 resolved as shift
WARNING: shift/reduce conflict for MOD in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for POT in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for OR in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for LE in state 114 resolved as shift
WARNING: shift/reduce conflict for GE in state 114 resolved as shift
WARNING: shift/reduce conflict for DOT in state 114 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for POT in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for LE in state 115 resolved as shift
WARNING: shift/reduce conflict for GE in state 115 resolved as shift
WARNING: shift/reduce conflict for DOT in state 115 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for POT in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for LT in state 116 resolved as shift
WARNING: shift/reduce conflict for GT in state 116 resolved as shift
WARNING: shift/reduce conflict for LE in state 116 resolved as shift
WARNING: shift/reduce conflict for GE in state 116 resolved as shift
WARNING: shift/reduce conflict for DOT in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for DIV in state 117 resolved as shift
WARNING: shift/reduce conflict for MOD in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 117 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 117 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 117 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 117 resolved as shift
WARNING: shift/reduce conflict for POT in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for LT in state 117 resolved as shift
WARNING: shift/reduce conflict for GT in state 117 resolved as shift
WARNING: shift/reduce conflict for LE in state 117 resolved as shift
WARNING: shift/reduce conflict for GE in state 117 resolved as shift
WARNING: shift/reduce conflict for DOT in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIV in state 118 resolved as shift
WARNING: shift/reduce conflict for MOD in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 118 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 118 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 118 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 118 resolved as shift
WARNING: shift/reduce conflict for POT in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for GT in state 118 resolved as shift
WARNING: shift/reduce conflict for LE in state 118 resolved as shift
WARNING: shift/reduce conflict for GE in state 118 resolved as shift
WARNING: shift/reduce conflict for DOT in state 118 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for DIV in state 119 resolved as shift
WARNING: shift/reduce conflict for MOD in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 119 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 119 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 119 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 119 resolved as shift
WARNING: shift/reduce conflict for POT in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for LT in state 119 resolved as shift
WARNING: shift/reduce conflict for GT in state 119 resolved as shift
WARNING: shift/reduce conflict for LE in state 119 resolved as shift
WARNING: shift/reduce conflict for GE in state 119 resolved as shift
WARNING: shift/reduce conflict for DOT in state 119 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for POT in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for DOT in state 120 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for POT in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for LT in state 121 resolved as shift
WARNING: shift/reduce conflict for GT in state 121 resolved as shift
WARNING: shift/reduce conflict for LE in state 121 resolved as shift
WARNING: shift/reduce conflict for GE in state 121 resolved as shift
WARNING: shift/reduce conflict for DOT in state 121 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for POT in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for LT in state 122 resolved as shift
WARNING: shift/reduce conflict for GT in state 122 resolved as shift
WARNING: shift/reduce conflict for LE in state 122 resolved as shift
WARNING: shift/reduce conflict for GE in state 122 resolved as shift
WARNING: shift/reduce conflict for DOT in state 122 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV in state 123 resolved as shift
WARNING: shift/reduce conflict for MOD in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for POT in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for LT in state 123 resolved as shift
WARNING: shift/reduce conflict for GT in state 123 resolved as shift
WARNING: shift/reduce conflict for LE in state 123 resolved as shift
WARNING: shift/reduce conflict for GE in state 123 resolved as shift
WARNING: shift/reduce conflict for DOT in state 123 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV in state 124 resolved as shift
WARNING: shift/reduce conflict for MOD in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for POT in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for LT in state 124 resolved as shift
WARNING: shift/reduce conflict for GT in state 124 resolved as shift
WARNING: shift/reduce conflict for LE in state 124 resolved as shift
WARNING: shift/reduce conflict for GE in state 124 resolved as shift
WARNING: shift/reduce conflict for DOT in state 124 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV in state 125 resolved as shift
WARNING: shift/reduce conflict for MOD in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for POT in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 125 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 125 resolved as shift
WARNING: shift/reduce conflict for LT in state 125 resolved as shift
WARNING: shift/reduce conflict for GT in state 125 resolved as shift
WARNING: shift/reduce conflict for LE in state 125 resolved as shift
WARNING: shift/reduce conflict for GE in state 125 resolved as shift
WARNING: shift/reduce conflict for DOT in state 125 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for POT in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for LE in state 126 resolved as shift
WARNING: shift/reduce conflict for GE in state 126 resolved as shift
WARNING: shift/reduce conflict for DOT in state 126 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 153 resolved as shift
WARNING: shift/reduce conflict for LET in state 153 resolved as shift
WARNING: shift/reduce conflict for VAR in state 153 resolved as shift
WARNING: shift/reduce conflict for CONST in state 153 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 215 resolved as shift
WARNING: shift/reduce conflict for CASE in state 216 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 216 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 229 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 264 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 264 resolved as shift
WARNING: shift/reduce conflict for LET in state 264 resolved as shift
WARNING: shift/reduce conflict for VAR in state 264 resolved as shift
WARNING: shift/reduce conflict for CONST in state 264 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 264 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 264 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 264 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 264 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 264 resolved as shift
WARNING: shift/reduce conflict for NOT in state 264 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 264 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 264 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 264 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 264 resolved as shift
WARNING: shift/reduce conflict for STRING in state 264 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 264 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 264 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 264 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 264 resolved as shift
WARNING: shift/reduce conflict for IF in state 264 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 264 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 264 resolved as shift
WARNING: shift/reduce conflict for FOR in state 264 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 264 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 277 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 277 resolved as shift
WARNING: shift/reduce conflict for LET in state 277 resolved as shift
WARNING: shift/reduce conflict for VAR in state 277 resolved as shift
WARNING: shift/reduce conflict for CONST in state 277 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 277 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 277 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 277 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 277 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 277 resolved as shift
WARNING: shift/reduce conflict for NOT in state 277 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 277 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 277 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 277 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 277 resolved as shift
WARNING: shift/reduce conflict for STRING in state 277 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 277 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 277 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 277 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 277 resolved as shift
WARNING: shift/reduce conflict for IF in state 277 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 277 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 277 resolved as shift
WARNING: shift/reduce conflict for FOR in state 277 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 277 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 278 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 278 resolved as shift
WARNING: shift/reduce conflict for LET in state 278 resolved as shift
WARNING: shift/reduce conflict for VAR in state 278 resolved as shift
WARNING: shift/reduce conflict for CONST in state 278 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 278 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 278 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 278 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 278 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 278 resolved as shift
WARNING: shift/reduce conflict for NOT in state 278 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 278 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 278 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 278 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 278 resolved as shift
WARNING: shift/reduce conflict for STRING in state 278 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 278 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 278 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 278 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 278 resolved as shift
WARNING: shift/reduce conflict for IF in state 278 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 278 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 278 resolved as shift
WARNING: shift/reduce conflict for FOR in state 278 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 278 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 281 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 281 resolved as shift
WARNING: shift/reduce conflict for LET in state 281 resolved as shift
WARNING: shift/reduce conflict for VAR in state 281 resolved as shift
WARNING: shift/reduce conflict for CONST in state 281 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 281 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 281 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 281 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 281 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 281 resolved as shift
WARNING: shift/reduce conflict for NOT in state 281 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 281 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 281 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 281 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 281 resolved as shift
WARNING: shift/reduce conflict for STRING in state 281 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 281 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 281 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 281 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 281 resolved as shift
WARNING: shift/reduce conflict for IF in state 281 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 281 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 281 resolved as shift
WARNING: shift/reduce conflict for FOR in state 281 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 281 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 286 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 286 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 286 resolved as shift
WARNING: shift/reduce conflict for DIV in state 286 resolved as shift
WARNING: shift/reduce conflict for MOD in state 286 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 286 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 286 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 286 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 286 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 286 resolved as shift
WARNING: shift/reduce conflict for POT in state 286 resolved as shift
WARNING: shift/reduce conflict for AND in state 286 resolved as shift
WARNING: shift/reduce conflict for OR in state 286 resolved as shift
WARNING: shift/reduce conflict for EQ in state 286 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 286 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 286 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 286 resolved as shift
WARNING: shift/reduce conflict for LT in state 286 resolved as shift
WARNING: shift/reduce conflict for GT in state 286 resolved as shift
WARNING: shift/reduce conflict for LE in state 286 resolved as shift
WARNING: shift/reduce conflict for GE in state 286 resolved as shift
WARNING: shift/reduce conflict for DOT in state 286 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 286 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 286 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 286 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 287 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 287 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 287 resolved as shift
WARNING: shift/reduce conflict for DIV in state 287 resolved as shift
WARNING: shift/reduce conflict for MOD in state 287 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 287 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 287 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 287 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 287 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 287 resolved as shift
WARNING: shift/reduce conflict for POT in state 287 resolved as shift
WARNING: shift/reduce conflict for AND in state 287 resolved as shift
WARNING: shift/reduce conflict for OR in state 287 resolved as shift
WARNING: shift/reduce conflict for EQ in state 287 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 287 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 287 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 287 resolved as shift
WARNING: shift/reduce conflict for LT in state 287 resolved as shift
WARNING: shift/reduce conflict for GT in state 287 resolved as shift
WARNING: shift/reduce conflict for LE in state 287 resolved as shift
WARNING: shift/reduce conflict for GE in state 287 resolved as shift
WARNING: shift/reduce conflict for DOT in state 287 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 287 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 287 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 287 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 293 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 293 resolved as shift
WARNING: shift/reduce conflict for LET in state 293 resolved as shift
WARNING: shift/reduce conflict for VAR in state 293 resolved as shift
WARNING: shift/reduce conflict for CONST in state 293 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 293 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 293 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 293 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 293 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 293 resolved as shift
WARNING: shift/reduce conflict for NOT in state 293 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 293 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 293 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 293 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 293 resolved as shift
WARNING: shift/reduce conflict for STRING in state 293 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 293 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 293 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 293 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 293 resolved as shift
WARNING: shift/reduce conflict for IF in state 293 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 293 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 293 resolved as shift
WARNING: shift/reduce conflict for FOR in state 293 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 293 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 305 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 305 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (element -> letAssignment)
WARNING: rejected rule (statement -> letAssignment) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (element -> declaracion)
WARNING: rejected rule (statement -> declaracion) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (element -> function)
WARNING: rejected rule (statement -> function) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (element -> arrow_function)
WARNING: rejected rule (statement -> arrow_function) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (element -> async_function)
WARNING: rejected rule (statement -> async_function) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (element -> constAssignment)
WARNING: rejected rule (statement -> constAssignment) in state 8
WARNING: reduce/reduce conflict in state 10 resolved using rule (element -> controlEstructure)
WARNING: rejected rule (statement -> controlEstructure) in state 10
WARNING: reduce/reduce conflict in state 11 resolved using rule (element -> forEstructure)
WARNING: rejected rule (statement -> forEstructure) in state 11
WARNING: reduce/reduce conflict in state 12 resolved using rule (element -> class_definition)
WARNING: rejected rule (statement -> class_definition) in state 12
WARNING: reduce/reduce conflict in state 15 resolved using rule (element -> consolelog)
WARNING: rejected rule (statement -> consolelog) in state 15
WARNING: reduce/reduce conflict in state 44 resolved using rule (element -> expression SEMICOLON)
WARNING: rejected rule (statement -> expression SEMICOLON) in state 44
WARNING: reduce/reduce conflict in state 283 resolved using rule (for_update -> expression PLUSPLUS)
WARNING: rejected rule (expression -> expression PLUSPLUS) in state 283
WARNING: reduce/reduce conflict in state 284 resolved using rule (for_update -> expression MINUSMINUS)
WARNING: rejected rule (expression -> expression MINUSMINUS) in state 284
WARNING: reduce/reduce conflict in state 286 resolved using rule (for_update -> PLUSPLUS expression)
WARNING: rejected rule (expression -> PLUSPLUS expression) in state 286
WARNING: reduce/reduce conflict in state 287 resolved using rule (for_update -> MINUSMINUS expression)
WARNING: rejected rule (expression -> MINUSMINUS expression) in state 287
WARNING: reduce/reduce conflict in state 305 resolved using rule (controlEstructure -> IF LPAREN expression RPAREN statement)
WARNING: rejected rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement) in state 305
WARNING: reduce/reduce conflict in state 307 resolved using rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement)
WARNING: rejected rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement) in state 307
WARNING: Rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement) is never reduced
WARNING: Rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement) is never reduced
