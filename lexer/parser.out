Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANY
    AS
    AWAIT
    BIGINT_TYPE
    CATCH
    EXPORT
    FINALLY
    IMPORT
    NEW
    NULL_TYPE
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    SYMBOL_TYPE
    THIS
    TRY
    TYPE
    UNDEFINED_TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> program element
Rule 2     program -> element
Rule 3     element -> letAssignment
Rule 4     element -> declaracion
Rule 5     element -> function
Rule 6     element -> arrow_function
Rule 7     element -> async_function
Rule 8     element -> constAssignment
Rule 9     element -> enum_definition
Rule 10    element -> controlEstructure
Rule 11    element -> class_definition
Rule 12    element -> statement
Rule 13    element -> interface
Rule 14    element -> assignment
Rule 15    element -> expression SEMICOLON
Rule 16    element -> consolelog
Rule 17    assignment -> IDENTIFIER EQUAL expression SEMICOLON
Rule 18    letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 19    letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON
Rule 20    letAssignment -> LET IDENTIFIER COLON type SEMICOLON
Rule 21    declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
Rule 22    lista_expresiones_opt -> lista_expresiones
Rule 23    lista_expresiones_opt -> empty
Rule 24    lista_expresiones -> expression
Rule 25    lista_expresiones -> expression COMMA lista_expresiones
Rule 26    push_loop -> <empty>
Rule 27    pop_loop -> <empty>
Rule 28    forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
Rule 29    forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
Rule 30    for_init -> LET IDENTIFIER EQUAL expression
Rule 31    for_init -> LET IDENTIFIER COLON type EQUAL expression
Rule 32    for_init -> IDENTIFIER EQUAL expression
Rule 33    for_init -> expression
Rule 34    for_init -> empty
Rule 35    for_update -> expression
Rule 36    for_update -> expression PLUSPLUS
Rule 37    for_update -> expression MINUSMINUS
Rule 38    for_update -> PLUSPLUS expression
Rule 39    for_update -> MINUSMINUS expression
Rule 40    for_update -> empty
Rule 41    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
Rule 42    statement -> RETURN expression SEMICOLON
Rule 43    parameters -> IDENTIFIER COLON type
Rule 44    parameters -> IDENTIFIER COLON type COMMA parameters
Rule 45    parameters -> empty
Rule 46    body_function -> instruction_list
Rule 47    body_function -> empty
Rule 48    type -> LBRACKET type COMMA type RBRACKET
Rule 49    expression -> LBRACKET expression COMMA expression RBRACKET
Rule 50    type -> NUMBER_TYPE
Rule 51    type -> STRING_TYPE
Rule 52    type -> BOOLEAN_TYPE
Rule 53    type -> IDENTIFIER
Rule 54    type -> VOID
Rule 55    type -> type LBRACKET RBRACKET
Rule 56    expression -> expression PLUS expression
Rule 57    expression -> expression MINUS expression
Rule 58    expression -> expression TIMES expression
Rule 59    expression -> expression DIV expression
Rule 60    expression -> expression MOD expression
Rule 61    expression -> expression PLUS_ASSIGN expression
Rule 62    expression -> expression MINUS_ASSIGN expression
Rule 63    expression -> expression MULT_ASSIGN expression
Rule 64    expression -> expression DIV_ASSIGN expression
Rule 65    expression -> expression MOD_ASSIGN expression
Rule 66    expression -> expression POT expression
Rule 67    expression -> expression AND expression
Rule 68    expression -> expression OR expression
Rule 69    expression -> expression EQ expression
Rule 70    expression -> expression NEQ expression
Rule 71    expression -> expression STRICT_EQ expression
Rule 72    expression -> expression STRICT_NEQ expression
Rule 73    expression -> expression LT expression
Rule 74    expression -> expression GT expression
Rule 75    expression -> expression LE expression
Rule 76    expression -> expression GE expression
Rule 77    expression -> PROMPT LPAREN STRING RPAREN
Rule 78    expression -> NOT expression
Rule 79    expression -> LPAREN expression RPAREN
Rule 80    expression -> expression DOT IDENTIFIER
Rule 81    expression -> expression LBRACKET expression RBRACKET
Rule 82    expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN
Rule 83    expression -> NUMBER
Rule 84    expression -> FLOAT
Rule 85    expression -> STRING
Rule 86    expression -> IDENTIFIER
Rule 87    expression -> TRUE
Rule 88    expression -> FALSE
Rule 89    expression -> expression PLUSPLUS
Rule 90    expression -> expression MINUSMINUS
Rule 91    expression -> PLUSPLUS expression
Rule 92    expression -> MINUSMINUS expression
Rule 93    consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
Rule 94    controlEstructure -> IF LPAREN expression RPAREN statement
Rule 95    controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement
Rule 96    controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
Rule 97    controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
Rule 98    statement -> LBRACE instruction_list RBRACE
Rule 99    statement -> letAssignment
Rule 100   statement -> varAssignment
Rule 101   statement -> constAssignment
Rule 102   statement -> declaracion
Rule 103   statement -> function
Rule 104   statement -> arrow_function
Rule 105   statement -> async_function
Rule 106   statement -> consolelog
Rule 107   statement -> expression SEMICOLON
Rule 108   statement -> controlEstructure
Rule 109   statement -> forEstructure
Rule 110   statement -> RETURN SEMICOLON
Rule 111   statement -> class_definition
Rule 112   statement -> LBRACE RBRACE
Rule 113   instruction_list -> instruction_list statement
Rule 114   instruction_list -> statement
Rule 115   instruction_list -> empty
Rule 116   empty -> <empty>
Rule 117   constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 118   constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON
Rule 119   class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 120   class_body -> class_body class_element
Rule 121   class_body -> class_element
Rule 122   class_body -> empty
Rule 123   class_element -> function
Rule 124   class_element -> letAssignment
Rule 125   class_element -> varAssignment
Rule 126   class_element -> constAssignment
Rule 127   controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
Rule 128   case_block -> case_block case
Rule 129   case_block -> case
Rule 130   case_block -> empty
Rule 131   case -> CASE expression COLON instruction_list
Rule 132   case -> DEFAULT COLON instruction_list
Rule 133   statement -> BREAK SEMICOLON
Rule 134   statement -> CONTINUE SEMICOLON
Rule 135   enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE
Rule 136   enum_members -> IDENTIFIER
Rule 137   enum_members -> IDENTIFIER COMMA enum_members
Rule 138   async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
Rule 139   controlEstructure -> WHILE LPAREN expression RPAREN statement
Rule 140   varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 141   varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON
Rule 142   arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
Rule 143   interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE
Rule 144   interface_body -> interface_body interface_property
Rule 145   interface_body -> interface_property
Rule 146   interface_body -> empty
Rule 147   interface_property -> IDENTIFIER COLON type SEMICOLON
Rule 148   expression -> LBRACE object_properties RBRACE
Rule 149   object_properties -> object_property
Rule 150   object_properties -> object_property COMMA object_properties
Rule 151   object_properties -> empty
Rule 152   object_property -> IDENTIFIER COLON expression

Terminals, with rules where they appear

AND                  : 67
ANY                  : 
ARROW                : 142
AS                   : 
ASYNC                : 138
AWAIT                : 
BIGINT_TYPE          : 
BOOLEAN_TYPE         : 52
BREAK                : 133
CASE                 : 131
CATCH                : 
CLASS                : 119
COLON                : 18 20 21 31 41 43 44 117 131 132 138 140 147 152
COMMA                : 25 44 48 49 137 150
CONSOLE              : 93
CONST                : 29 117 118 142
CONTINUE             : 134
DEFAULT              : 132
DIV                  : 59
DIV_ASSIGN           : 64
DOT                  : 80 93
ELSE                 : 95 96 97 97
ENUM                 : 135
EQ                   : 69
EQUAL                : 17 18 19 21 30 31 32 117 118 140 141 142
EXPORT               : 
FALSE                : 88
FINALLY              : 
FLOAT                : 84
FOR                  : 28 29
FUNCTION             : 41 138
GE                   : 76
GT                   : 74
IDENTIFIER           : 17 18 19 20 21 29 29 30 31 32 41 43 44 53 80 82 86 117 118 119 135 136 137 138 140 141 142 143 147 152
IF                   : 94 95 96 96 97 97
IMPORT               : 
INTERFACE            : 143
LBRACE               : 28 41 98 112 119 127 135 138 142 143 148
LBRACKET             : 21 21 48 49 55 81
LE                   : 75
LET                  : 18 19 20 21 30 31
LOG                  : 93
LPAREN               : 28 29 41 77 79 82 93 94 95 96 96 97 97 127 138 139 142
LT                   : 73
MINUS                : 57
MINUSMINUS           : 37 39 90 92
MINUS_ASSIGN         : 62
MOD                  : 60
MOD_ASSIGN           : 65
MULT_ASSIGN          : 63
NEQ                  : 70
NEW                  : 
NOT                  : 78
NULL_TYPE            : 
NUMBER               : 83
NUMBER_TYPE          : 50
OF                   : 29
OR                   : 68
PLUS                 : 56
PLUSPLUS             : 36 38 89 91
PLUS_ASSIGN          : 61
POT                  : 66
PRIVATE              : 
PROMPT               : 77
PROTECTED            : 
PUBLIC               : 
RBRACE               : 28 41 98 112 119 127 135 138 142 143 148
RBRACKET             : 21 21 48 49 55 81
RETURN               : 42 110
RPAREN               : 28 29 41 77 79 82 93 94 95 96 96 97 97 127 138 139 142
SEMICOLON            : 15 17 18 19 20 21 28 28 42 93 107 110 117 118 133 134 140 141 142 147
STATIC               : 
STRICT_EQ            : 71
STRICT_NEQ           : 72
STRING               : 77 85
STRING_TYPE          : 51
SUPER                : 
SWITCH               : 127
SYMBOL_TYPE          : 
THIS                 : 
TIMES                : 58
TRUE                 : 87
TRY                  : 
TYPE                 : 
UNDEFINED_TYPE       : 
VAR                  : 140 141
VOID                 : 54
WHILE                : 139
error                : 

Nonterminals, with rules where they appear

arrow_function       : 6 104
assignment           : 14
async_function       : 7 105
body_function        : 41 138 142
case                 : 128 129
case_block           : 127 128
class_body           : 119 120
class_definition     : 11 111
class_element        : 120 121
consolelog           : 16 106
constAssignment      : 8 101 126
controlEstructure    : 10 108
declaracion          : 4 102
element              : 1 2
empty                : 23 34 40 45 47 115 122 130 146 151
enum_definition      : 9
enum_members         : 135 137
expression           : 15 17 18 19 24 25 28 30 31 32 33 35 36 37 38 39 42 49 49 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 78 79 80 81 81 89 90 91 92 94 95 96 96 97 97 107 117 118 127 131 139 140 141 152
forEstructure        : 109
for_init             : 28
for_update           : 28
function             : 5 103 123
instruction_list     : 28 46 98 113 131 132
interface            : 13
interface_body       : 143 144
interface_property   : 144 145
letAssignment        : 3 99 124
lista_expresiones    : 22 25
lista_expresiones_opt : 21 82 93
object_properties    : 148 150
object_property      : 149 150
parameters           : 41 44 138 142
pop_loop             : 28 29
program              : 1 0
push_loop            : 28 29
statement            : 12 29 94 95 95 96 96 97 97 97 113 114 139
type                 : 18 20 21 31 41 43 44 48 48 55 117 138 140 147
varAssignment        : 100 125

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program element
    (2) program -> . element
    (3) element -> . letAssignment
    (4) element -> . declaracion
    (5) element -> . function
    (6) element -> . arrow_function
    (7) element -> . async_function
    (8) element -> . constAssignment
    (9) element -> . enum_definition
    (10) element -> . controlEstructure
    (11) element -> . class_definition
    (12) element -> . statement
    (13) element -> . interface
    (14) element -> . assignment
    (15) element -> . expression SEMICOLON
    (16) element -> . consolelog
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (135) enum_definition -> . ENUM IDENTIFIER LBRACE enum_members RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (143) interface -> . INTERFACE IDENTIFIER LBRACE interface_body RBRACE
    (17) assignment -> . IDENTIFIER EQUAL expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    LET             shift and go to state 17
    FUNCTION        shift and go to state 20
    CONST           shift and go to state 23
    ASYNC           shift and go to state 24
    ENUM            shift and go to state 25
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    CLASS           shift and go to state 29
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    INTERFACE       shift and go to state 35
    IDENTIFIER      shift and go to state 18
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    CONSOLE         shift and go to state 45
    VAR             shift and go to state 46
    FOR             shift and go to state 47

    program                        shift and go to state 1
    element                        shift and go to state 2
    letAssignment                  shift and go to state 3
    declaracion                    shift and go to state 4
    function                       shift and go to state 5
    arrow_function                 shift and go to state 6
    async_function                 shift and go to state 7
    constAssignment                shift and go to state 8
    enum_definition                shift and go to state 9
    controlEstructure              shift and go to state 10
    class_definition               shift and go to state 11
    statement                      shift and go to state 12
    interface                      shift and go to state 13
    assignment                     shift and go to state 14
    expression                     shift and go to state 15
    consolelog                     shift and go to state 16
    varAssignment                  shift and go to state 31
    forEstructure                  shift and go to state 32

state 1

    (0) S' -> program .
    (1) program -> program . element
    (3) element -> . letAssignment
    (4) element -> . declaracion
    (5) element -> . function
    (6) element -> . arrow_function
    (7) element -> . async_function
    (8) element -> . constAssignment
    (9) element -> . enum_definition
    (10) element -> . controlEstructure
    (11) element -> . class_definition
    (12) element -> . statement
    (13) element -> . interface
    (14) element -> . assignment
    (15) element -> . expression SEMICOLON
    (16) element -> . consolelog
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (135) enum_definition -> . ENUM IDENTIFIER LBRACE enum_members RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (143) interface -> . INTERFACE IDENTIFIER LBRACE interface_body RBRACE
    (17) assignment -> . IDENTIFIER EQUAL expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    LET             shift and go to state 17
    FUNCTION        shift and go to state 20
    CONST           shift and go to state 23
    ASYNC           shift and go to state 24
    ENUM            shift and go to state 25
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    CLASS           shift and go to state 29
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    INTERFACE       shift and go to state 35
    IDENTIFIER      shift and go to state 18
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    CONSOLE         shift and go to state 45
    VAR             shift and go to state 46
    FOR             shift and go to state 47

    element                        shift and go to state 48
    letAssignment                  shift and go to state 3
    declaracion                    shift and go to state 4
    function                       shift and go to state 5
    arrow_function                 shift and go to state 6
    async_function                 shift and go to state 7
    constAssignment                shift and go to state 8
    enum_definition                shift and go to state 9
    controlEstructure              shift and go to state 10
    class_definition               shift and go to state 11
    statement                      shift and go to state 12
    interface                      shift and go to state 13
    assignment                     shift and go to state 14
    expression                     shift and go to state 15
    consolelog                     shift and go to state 16
    varAssignment                  shift and go to state 31
    forEstructure                  shift and go to state 32

state 2

    (2) program -> element .

    LET             reduce using rule 2 (program -> element .)
    FUNCTION        reduce using rule 2 (program -> element .)
    CONST           reduce using rule 2 (program -> element .)
    ASYNC           reduce using rule 2 (program -> element .)
    ENUM            reduce using rule 2 (program -> element .)
    IF              reduce using rule 2 (program -> element .)
    SWITCH          reduce using rule 2 (program -> element .)
    WHILE           reduce using rule 2 (program -> element .)
    CLASS           reduce using rule 2 (program -> element .)
    RETURN          reduce using rule 2 (program -> element .)
    LBRACE          reduce using rule 2 (program -> element .)
    BREAK           reduce using rule 2 (program -> element .)
    CONTINUE        reduce using rule 2 (program -> element .)
    INTERFACE       reduce using rule 2 (program -> element .)
    IDENTIFIER      reduce using rule 2 (program -> element .)
    LBRACKET        reduce using rule 2 (program -> element .)
    PROMPT          reduce using rule 2 (program -> element .)
    NOT             reduce using rule 2 (program -> element .)
    LPAREN          reduce using rule 2 (program -> element .)
    NUMBER          reduce using rule 2 (program -> element .)
    FLOAT           reduce using rule 2 (program -> element .)
    STRING          reduce using rule 2 (program -> element .)
    TRUE            reduce using rule 2 (program -> element .)
    FALSE           reduce using rule 2 (program -> element .)
    PLUSPLUS        reduce using rule 2 (program -> element .)
    MINUSMINUS      reduce using rule 2 (program -> element .)
    CONSOLE         reduce using rule 2 (program -> element .)
    VAR             reduce using rule 2 (program -> element .)
    FOR             reduce using rule 2 (program -> element .)
    $end            reduce using rule 2 (program -> element .)


state 3

    (3) element -> letAssignment .
    (99) statement -> letAssignment .

  ! reduce/reduce conflict for LET resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONST resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for ASYNC resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for ENUM resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for IF resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for SWITCH resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CLASS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LBRACE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for BREAK resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for PROMPT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for NOT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LPAREN resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for NUMBER resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FLOAT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for STRING resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for VAR resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for $end resolved using rule 3 (element -> letAssignment .)
    LET             reduce using rule 3 (element -> letAssignment .)
    FUNCTION        reduce using rule 3 (element -> letAssignment .)
    CONST           reduce using rule 3 (element -> letAssignment .)
    ASYNC           reduce using rule 3 (element -> letAssignment .)
    ENUM            reduce using rule 3 (element -> letAssignment .)
    IF              reduce using rule 3 (element -> letAssignment .)
    SWITCH          reduce using rule 3 (element -> letAssignment .)
    WHILE           reduce using rule 3 (element -> letAssignment .)
    CLASS           reduce using rule 3 (element -> letAssignment .)
    RETURN          reduce using rule 3 (element -> letAssignment .)
    LBRACE          reduce using rule 3 (element -> letAssignment .)
    BREAK           reduce using rule 3 (element -> letAssignment .)
    CONTINUE        reduce using rule 3 (element -> letAssignment .)
    INTERFACE       reduce using rule 3 (element -> letAssignment .)
    IDENTIFIER      reduce using rule 3 (element -> letAssignment .)
    LBRACKET        reduce using rule 3 (element -> letAssignment .)
    PROMPT          reduce using rule 3 (element -> letAssignment .)
    NOT             reduce using rule 3 (element -> letAssignment .)
    LPAREN          reduce using rule 3 (element -> letAssignment .)
    NUMBER          reduce using rule 3 (element -> letAssignment .)
    FLOAT           reduce using rule 3 (element -> letAssignment .)
    STRING          reduce using rule 3 (element -> letAssignment .)
    TRUE            reduce using rule 3 (element -> letAssignment .)
    FALSE           reduce using rule 3 (element -> letAssignment .)
    PLUSPLUS        reduce using rule 3 (element -> letAssignment .)
    MINUSMINUS      reduce using rule 3 (element -> letAssignment .)
    CONSOLE         reduce using rule 3 (element -> letAssignment .)
    VAR             reduce using rule 3 (element -> letAssignment .)
    FOR             reduce using rule 3 (element -> letAssignment .)
    $end            reduce using rule 3 (element -> letAssignment .)

  ! LET             [ reduce using rule 99 (statement -> letAssignment .) ]
  ! FUNCTION        [ reduce using rule 99 (statement -> letAssignment .) ]
  ! CONST           [ reduce using rule 99 (statement -> letAssignment .) ]
  ! ASYNC           [ reduce using rule 99 (statement -> letAssignment .) ]
  ! ENUM            [ reduce using rule 99 (statement -> letAssignment .) ]
  ! IF              [ reduce using rule 99 (statement -> letAssignment .) ]
  ! SWITCH          [ reduce using rule 99 (statement -> letAssignment .) ]
  ! WHILE           [ reduce using rule 99 (statement -> letAssignment .) ]
  ! CLASS           [ reduce using rule 99 (statement -> letAssignment .) ]
  ! RETURN          [ reduce using rule 99 (statement -> letAssignment .) ]
  ! LBRACE          [ reduce using rule 99 (statement -> letAssignment .) ]
  ! BREAK           [ reduce using rule 99 (statement -> letAssignment .) ]
  ! CONTINUE        [ reduce using rule 99 (statement -> letAssignment .) ]
  ! INTERFACE       [ reduce using rule 99 (statement -> letAssignment .) ]
  ! IDENTIFIER      [ reduce using rule 99 (statement -> letAssignment .) ]
  ! LBRACKET        [ reduce using rule 99 (statement -> letAssignment .) ]
  ! PROMPT          [ reduce using rule 99 (statement -> letAssignment .) ]
  ! NOT             [ reduce using rule 99 (statement -> letAssignment .) ]
  ! LPAREN          [ reduce using rule 99 (statement -> letAssignment .) ]
  ! NUMBER          [ reduce using rule 99 (statement -> letAssignment .) ]
  ! FLOAT           [ reduce using rule 99 (statement -> letAssignment .) ]
  ! STRING          [ reduce using rule 99 (statement -> letAssignment .) ]
  ! TRUE            [ reduce using rule 99 (statement -> letAssignment .) ]
  ! FALSE           [ reduce using rule 99 (statement -> letAssignment .) ]
  ! PLUSPLUS        [ reduce using rule 99 (statement -> letAssignment .) ]
  ! MINUSMINUS      [ reduce using rule 99 (statement -> letAssignment .) ]
  ! CONSOLE         [ reduce using rule 99 (statement -> letAssignment .) ]
  ! VAR             [ reduce using rule 99 (statement -> letAssignment .) ]
  ! FOR             [ reduce using rule 99 (statement -> letAssignment .) ]
  ! $end            [ reduce using rule 99 (statement -> letAssignment .) ]


state 4

    (4) element -> declaracion .
    (102) statement -> declaracion .

  ! reduce/reduce conflict for LET resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONST resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for ASYNC resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for ENUM resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for IF resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CLASS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LBRACE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for BREAK resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for PROMPT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for VAR resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 4 (element -> declaracion .)
    LET             reduce using rule 4 (element -> declaracion .)
    FUNCTION        reduce using rule 4 (element -> declaracion .)
    CONST           reduce using rule 4 (element -> declaracion .)
    ASYNC           reduce using rule 4 (element -> declaracion .)
    ENUM            reduce using rule 4 (element -> declaracion .)
    IF              reduce using rule 4 (element -> declaracion .)
    SWITCH          reduce using rule 4 (element -> declaracion .)
    WHILE           reduce using rule 4 (element -> declaracion .)
    CLASS           reduce using rule 4 (element -> declaracion .)
    RETURN          reduce using rule 4 (element -> declaracion .)
    LBRACE          reduce using rule 4 (element -> declaracion .)
    BREAK           reduce using rule 4 (element -> declaracion .)
    CONTINUE        reduce using rule 4 (element -> declaracion .)
    INTERFACE       reduce using rule 4 (element -> declaracion .)
    IDENTIFIER      reduce using rule 4 (element -> declaracion .)
    LBRACKET        reduce using rule 4 (element -> declaracion .)
    PROMPT          reduce using rule 4 (element -> declaracion .)
    NOT             reduce using rule 4 (element -> declaracion .)
    LPAREN          reduce using rule 4 (element -> declaracion .)
    NUMBER          reduce using rule 4 (element -> declaracion .)
    FLOAT           reduce using rule 4 (element -> declaracion .)
    STRING          reduce using rule 4 (element -> declaracion .)
    TRUE            reduce using rule 4 (element -> declaracion .)
    FALSE           reduce using rule 4 (element -> declaracion .)
    PLUSPLUS        reduce using rule 4 (element -> declaracion .)
    MINUSMINUS      reduce using rule 4 (element -> declaracion .)
    CONSOLE         reduce using rule 4 (element -> declaracion .)
    VAR             reduce using rule 4 (element -> declaracion .)
    FOR             reduce using rule 4 (element -> declaracion .)
    $end            reduce using rule 4 (element -> declaracion .)

  ! LET             [ reduce using rule 102 (statement -> declaracion .) ]
  ! FUNCTION        [ reduce using rule 102 (statement -> declaracion .) ]
  ! CONST           [ reduce using rule 102 (statement -> declaracion .) ]
  ! ASYNC           [ reduce using rule 102 (statement -> declaracion .) ]
  ! ENUM            [ reduce using rule 102 (statement -> declaracion .) ]
  ! IF              [ reduce using rule 102 (statement -> declaracion .) ]
  ! SWITCH          [ reduce using rule 102 (statement -> declaracion .) ]
  ! WHILE           [ reduce using rule 102 (statement -> declaracion .) ]
  ! CLASS           [ reduce using rule 102 (statement -> declaracion .) ]
  ! RETURN          [ reduce using rule 102 (statement -> declaracion .) ]
  ! LBRACE          [ reduce using rule 102 (statement -> declaracion .) ]
  ! BREAK           [ reduce using rule 102 (statement -> declaracion .) ]
  ! CONTINUE        [ reduce using rule 102 (statement -> declaracion .) ]
  ! INTERFACE       [ reduce using rule 102 (statement -> declaracion .) ]
  ! IDENTIFIER      [ reduce using rule 102 (statement -> declaracion .) ]
  ! LBRACKET        [ reduce using rule 102 (statement -> declaracion .) ]
  ! PROMPT          [ reduce using rule 102 (statement -> declaracion .) ]
  ! NOT             [ reduce using rule 102 (statement -> declaracion .) ]
  ! LPAREN          [ reduce using rule 102 (statement -> declaracion .) ]
  ! NUMBER          [ reduce using rule 102 (statement -> declaracion .) ]
  ! FLOAT           [ reduce using rule 102 (statement -> declaracion .) ]
  ! STRING          [ reduce using rule 102 (statement -> declaracion .) ]
  ! TRUE            [ reduce using rule 102 (statement -> declaracion .) ]
  ! FALSE           [ reduce using rule 102 (statement -> declaracion .) ]
  ! PLUSPLUS        [ reduce using rule 102 (statement -> declaracion .) ]
  ! MINUSMINUS      [ reduce using rule 102 (statement -> declaracion .) ]
  ! CONSOLE         [ reduce using rule 102 (statement -> declaracion .) ]
  ! VAR             [ reduce using rule 102 (statement -> declaracion .) ]
  ! FOR             [ reduce using rule 102 (statement -> declaracion .) ]
  ! $end            [ reduce using rule 102 (statement -> declaracion .) ]


state 5

    (5) element -> function .
    (103) statement -> function .

  ! reduce/reduce conflict for LET resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for IF resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for BREAK resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for NOT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for STRING resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for TRUE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FALSE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for VAR resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for $end resolved using rule 5 (element -> function .)
    LET             reduce using rule 5 (element -> function .)
    FUNCTION        reduce using rule 5 (element -> function .)
    CONST           reduce using rule 5 (element -> function .)
    ASYNC           reduce using rule 5 (element -> function .)
    ENUM            reduce using rule 5 (element -> function .)
    IF              reduce using rule 5 (element -> function .)
    SWITCH          reduce using rule 5 (element -> function .)
    WHILE           reduce using rule 5 (element -> function .)
    CLASS           reduce using rule 5 (element -> function .)
    RETURN          reduce using rule 5 (element -> function .)
    LBRACE          reduce using rule 5 (element -> function .)
    BREAK           reduce using rule 5 (element -> function .)
    CONTINUE        reduce using rule 5 (element -> function .)
    INTERFACE       reduce using rule 5 (element -> function .)
    IDENTIFIER      reduce using rule 5 (element -> function .)
    LBRACKET        reduce using rule 5 (element -> function .)
    PROMPT          reduce using rule 5 (element -> function .)
    NOT             reduce using rule 5 (element -> function .)
    LPAREN          reduce using rule 5 (element -> function .)
    NUMBER          reduce using rule 5 (element -> function .)
    FLOAT           reduce using rule 5 (element -> function .)
    STRING          reduce using rule 5 (element -> function .)
    TRUE            reduce using rule 5 (element -> function .)
    FALSE           reduce using rule 5 (element -> function .)
    PLUSPLUS        reduce using rule 5 (element -> function .)
    MINUSMINUS      reduce using rule 5 (element -> function .)
    CONSOLE         reduce using rule 5 (element -> function .)
    VAR             reduce using rule 5 (element -> function .)
    FOR             reduce using rule 5 (element -> function .)
    $end            reduce using rule 5 (element -> function .)

  ! LET             [ reduce using rule 103 (statement -> function .) ]
  ! FUNCTION        [ reduce using rule 103 (statement -> function .) ]
  ! CONST           [ reduce using rule 103 (statement -> function .) ]
  ! ASYNC           [ reduce using rule 103 (statement -> function .) ]
  ! ENUM            [ reduce using rule 103 (statement -> function .) ]
  ! IF              [ reduce using rule 103 (statement -> function .) ]
  ! SWITCH          [ reduce using rule 103 (statement -> function .) ]
  ! WHILE           [ reduce using rule 103 (statement -> function .) ]
  ! CLASS           [ reduce using rule 103 (statement -> function .) ]
  ! RETURN          [ reduce using rule 103 (statement -> function .) ]
  ! LBRACE          [ reduce using rule 103 (statement -> function .) ]
  ! BREAK           [ reduce using rule 103 (statement -> function .) ]
  ! CONTINUE        [ reduce using rule 103 (statement -> function .) ]
  ! INTERFACE       [ reduce using rule 103 (statement -> function .) ]
  ! IDENTIFIER      [ reduce using rule 103 (statement -> function .) ]
  ! LBRACKET        [ reduce using rule 103 (statement -> function .) ]
  ! PROMPT          [ reduce using rule 103 (statement -> function .) ]
  ! NOT             [ reduce using rule 103 (statement -> function .) ]
  ! LPAREN          [ reduce using rule 103 (statement -> function .) ]
  ! NUMBER          [ reduce using rule 103 (statement -> function .) ]
  ! FLOAT           [ reduce using rule 103 (statement -> function .) ]
  ! STRING          [ reduce using rule 103 (statement -> function .) ]
  ! TRUE            [ reduce using rule 103 (statement -> function .) ]
  ! FALSE           [ reduce using rule 103 (statement -> function .) ]
  ! PLUSPLUS        [ reduce using rule 103 (statement -> function .) ]
  ! MINUSMINUS      [ reduce using rule 103 (statement -> function .) ]
  ! CONSOLE         [ reduce using rule 103 (statement -> function .) ]
  ! VAR             [ reduce using rule 103 (statement -> function .) ]
  ! FOR             [ reduce using rule 103 (statement -> function .) ]
  ! $end            [ reduce using rule 103 (statement -> function .) ]


state 6

    (6) element -> arrow_function .
    (104) statement -> arrow_function .

  ! reduce/reduce conflict for LET resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONST resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for ENUM resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for IF resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CLASS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for RETURN resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for BREAK resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for NOT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for STRING resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for TRUE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FALSE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for VAR resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for $end resolved using rule 6 (element -> arrow_function .)
    LET             reduce using rule 6 (element -> arrow_function .)
    FUNCTION        reduce using rule 6 (element -> arrow_function .)
    CONST           reduce using rule 6 (element -> arrow_function .)
    ASYNC           reduce using rule 6 (element -> arrow_function .)
    ENUM            reduce using rule 6 (element -> arrow_function .)
    IF              reduce using rule 6 (element -> arrow_function .)
    SWITCH          reduce using rule 6 (element -> arrow_function .)
    WHILE           reduce using rule 6 (element -> arrow_function .)
    CLASS           reduce using rule 6 (element -> arrow_function .)
    RETURN          reduce using rule 6 (element -> arrow_function .)
    LBRACE          reduce using rule 6 (element -> arrow_function .)
    BREAK           reduce using rule 6 (element -> arrow_function .)
    CONTINUE        reduce using rule 6 (element -> arrow_function .)
    INTERFACE       reduce using rule 6 (element -> arrow_function .)
    IDENTIFIER      reduce using rule 6 (element -> arrow_function .)
    LBRACKET        reduce using rule 6 (element -> arrow_function .)
    PROMPT          reduce using rule 6 (element -> arrow_function .)
    NOT             reduce using rule 6 (element -> arrow_function .)
    LPAREN          reduce using rule 6 (element -> arrow_function .)
    NUMBER          reduce using rule 6 (element -> arrow_function .)
    FLOAT           reduce using rule 6 (element -> arrow_function .)
    STRING          reduce using rule 6 (element -> arrow_function .)
    TRUE            reduce using rule 6 (element -> arrow_function .)
    FALSE           reduce using rule 6 (element -> arrow_function .)
    PLUSPLUS        reduce using rule 6 (element -> arrow_function .)
    MINUSMINUS      reduce using rule 6 (element -> arrow_function .)
    CONSOLE         reduce using rule 6 (element -> arrow_function .)
    VAR             reduce using rule 6 (element -> arrow_function .)
    FOR             reduce using rule 6 (element -> arrow_function .)
    $end            reduce using rule 6 (element -> arrow_function .)

  ! LET             [ reduce using rule 104 (statement -> arrow_function .) ]
  ! FUNCTION        [ reduce using rule 104 (statement -> arrow_function .) ]
  ! CONST           [ reduce using rule 104 (statement -> arrow_function .) ]
  ! ASYNC           [ reduce using rule 104 (statement -> arrow_function .) ]
  ! ENUM            [ reduce using rule 104 (statement -> arrow_function .) ]
  ! IF              [ reduce using rule 104 (statement -> arrow_function .) ]
  ! SWITCH          [ reduce using rule 104 (statement -> arrow_function .) ]
  ! WHILE           [ reduce using rule 104 (statement -> arrow_function .) ]
  ! CLASS           [ reduce using rule 104 (statement -> arrow_function .) ]
  ! RETURN          [ reduce using rule 104 (statement -> arrow_function .) ]
  ! LBRACE          [ reduce using rule 104 (statement -> arrow_function .) ]
  ! BREAK           [ reduce using rule 104 (statement -> arrow_function .) ]
  ! CONTINUE        [ reduce using rule 104 (statement -> arrow_function .) ]
  ! INTERFACE       [ reduce using rule 104 (statement -> arrow_function .) ]
  ! IDENTIFIER      [ reduce using rule 104 (statement -> arrow_function .) ]
  ! LBRACKET        [ reduce using rule 104 (statement -> arrow_function .) ]
  ! PROMPT          [ reduce using rule 104 (statement -> arrow_function .) ]
  ! NOT             [ reduce using rule 104 (statement -> arrow_function .) ]
  ! LPAREN          [ reduce using rule 104 (statement -> arrow_function .) ]
  ! NUMBER          [ reduce using rule 104 (statement -> arrow_function .) ]
  ! FLOAT           [ reduce using rule 104 (statement -> arrow_function .) ]
  ! STRING          [ reduce using rule 104 (statement -> arrow_function .) ]
  ! TRUE            [ reduce using rule 104 (statement -> arrow_function .) ]
  ! FALSE           [ reduce using rule 104 (statement -> arrow_function .) ]
  ! PLUSPLUS        [ reduce using rule 104 (statement -> arrow_function .) ]
  ! MINUSMINUS      [ reduce using rule 104 (statement -> arrow_function .) ]
  ! CONSOLE         [ reduce using rule 104 (statement -> arrow_function .) ]
  ! VAR             [ reduce using rule 104 (statement -> arrow_function .) ]
  ! FOR             [ reduce using rule 104 (statement -> arrow_function .) ]
  ! $end            [ reduce using rule 104 (statement -> arrow_function .) ]


state 7

    (7) element -> async_function .
    (105) statement -> async_function .

  ! reduce/reduce conflict for LET resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONST resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for ENUM resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for IF resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CLASS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for BREAK resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for NOT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for STRING resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for TRUE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FALSE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for VAR resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for $end resolved using rule 7 (element -> async_function .)
    LET             reduce using rule 7 (element -> async_function .)
    FUNCTION        reduce using rule 7 (element -> async_function .)
    CONST           reduce using rule 7 (element -> async_function .)
    ASYNC           reduce using rule 7 (element -> async_function .)
    ENUM            reduce using rule 7 (element -> async_function .)
    IF              reduce using rule 7 (element -> async_function .)
    SWITCH          reduce using rule 7 (element -> async_function .)
    WHILE           reduce using rule 7 (element -> async_function .)
    CLASS           reduce using rule 7 (element -> async_function .)
    RETURN          reduce using rule 7 (element -> async_function .)
    LBRACE          reduce using rule 7 (element -> async_function .)
    BREAK           reduce using rule 7 (element -> async_function .)
    CONTINUE        reduce using rule 7 (element -> async_function .)
    INTERFACE       reduce using rule 7 (element -> async_function .)
    IDENTIFIER      reduce using rule 7 (element -> async_function .)
    LBRACKET        reduce using rule 7 (element -> async_function .)
    PROMPT          reduce using rule 7 (element -> async_function .)
    NOT             reduce using rule 7 (element -> async_function .)
    LPAREN          reduce using rule 7 (element -> async_function .)
    NUMBER          reduce using rule 7 (element -> async_function .)
    FLOAT           reduce using rule 7 (element -> async_function .)
    STRING          reduce using rule 7 (element -> async_function .)
    TRUE            reduce using rule 7 (element -> async_function .)
    FALSE           reduce using rule 7 (element -> async_function .)
    PLUSPLUS        reduce using rule 7 (element -> async_function .)
    MINUSMINUS      reduce using rule 7 (element -> async_function .)
    CONSOLE         reduce using rule 7 (element -> async_function .)
    VAR             reduce using rule 7 (element -> async_function .)
    FOR             reduce using rule 7 (element -> async_function .)
    $end            reduce using rule 7 (element -> async_function .)

  ! LET             [ reduce using rule 105 (statement -> async_function .) ]
  ! FUNCTION        [ reduce using rule 105 (statement -> async_function .) ]
  ! CONST           [ reduce using rule 105 (statement -> async_function .) ]
  ! ASYNC           [ reduce using rule 105 (statement -> async_function .) ]
  ! ENUM            [ reduce using rule 105 (statement -> async_function .) ]
  ! IF              [ reduce using rule 105 (statement -> async_function .) ]
  ! SWITCH          [ reduce using rule 105 (statement -> async_function .) ]
  ! WHILE           [ reduce using rule 105 (statement -> async_function .) ]
  ! CLASS           [ reduce using rule 105 (statement -> async_function .) ]
  ! RETURN          [ reduce using rule 105 (statement -> async_function .) ]
  ! LBRACE          [ reduce using rule 105 (statement -> async_function .) ]
  ! BREAK           [ reduce using rule 105 (statement -> async_function .) ]
  ! CONTINUE        [ reduce using rule 105 (statement -> async_function .) ]
  ! INTERFACE       [ reduce using rule 105 (statement -> async_function .) ]
  ! IDENTIFIER      [ reduce using rule 105 (statement -> async_function .) ]
  ! LBRACKET        [ reduce using rule 105 (statement -> async_function .) ]
  ! PROMPT          [ reduce using rule 105 (statement -> async_function .) ]
  ! NOT             [ reduce using rule 105 (statement -> async_function .) ]
  ! LPAREN          [ reduce using rule 105 (statement -> async_function .) ]
  ! NUMBER          [ reduce using rule 105 (statement -> async_function .) ]
  ! FLOAT           [ reduce using rule 105 (statement -> async_function .) ]
  ! STRING          [ reduce using rule 105 (statement -> async_function .) ]
  ! TRUE            [ reduce using rule 105 (statement -> async_function .) ]
  ! FALSE           [ reduce using rule 105 (statement -> async_function .) ]
  ! PLUSPLUS        [ reduce using rule 105 (statement -> async_function .) ]
  ! MINUSMINUS      [ reduce using rule 105 (statement -> async_function .) ]
  ! CONSOLE         [ reduce using rule 105 (statement -> async_function .) ]
  ! VAR             [ reduce using rule 105 (statement -> async_function .) ]
  ! FOR             [ reduce using rule 105 (statement -> async_function .) ]
  ! $end            [ reduce using rule 105 (statement -> async_function .) ]


state 8

    (8) element -> constAssignment .
    (101) statement -> constAssignment .

  ! reduce/reduce conflict for LET resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONST resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for ASYNC resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for ENUM resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for IF resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for SWITCH resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CLASS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for RETURN resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LBRACE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for BREAK resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for PROMPT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for NOT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LPAREN resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for NUMBER resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FLOAT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for STRING resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for TRUE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FALSE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for VAR resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for $end resolved using rule 8 (element -> constAssignment .)
    LET             reduce using rule 8 (element -> constAssignment .)
    FUNCTION        reduce using rule 8 (element -> constAssignment .)
    CONST           reduce using rule 8 (element -> constAssignment .)
    ASYNC           reduce using rule 8 (element -> constAssignment .)
    ENUM            reduce using rule 8 (element -> constAssignment .)
    IF              reduce using rule 8 (element -> constAssignment .)
    SWITCH          reduce using rule 8 (element -> constAssignment .)
    WHILE           reduce using rule 8 (element -> constAssignment .)
    CLASS           reduce using rule 8 (element -> constAssignment .)
    RETURN          reduce using rule 8 (element -> constAssignment .)
    LBRACE          reduce using rule 8 (element -> constAssignment .)
    BREAK           reduce using rule 8 (element -> constAssignment .)
    CONTINUE        reduce using rule 8 (element -> constAssignment .)
    INTERFACE       reduce using rule 8 (element -> constAssignment .)
    IDENTIFIER      reduce using rule 8 (element -> constAssignment .)
    LBRACKET        reduce using rule 8 (element -> constAssignment .)
    PROMPT          reduce using rule 8 (element -> constAssignment .)
    NOT             reduce using rule 8 (element -> constAssignment .)
    LPAREN          reduce using rule 8 (element -> constAssignment .)
    NUMBER          reduce using rule 8 (element -> constAssignment .)
    FLOAT           reduce using rule 8 (element -> constAssignment .)
    STRING          reduce using rule 8 (element -> constAssignment .)
    TRUE            reduce using rule 8 (element -> constAssignment .)
    FALSE           reduce using rule 8 (element -> constAssignment .)
    PLUSPLUS        reduce using rule 8 (element -> constAssignment .)
    MINUSMINUS      reduce using rule 8 (element -> constAssignment .)
    CONSOLE         reduce using rule 8 (element -> constAssignment .)
    VAR             reduce using rule 8 (element -> constAssignment .)
    FOR             reduce using rule 8 (element -> constAssignment .)
    $end            reduce using rule 8 (element -> constAssignment .)

  ! LET             [ reduce using rule 101 (statement -> constAssignment .) ]
  ! FUNCTION        [ reduce using rule 101 (statement -> constAssignment .) ]
  ! CONST           [ reduce using rule 101 (statement -> constAssignment .) ]
  ! ASYNC           [ reduce using rule 101 (statement -> constAssignment .) ]
  ! ENUM            [ reduce using rule 101 (statement -> constAssignment .) ]
  ! IF              [ reduce using rule 101 (statement -> constAssignment .) ]
  ! SWITCH          [ reduce using rule 101 (statement -> constAssignment .) ]
  ! WHILE           [ reduce using rule 101 (statement -> constAssignment .) ]
  ! CLASS           [ reduce using rule 101 (statement -> constAssignment .) ]
  ! RETURN          [ reduce using rule 101 (statement -> constAssignment .) ]
  ! LBRACE          [ reduce using rule 101 (statement -> constAssignment .) ]
  ! BREAK           [ reduce using rule 101 (statement -> constAssignment .) ]
  ! CONTINUE        [ reduce using rule 101 (statement -> constAssignment .) ]
  ! INTERFACE       [ reduce using rule 101 (statement -> constAssignment .) ]
  ! IDENTIFIER      [ reduce using rule 101 (statement -> constAssignment .) ]
  ! LBRACKET        [ reduce using rule 101 (statement -> constAssignment .) ]
  ! PROMPT          [ reduce using rule 101 (statement -> constAssignment .) ]
  ! NOT             [ reduce using rule 101 (statement -> constAssignment .) ]
  ! LPAREN          [ reduce using rule 101 (statement -> constAssignment .) ]
  ! NUMBER          [ reduce using rule 101 (statement -> constAssignment .) ]
  ! FLOAT           [ reduce using rule 101 (statement -> constAssignment .) ]
  ! STRING          [ reduce using rule 101 (statement -> constAssignment .) ]
  ! TRUE            [ reduce using rule 101 (statement -> constAssignment .) ]
  ! FALSE           [ reduce using rule 101 (statement -> constAssignment .) ]
  ! PLUSPLUS        [ reduce using rule 101 (statement -> constAssignment .) ]
  ! MINUSMINUS      [ reduce using rule 101 (statement -> constAssignment .) ]
  ! CONSOLE         [ reduce using rule 101 (statement -> constAssignment .) ]
  ! VAR             [ reduce using rule 101 (statement -> constAssignment .) ]
  ! FOR             [ reduce using rule 101 (statement -> constAssignment .) ]
  ! $end            [ reduce using rule 101 (statement -> constAssignment .) ]


state 9

    (9) element -> enum_definition .

    LET             reduce using rule 9 (element -> enum_definition .)
    FUNCTION        reduce using rule 9 (element -> enum_definition .)
    CONST           reduce using rule 9 (element -> enum_definition .)
    ASYNC           reduce using rule 9 (element -> enum_definition .)
    ENUM            reduce using rule 9 (element -> enum_definition .)
    IF              reduce using rule 9 (element -> enum_definition .)
    SWITCH          reduce using rule 9 (element -> enum_definition .)
    WHILE           reduce using rule 9 (element -> enum_definition .)
    CLASS           reduce using rule 9 (element -> enum_definition .)
    RETURN          reduce using rule 9 (element -> enum_definition .)
    LBRACE          reduce using rule 9 (element -> enum_definition .)
    BREAK           reduce using rule 9 (element -> enum_definition .)
    CONTINUE        reduce using rule 9 (element -> enum_definition .)
    INTERFACE       reduce using rule 9 (element -> enum_definition .)
    IDENTIFIER      reduce using rule 9 (element -> enum_definition .)
    LBRACKET        reduce using rule 9 (element -> enum_definition .)
    PROMPT          reduce using rule 9 (element -> enum_definition .)
    NOT             reduce using rule 9 (element -> enum_definition .)
    LPAREN          reduce using rule 9 (element -> enum_definition .)
    NUMBER          reduce using rule 9 (element -> enum_definition .)
    FLOAT           reduce using rule 9 (element -> enum_definition .)
    STRING          reduce using rule 9 (element -> enum_definition .)
    TRUE            reduce using rule 9 (element -> enum_definition .)
    FALSE           reduce using rule 9 (element -> enum_definition .)
    PLUSPLUS        reduce using rule 9 (element -> enum_definition .)
    MINUSMINUS      reduce using rule 9 (element -> enum_definition .)
    CONSOLE         reduce using rule 9 (element -> enum_definition .)
    VAR             reduce using rule 9 (element -> enum_definition .)
    FOR             reduce using rule 9 (element -> enum_definition .)
    $end            reduce using rule 9 (element -> enum_definition .)


state 10

    (10) element -> controlEstructure .
    (108) statement -> controlEstructure .

  ! reduce/reduce conflict for LET resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONST resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for ASYNC resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for ENUM resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for IF resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for SWITCH resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for RETURN resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LBRACE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for BREAK resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for PROMPT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FLOAT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for TRUE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FALSE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for VAR resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for $end resolved using rule 10 (element -> controlEstructure .)
    LET             reduce using rule 10 (element -> controlEstructure .)
    FUNCTION        reduce using rule 10 (element -> controlEstructure .)
    CONST           reduce using rule 10 (element -> controlEstructure .)
    ASYNC           reduce using rule 10 (element -> controlEstructure .)
    ENUM            reduce using rule 10 (element -> controlEstructure .)
    IF              reduce using rule 10 (element -> controlEstructure .)
    SWITCH          reduce using rule 10 (element -> controlEstructure .)
    WHILE           reduce using rule 10 (element -> controlEstructure .)
    CLASS           reduce using rule 10 (element -> controlEstructure .)
    RETURN          reduce using rule 10 (element -> controlEstructure .)
    LBRACE          reduce using rule 10 (element -> controlEstructure .)
    BREAK           reduce using rule 10 (element -> controlEstructure .)
    CONTINUE        reduce using rule 10 (element -> controlEstructure .)
    INTERFACE       reduce using rule 10 (element -> controlEstructure .)
    IDENTIFIER      reduce using rule 10 (element -> controlEstructure .)
    LBRACKET        reduce using rule 10 (element -> controlEstructure .)
    PROMPT          reduce using rule 10 (element -> controlEstructure .)
    NOT             reduce using rule 10 (element -> controlEstructure .)
    LPAREN          reduce using rule 10 (element -> controlEstructure .)
    NUMBER          reduce using rule 10 (element -> controlEstructure .)
    FLOAT           reduce using rule 10 (element -> controlEstructure .)
    STRING          reduce using rule 10 (element -> controlEstructure .)
    TRUE            reduce using rule 10 (element -> controlEstructure .)
    FALSE           reduce using rule 10 (element -> controlEstructure .)
    PLUSPLUS        reduce using rule 10 (element -> controlEstructure .)
    MINUSMINUS      reduce using rule 10 (element -> controlEstructure .)
    CONSOLE         reduce using rule 10 (element -> controlEstructure .)
    VAR             reduce using rule 10 (element -> controlEstructure .)
    FOR             reduce using rule 10 (element -> controlEstructure .)
    $end            reduce using rule 10 (element -> controlEstructure .)

  ! LET             [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! FUNCTION        [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! CONST           [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! ASYNC           [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! ENUM            [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! IF              [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! SWITCH          [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! WHILE           [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! CLASS           [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! RETURN          [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! LBRACE          [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! BREAK           [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! CONTINUE        [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! INTERFACE       [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! IDENTIFIER      [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! LBRACKET        [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! PROMPT          [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! NOT             [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! LPAREN          [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! NUMBER          [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! FLOAT           [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! STRING          [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! TRUE            [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! FALSE           [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! PLUSPLUS        [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! MINUSMINUS      [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! CONSOLE         [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! VAR             [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! FOR             [ reduce using rule 108 (statement -> controlEstructure .) ]
  ! $end            [ reduce using rule 108 (statement -> controlEstructure .) ]


state 11

    (11) element -> class_definition .
    (111) statement -> class_definition .

  ! reduce/reduce conflict for LET resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CONST resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for ASYNC resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for ENUM resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for IF resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for SWITCH resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CLASS resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for RETURN resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for LBRACE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for BREAK resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for PROMPT resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for VAR resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for $end resolved using rule 11 (element -> class_definition .)
    LET             reduce using rule 11 (element -> class_definition .)
    FUNCTION        reduce using rule 11 (element -> class_definition .)
    CONST           reduce using rule 11 (element -> class_definition .)
    ASYNC           reduce using rule 11 (element -> class_definition .)
    ENUM            reduce using rule 11 (element -> class_definition .)
    IF              reduce using rule 11 (element -> class_definition .)
    SWITCH          reduce using rule 11 (element -> class_definition .)
    WHILE           reduce using rule 11 (element -> class_definition .)
    CLASS           reduce using rule 11 (element -> class_definition .)
    RETURN          reduce using rule 11 (element -> class_definition .)
    LBRACE          reduce using rule 11 (element -> class_definition .)
    BREAK           reduce using rule 11 (element -> class_definition .)
    CONTINUE        reduce using rule 11 (element -> class_definition .)
    INTERFACE       reduce using rule 11 (element -> class_definition .)
    IDENTIFIER      reduce using rule 11 (element -> class_definition .)
    LBRACKET        reduce using rule 11 (element -> class_definition .)
    PROMPT          reduce using rule 11 (element -> class_definition .)
    NOT             reduce using rule 11 (element -> class_definition .)
    LPAREN          reduce using rule 11 (element -> class_definition .)
    NUMBER          reduce using rule 11 (element -> class_definition .)
    FLOAT           reduce using rule 11 (element -> class_definition .)
    STRING          reduce using rule 11 (element -> class_definition .)
    TRUE            reduce using rule 11 (element -> class_definition .)
    FALSE           reduce using rule 11 (element -> class_definition .)
    PLUSPLUS        reduce using rule 11 (element -> class_definition .)
    MINUSMINUS      reduce using rule 11 (element -> class_definition .)
    CONSOLE         reduce using rule 11 (element -> class_definition .)
    VAR             reduce using rule 11 (element -> class_definition .)
    FOR             reduce using rule 11 (element -> class_definition .)
    $end            reduce using rule 11 (element -> class_definition .)

  ! LET             [ reduce using rule 111 (statement -> class_definition .) ]
  ! FUNCTION        [ reduce using rule 111 (statement -> class_definition .) ]
  ! CONST           [ reduce using rule 111 (statement -> class_definition .) ]
  ! ASYNC           [ reduce using rule 111 (statement -> class_definition .) ]
  ! ENUM            [ reduce using rule 111 (statement -> class_definition .) ]
  ! IF              [ reduce using rule 111 (statement -> class_definition .) ]
  ! SWITCH          [ reduce using rule 111 (statement -> class_definition .) ]
  ! WHILE           [ reduce using rule 111 (statement -> class_definition .) ]
  ! CLASS           [ reduce using rule 111 (statement -> class_definition .) ]
  ! RETURN          [ reduce using rule 111 (statement -> class_definition .) ]
  ! LBRACE          [ reduce using rule 111 (statement -> class_definition .) ]
  ! BREAK           [ reduce using rule 111 (statement -> class_definition .) ]
  ! CONTINUE        [ reduce using rule 111 (statement -> class_definition .) ]
  ! INTERFACE       [ reduce using rule 111 (statement -> class_definition .) ]
  ! IDENTIFIER      [ reduce using rule 111 (statement -> class_definition .) ]
  ! LBRACKET        [ reduce using rule 111 (statement -> class_definition .) ]
  ! PROMPT          [ reduce using rule 111 (statement -> class_definition .) ]
  ! NOT             [ reduce using rule 111 (statement -> class_definition .) ]
  ! LPAREN          [ reduce using rule 111 (statement -> class_definition .) ]
  ! NUMBER          [ reduce using rule 111 (statement -> class_definition .) ]
  ! FLOAT           [ reduce using rule 111 (statement -> class_definition .) ]
  ! STRING          [ reduce using rule 111 (statement -> class_definition .) ]
  ! TRUE            [ reduce using rule 111 (statement -> class_definition .) ]
  ! FALSE           [ reduce using rule 111 (statement -> class_definition .) ]
  ! PLUSPLUS        [ reduce using rule 111 (statement -> class_definition .) ]
  ! MINUSMINUS      [ reduce using rule 111 (statement -> class_definition .) ]
  ! CONSOLE         [ reduce using rule 111 (statement -> class_definition .) ]
  ! VAR             [ reduce using rule 111 (statement -> class_definition .) ]
  ! FOR             [ reduce using rule 111 (statement -> class_definition .) ]
  ! $end            [ reduce using rule 111 (statement -> class_definition .) ]


state 12

    (12) element -> statement .

    LET             reduce using rule 12 (element -> statement .)
    FUNCTION        reduce using rule 12 (element -> statement .)
    CONST           reduce using rule 12 (element -> statement .)
    ASYNC           reduce using rule 12 (element -> statement .)
    ENUM            reduce using rule 12 (element -> statement .)
    IF              reduce using rule 12 (element -> statement .)
    SWITCH          reduce using rule 12 (element -> statement .)
    WHILE           reduce using rule 12 (element -> statement .)
    CLASS           reduce using rule 12 (element -> statement .)
    RETURN          reduce using rule 12 (element -> statement .)
    LBRACE          reduce using rule 12 (element -> statement .)
    BREAK           reduce using rule 12 (element -> statement .)
    CONTINUE        reduce using rule 12 (element -> statement .)
    INTERFACE       reduce using rule 12 (element -> statement .)
    IDENTIFIER      reduce using rule 12 (element -> statement .)
    LBRACKET        reduce using rule 12 (element -> statement .)
    PROMPT          reduce using rule 12 (element -> statement .)
    NOT             reduce using rule 12 (element -> statement .)
    LPAREN          reduce using rule 12 (element -> statement .)
    NUMBER          reduce using rule 12 (element -> statement .)
    FLOAT           reduce using rule 12 (element -> statement .)
    STRING          reduce using rule 12 (element -> statement .)
    TRUE            reduce using rule 12 (element -> statement .)
    FALSE           reduce using rule 12 (element -> statement .)
    PLUSPLUS        reduce using rule 12 (element -> statement .)
    MINUSMINUS      reduce using rule 12 (element -> statement .)
    CONSOLE         reduce using rule 12 (element -> statement .)
    VAR             reduce using rule 12 (element -> statement .)
    FOR             reduce using rule 12 (element -> statement .)
    $end            reduce using rule 12 (element -> statement .)


state 13

    (13) element -> interface .

    LET             reduce using rule 13 (element -> interface .)
    FUNCTION        reduce using rule 13 (element -> interface .)
    CONST           reduce using rule 13 (element -> interface .)
    ASYNC           reduce using rule 13 (element -> interface .)
    ENUM            reduce using rule 13 (element -> interface .)
    IF              reduce using rule 13 (element -> interface .)
    SWITCH          reduce using rule 13 (element -> interface .)
    WHILE           reduce using rule 13 (element -> interface .)
    CLASS           reduce using rule 13 (element -> interface .)
    RETURN          reduce using rule 13 (element -> interface .)
    LBRACE          reduce using rule 13 (element -> interface .)
    BREAK           reduce using rule 13 (element -> interface .)
    CONTINUE        reduce using rule 13 (element -> interface .)
    INTERFACE       reduce using rule 13 (element -> interface .)
    IDENTIFIER      reduce using rule 13 (element -> interface .)
    LBRACKET        reduce using rule 13 (element -> interface .)
    PROMPT          reduce using rule 13 (element -> interface .)
    NOT             reduce using rule 13 (element -> interface .)
    LPAREN          reduce using rule 13 (element -> interface .)
    NUMBER          reduce using rule 13 (element -> interface .)
    FLOAT           reduce using rule 13 (element -> interface .)
    STRING          reduce using rule 13 (element -> interface .)
    TRUE            reduce using rule 13 (element -> interface .)
    FALSE           reduce using rule 13 (element -> interface .)
    PLUSPLUS        reduce using rule 13 (element -> interface .)
    MINUSMINUS      reduce using rule 13 (element -> interface .)
    CONSOLE         reduce using rule 13 (element -> interface .)
    VAR             reduce using rule 13 (element -> interface .)
    FOR             reduce using rule 13 (element -> interface .)
    $end            reduce using rule 13 (element -> interface .)


state 14

    (14) element -> assignment .

    LET             reduce using rule 14 (element -> assignment .)
    FUNCTION        reduce using rule 14 (element -> assignment .)
    CONST           reduce using rule 14 (element -> assignment .)
    ASYNC           reduce using rule 14 (element -> assignment .)
    ENUM            reduce using rule 14 (element -> assignment .)
    IF              reduce using rule 14 (element -> assignment .)
    SWITCH          reduce using rule 14 (element -> assignment .)
    WHILE           reduce using rule 14 (element -> assignment .)
    CLASS           reduce using rule 14 (element -> assignment .)
    RETURN          reduce using rule 14 (element -> assignment .)
    LBRACE          reduce using rule 14 (element -> assignment .)
    BREAK           reduce using rule 14 (element -> assignment .)
    CONTINUE        reduce using rule 14 (element -> assignment .)
    INTERFACE       reduce using rule 14 (element -> assignment .)
    IDENTIFIER      reduce using rule 14 (element -> assignment .)
    LBRACKET        reduce using rule 14 (element -> assignment .)
    PROMPT          reduce using rule 14 (element -> assignment .)
    NOT             reduce using rule 14 (element -> assignment .)
    LPAREN          reduce using rule 14 (element -> assignment .)
    NUMBER          reduce using rule 14 (element -> assignment .)
    FLOAT           reduce using rule 14 (element -> assignment .)
    STRING          reduce using rule 14 (element -> assignment .)
    TRUE            reduce using rule 14 (element -> assignment .)
    FALSE           reduce using rule 14 (element -> assignment .)
    PLUSPLUS        reduce using rule 14 (element -> assignment .)
    MINUSMINUS      reduce using rule 14 (element -> assignment .)
    CONSOLE         reduce using rule 14 (element -> assignment .)
    VAR             reduce using rule 14 (element -> assignment .)
    FOR             reduce using rule 14 (element -> assignment .)
    $end            reduce using rule 14 (element -> assignment .)


state 15

    (15) element -> expression . SEMICOLON
    (107) statement -> expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 16

    (16) element -> consolelog .
    (106) statement -> consolelog .

  ! reduce/reduce conflict for LET resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CONST resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for ASYNC resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for ENUM resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for IF resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for SWITCH resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CLASS resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for LBRACE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for BREAK resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for PROMPT resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for NOT resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for LPAREN resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for NUMBER resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FLOAT resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for STRING resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for TRUE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FALSE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for $end resolved using rule 16 (element -> consolelog .)
    LET             reduce using rule 16 (element -> consolelog .)
    FUNCTION        reduce using rule 16 (element -> consolelog .)
    CONST           reduce using rule 16 (element -> consolelog .)
    ASYNC           reduce using rule 16 (element -> consolelog .)
    ENUM            reduce using rule 16 (element -> consolelog .)
    IF              reduce using rule 16 (element -> consolelog .)
    SWITCH          reduce using rule 16 (element -> consolelog .)
    WHILE           reduce using rule 16 (element -> consolelog .)
    CLASS           reduce using rule 16 (element -> consolelog .)
    RETURN          reduce using rule 16 (element -> consolelog .)
    LBRACE          reduce using rule 16 (element -> consolelog .)
    BREAK           reduce using rule 16 (element -> consolelog .)
    CONTINUE        reduce using rule 16 (element -> consolelog .)
    INTERFACE       reduce using rule 16 (element -> consolelog .)
    IDENTIFIER      reduce using rule 16 (element -> consolelog .)
    LBRACKET        reduce using rule 16 (element -> consolelog .)
    PROMPT          reduce using rule 16 (element -> consolelog .)
    NOT             reduce using rule 16 (element -> consolelog .)
    LPAREN          reduce using rule 16 (element -> consolelog .)
    NUMBER          reduce using rule 16 (element -> consolelog .)
    FLOAT           reduce using rule 16 (element -> consolelog .)
    STRING          reduce using rule 16 (element -> consolelog .)
    TRUE            reduce using rule 16 (element -> consolelog .)
    FALSE           reduce using rule 16 (element -> consolelog .)
    PLUSPLUS        reduce using rule 16 (element -> consolelog .)
    MINUSMINUS      reduce using rule 16 (element -> consolelog .)
    CONSOLE         reduce using rule 16 (element -> consolelog .)
    VAR             reduce using rule 16 (element -> consolelog .)
    FOR             reduce using rule 16 (element -> consolelog .)
    $end            reduce using rule 16 (element -> consolelog .)

  ! LET             [ reduce using rule 106 (statement -> consolelog .) ]
  ! FUNCTION        [ reduce using rule 106 (statement -> consolelog .) ]
  ! CONST           [ reduce using rule 106 (statement -> consolelog .) ]
  ! ASYNC           [ reduce using rule 106 (statement -> consolelog .) ]
  ! ENUM            [ reduce using rule 106 (statement -> consolelog .) ]
  ! IF              [ reduce using rule 106 (statement -> consolelog .) ]
  ! SWITCH          [ reduce using rule 106 (statement -> consolelog .) ]
  ! WHILE           [ reduce using rule 106 (statement -> consolelog .) ]
  ! CLASS           [ reduce using rule 106 (statement -> consolelog .) ]
  ! RETURN          [ reduce using rule 106 (statement -> consolelog .) ]
  ! LBRACE          [ reduce using rule 106 (statement -> consolelog .) ]
  ! BREAK           [ reduce using rule 106 (statement -> consolelog .) ]
  ! CONTINUE        [ reduce using rule 106 (statement -> consolelog .) ]
  ! INTERFACE       [ reduce using rule 106 (statement -> consolelog .) ]
  ! IDENTIFIER      [ reduce using rule 106 (statement -> consolelog .) ]
  ! LBRACKET        [ reduce using rule 106 (statement -> consolelog .) ]
  ! PROMPT          [ reduce using rule 106 (statement -> consolelog .) ]
  ! NOT             [ reduce using rule 106 (statement -> consolelog .) ]
  ! LPAREN          [ reduce using rule 106 (statement -> consolelog .) ]
  ! NUMBER          [ reduce using rule 106 (statement -> consolelog .) ]
  ! FLOAT           [ reduce using rule 106 (statement -> consolelog .) ]
  ! STRING          [ reduce using rule 106 (statement -> consolelog .) ]
  ! TRUE            [ reduce using rule 106 (statement -> consolelog .) ]
  ! FALSE           [ reduce using rule 106 (statement -> consolelog .) ]
  ! PLUSPLUS        [ reduce using rule 106 (statement -> consolelog .) ]
  ! MINUSMINUS      [ reduce using rule 106 (statement -> consolelog .) ]
  ! CONSOLE         [ reduce using rule 106 (statement -> consolelog .) ]
  ! VAR             [ reduce using rule 106 (statement -> consolelog .) ]
  ! FOR             [ reduce using rule 106 (statement -> consolelog .) ]
  ! $end            [ reduce using rule 106 (statement -> consolelog .) ]


state 17

    (18) letAssignment -> LET . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET . IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> LET . IDENTIFIER COLON type SEMICOLON
    (21) declaracion -> LET . IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    IDENTIFIER      shift and go to state 75


state 18

    (17) assignment -> IDENTIFIER . EQUAL expression SEMICOLON
    (82) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (86) expression -> IDENTIFIER .

    EQUAL           shift and go to state 76
    LPAREN          shift and go to state 77
    SEMICOLON       reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 86 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 86 (expression -> IDENTIFIER .)
    DIV             reduce using rule 86 (expression -> IDENTIFIER .)
    MOD             reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 86 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    POT             reduce using rule 86 (expression -> IDENTIFIER .)
    AND             reduce using rule 86 (expression -> IDENTIFIER .)
    OR              reduce using rule 86 (expression -> IDENTIFIER .)
    EQ              reduce using rule 86 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 86 (expression -> IDENTIFIER .)
    LT              reduce using rule 86 (expression -> IDENTIFIER .)
    GT              reduce using rule 86 (expression -> IDENTIFIER .)
    LE              reduce using rule 86 (expression -> IDENTIFIER .)
    GE              reduce using rule 86 (expression -> IDENTIFIER .)
    DOT             reduce using rule 86 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 86 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 86 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 86 (expression -> IDENTIFIER .)


state 19

    (49) expression -> LBRACKET . expression COMMA expression RBRACKET
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 78

state 20

    (41) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    IDENTIFIER      shift and go to state 81


state 21

    (79) expression -> LPAREN . expression RPAREN
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 82

state 22

    (98) statement -> LBRACE . instruction_list RBRACE
    (112) statement -> LBRACE . RBRACE
    (148) expression -> LBRACE . object_properties RBRACE
    (113) instruction_list -> . instruction_list statement
    (114) instruction_list -> . statement
    (115) instruction_list -> . empty
    (149) object_properties -> . object_property
    (150) object_properties -> . object_property COMMA object_properties
    (151) object_properties -> . empty
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (116) empty -> .
    (152) object_property -> . IDENTIFIER COLON expression
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          shift and go to state 84
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    IDENTIFIER      shift and go to state 99
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! RETURN          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! ASYNC           [ reduce using rule 116 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 116 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 116 (empty -> .) ]
  ! PROMPT          [ reduce using rule 116 (empty -> .) ]
  ! NOT             [ reduce using rule 116 (empty -> .) ]
  ! LPAREN          [ reduce using rule 116 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]
  ! NUMBER          [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! TRUE            [ reduce using rule 116 (empty -> .) ]
  ! FALSE           [ reduce using rule 116 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 116 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]

    instruction_list               shift and go to state 83
    object_properties              shift and go to state 85
    statement                      shift and go to state 86
    empty                          shift and go to state 87
    object_property                shift and go to state 88
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 23

    (142) arrow_function -> CONST . IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (117) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 101


state 24

    (138) async_function -> ASYNC . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    FUNCTION        shift and go to state 102


state 25

    (135) enum_definition -> ENUM . IDENTIFIER LBRACE enum_members RBRACE

    IDENTIFIER      shift and go to state 103


state 26

    (94) controlEstructure -> IF . LPAREN expression RPAREN statement
    (95) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 104


state 27

    (127) controlEstructure -> SWITCH . LPAREN expression RPAREN LBRACE case_block RBRACE

    LPAREN          shift and go to state 105


state 28

    (139) controlEstructure -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 106


state 29

    (119) class_definition -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 107


state 30

    (42) statement -> RETURN . expression SEMICOLON
    (110) statement -> RETURN . SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    SEMICOLON       shift and go to state 109
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 108

state 31

    (100) statement -> varAssignment .

    LET             reduce using rule 100 (statement -> varAssignment .)
    FUNCTION        reduce using rule 100 (statement -> varAssignment .)
    CONST           reduce using rule 100 (statement -> varAssignment .)
    ASYNC           reduce using rule 100 (statement -> varAssignment .)
    ENUM            reduce using rule 100 (statement -> varAssignment .)
    IF              reduce using rule 100 (statement -> varAssignment .)
    SWITCH          reduce using rule 100 (statement -> varAssignment .)
    WHILE           reduce using rule 100 (statement -> varAssignment .)
    CLASS           reduce using rule 100 (statement -> varAssignment .)
    RETURN          reduce using rule 100 (statement -> varAssignment .)
    LBRACE          reduce using rule 100 (statement -> varAssignment .)
    BREAK           reduce using rule 100 (statement -> varAssignment .)
    CONTINUE        reduce using rule 100 (statement -> varAssignment .)
    INTERFACE       reduce using rule 100 (statement -> varAssignment .)
    IDENTIFIER      reduce using rule 100 (statement -> varAssignment .)
    LBRACKET        reduce using rule 100 (statement -> varAssignment .)
    PROMPT          reduce using rule 100 (statement -> varAssignment .)
    NOT             reduce using rule 100 (statement -> varAssignment .)
    LPAREN          reduce using rule 100 (statement -> varAssignment .)
    NUMBER          reduce using rule 100 (statement -> varAssignment .)
    FLOAT           reduce using rule 100 (statement -> varAssignment .)
    STRING          reduce using rule 100 (statement -> varAssignment .)
    TRUE            reduce using rule 100 (statement -> varAssignment .)
    FALSE           reduce using rule 100 (statement -> varAssignment .)
    PLUSPLUS        reduce using rule 100 (statement -> varAssignment .)
    MINUSMINUS      reduce using rule 100 (statement -> varAssignment .)
    CONSOLE         reduce using rule 100 (statement -> varAssignment .)
    VAR             reduce using rule 100 (statement -> varAssignment .)
    FOR             reduce using rule 100 (statement -> varAssignment .)
    $end            reduce using rule 100 (statement -> varAssignment .)
    RBRACE          reduce using rule 100 (statement -> varAssignment .)
    ELSE            reduce using rule 100 (statement -> varAssignment .)
    CASE            reduce using rule 100 (statement -> varAssignment .)
    DEFAULT         reduce using rule 100 (statement -> varAssignment .)


state 32

    (109) statement -> forEstructure .

    LET             reduce using rule 109 (statement -> forEstructure .)
    FUNCTION        reduce using rule 109 (statement -> forEstructure .)
    CONST           reduce using rule 109 (statement -> forEstructure .)
    ASYNC           reduce using rule 109 (statement -> forEstructure .)
    ENUM            reduce using rule 109 (statement -> forEstructure .)
    IF              reduce using rule 109 (statement -> forEstructure .)
    SWITCH          reduce using rule 109 (statement -> forEstructure .)
    WHILE           reduce using rule 109 (statement -> forEstructure .)
    CLASS           reduce using rule 109 (statement -> forEstructure .)
    RETURN          reduce using rule 109 (statement -> forEstructure .)
    LBRACE          reduce using rule 109 (statement -> forEstructure .)
    BREAK           reduce using rule 109 (statement -> forEstructure .)
    CONTINUE        reduce using rule 109 (statement -> forEstructure .)
    INTERFACE       reduce using rule 109 (statement -> forEstructure .)
    IDENTIFIER      reduce using rule 109 (statement -> forEstructure .)
    LBRACKET        reduce using rule 109 (statement -> forEstructure .)
    PROMPT          reduce using rule 109 (statement -> forEstructure .)
    NOT             reduce using rule 109 (statement -> forEstructure .)
    LPAREN          reduce using rule 109 (statement -> forEstructure .)
    NUMBER          reduce using rule 109 (statement -> forEstructure .)
    FLOAT           reduce using rule 109 (statement -> forEstructure .)
    STRING          reduce using rule 109 (statement -> forEstructure .)
    TRUE            reduce using rule 109 (statement -> forEstructure .)
    FALSE           reduce using rule 109 (statement -> forEstructure .)
    PLUSPLUS        reduce using rule 109 (statement -> forEstructure .)
    MINUSMINUS      reduce using rule 109 (statement -> forEstructure .)
    CONSOLE         reduce using rule 109 (statement -> forEstructure .)
    VAR             reduce using rule 109 (statement -> forEstructure .)
    FOR             reduce using rule 109 (statement -> forEstructure .)
    $end            reduce using rule 109 (statement -> forEstructure .)
    RBRACE          reduce using rule 109 (statement -> forEstructure .)
    ELSE            reduce using rule 109 (statement -> forEstructure .)
    CASE            reduce using rule 109 (statement -> forEstructure .)
    DEFAULT         reduce using rule 109 (statement -> forEstructure .)


state 33

    (133) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 110


state 34

    (134) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 111


state 35

    (143) interface -> INTERFACE . IDENTIFIER LBRACE interface_body RBRACE

    IDENTIFIER      shift and go to state 112


state 36

    (77) expression -> PROMPT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 113


state 37

    (85) expression -> STRING .

    SEMICOLON       reduce using rule 85 (expression -> STRING .)
    PLUS            reduce using rule 85 (expression -> STRING .)
    MINUS           reduce using rule 85 (expression -> STRING .)
    TIMES           reduce using rule 85 (expression -> STRING .)
    DIV             reduce using rule 85 (expression -> STRING .)
    MOD             reduce using rule 85 (expression -> STRING .)
    PLUS_ASSIGN     reduce using rule 85 (expression -> STRING .)
    MINUS_ASSIGN    reduce using rule 85 (expression -> STRING .)
    MULT_ASSIGN     reduce using rule 85 (expression -> STRING .)
    DIV_ASSIGN      reduce using rule 85 (expression -> STRING .)
    MOD_ASSIGN      reduce using rule 85 (expression -> STRING .)
    POT             reduce using rule 85 (expression -> STRING .)
    AND             reduce using rule 85 (expression -> STRING .)
    OR              reduce using rule 85 (expression -> STRING .)
    EQ              reduce using rule 85 (expression -> STRING .)
    NEQ             reduce using rule 85 (expression -> STRING .)
    STRICT_EQ       reduce using rule 85 (expression -> STRING .)
    STRICT_NEQ      reduce using rule 85 (expression -> STRING .)
    LT              reduce using rule 85 (expression -> STRING .)
    GT              reduce using rule 85 (expression -> STRING .)
    LE              reduce using rule 85 (expression -> STRING .)
    GE              reduce using rule 85 (expression -> STRING .)
    DOT             reduce using rule 85 (expression -> STRING .)
    LBRACKET        reduce using rule 85 (expression -> STRING .)
    PLUSPLUS        reduce using rule 85 (expression -> STRING .)
    MINUSMINUS      reduce using rule 85 (expression -> STRING .)
    COMMA           reduce using rule 85 (expression -> STRING .)
    RPAREN          reduce using rule 85 (expression -> STRING .)
    RBRACKET        reduce using rule 85 (expression -> STRING .)
    RBRACE          reduce using rule 85 (expression -> STRING .)
    COLON           reduce using rule 85 (expression -> STRING .)


state 38

    (78) expression -> NOT . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 114

state 39

    (83) expression -> NUMBER .

    SEMICOLON       reduce using rule 83 (expression -> NUMBER .)
    PLUS            reduce using rule 83 (expression -> NUMBER .)
    MINUS           reduce using rule 83 (expression -> NUMBER .)
    TIMES           reduce using rule 83 (expression -> NUMBER .)
    DIV             reduce using rule 83 (expression -> NUMBER .)
    MOD             reduce using rule 83 (expression -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 83 (expression -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 83 (expression -> NUMBER .)
    MULT_ASSIGN     reduce using rule 83 (expression -> NUMBER .)
    DIV_ASSIGN      reduce using rule 83 (expression -> NUMBER .)
    MOD_ASSIGN      reduce using rule 83 (expression -> NUMBER .)
    POT             reduce using rule 83 (expression -> NUMBER .)
    AND             reduce using rule 83 (expression -> NUMBER .)
    OR              reduce using rule 83 (expression -> NUMBER .)
    EQ              reduce using rule 83 (expression -> NUMBER .)
    NEQ             reduce using rule 83 (expression -> NUMBER .)
    STRICT_EQ       reduce using rule 83 (expression -> NUMBER .)
    STRICT_NEQ      reduce using rule 83 (expression -> NUMBER .)
    LT              reduce using rule 83 (expression -> NUMBER .)
    GT              reduce using rule 83 (expression -> NUMBER .)
    LE              reduce using rule 83 (expression -> NUMBER .)
    GE              reduce using rule 83 (expression -> NUMBER .)
    DOT             reduce using rule 83 (expression -> NUMBER .)
    LBRACKET        reduce using rule 83 (expression -> NUMBER .)
    PLUSPLUS        reduce using rule 83 (expression -> NUMBER .)
    MINUSMINUS      reduce using rule 83 (expression -> NUMBER .)
    COMMA           reduce using rule 83 (expression -> NUMBER .)
    RPAREN          reduce using rule 83 (expression -> NUMBER .)
    RBRACKET        reduce using rule 83 (expression -> NUMBER .)
    RBRACE          reduce using rule 83 (expression -> NUMBER .)
    COLON           reduce using rule 83 (expression -> NUMBER .)


state 40

    (84) expression -> FLOAT .

    SEMICOLON       reduce using rule 84 (expression -> FLOAT .)
    PLUS            reduce using rule 84 (expression -> FLOAT .)
    MINUS           reduce using rule 84 (expression -> FLOAT .)
    TIMES           reduce using rule 84 (expression -> FLOAT .)
    DIV             reduce using rule 84 (expression -> FLOAT .)
    MOD             reduce using rule 84 (expression -> FLOAT .)
    PLUS_ASSIGN     reduce using rule 84 (expression -> FLOAT .)
    MINUS_ASSIGN    reduce using rule 84 (expression -> FLOAT .)
    MULT_ASSIGN     reduce using rule 84 (expression -> FLOAT .)
    DIV_ASSIGN      reduce using rule 84 (expression -> FLOAT .)
    MOD_ASSIGN      reduce using rule 84 (expression -> FLOAT .)
    POT             reduce using rule 84 (expression -> FLOAT .)
    AND             reduce using rule 84 (expression -> FLOAT .)
    OR              reduce using rule 84 (expression -> FLOAT .)
    EQ              reduce using rule 84 (expression -> FLOAT .)
    NEQ             reduce using rule 84 (expression -> FLOAT .)
    STRICT_EQ       reduce using rule 84 (expression -> FLOAT .)
    STRICT_NEQ      reduce using rule 84 (expression -> FLOAT .)
    LT              reduce using rule 84 (expression -> FLOAT .)
    GT              reduce using rule 84 (expression -> FLOAT .)
    LE              reduce using rule 84 (expression -> FLOAT .)
    GE              reduce using rule 84 (expression -> FLOAT .)
    DOT             reduce using rule 84 (expression -> FLOAT .)
    LBRACKET        reduce using rule 84 (expression -> FLOAT .)
    PLUSPLUS        reduce using rule 84 (expression -> FLOAT .)
    MINUSMINUS      reduce using rule 84 (expression -> FLOAT .)
    COMMA           reduce using rule 84 (expression -> FLOAT .)
    RPAREN          reduce using rule 84 (expression -> FLOAT .)
    RBRACKET        reduce using rule 84 (expression -> FLOAT .)
    RBRACE          reduce using rule 84 (expression -> FLOAT .)
    COLON           reduce using rule 84 (expression -> FLOAT .)


state 41

    (87) expression -> TRUE .

    SEMICOLON       reduce using rule 87 (expression -> TRUE .)
    PLUS            reduce using rule 87 (expression -> TRUE .)
    MINUS           reduce using rule 87 (expression -> TRUE .)
    TIMES           reduce using rule 87 (expression -> TRUE .)
    DIV             reduce using rule 87 (expression -> TRUE .)
    MOD             reduce using rule 87 (expression -> TRUE .)
    PLUS_ASSIGN     reduce using rule 87 (expression -> TRUE .)
    MINUS_ASSIGN    reduce using rule 87 (expression -> TRUE .)
    MULT_ASSIGN     reduce using rule 87 (expression -> TRUE .)
    DIV_ASSIGN      reduce using rule 87 (expression -> TRUE .)
    MOD_ASSIGN      reduce using rule 87 (expression -> TRUE .)
    POT             reduce using rule 87 (expression -> TRUE .)
    AND             reduce using rule 87 (expression -> TRUE .)
    OR              reduce using rule 87 (expression -> TRUE .)
    EQ              reduce using rule 87 (expression -> TRUE .)
    NEQ             reduce using rule 87 (expression -> TRUE .)
    STRICT_EQ       reduce using rule 87 (expression -> TRUE .)
    STRICT_NEQ      reduce using rule 87 (expression -> TRUE .)
    LT              reduce using rule 87 (expression -> TRUE .)
    GT              reduce using rule 87 (expression -> TRUE .)
    LE              reduce using rule 87 (expression -> TRUE .)
    GE              reduce using rule 87 (expression -> TRUE .)
    DOT             reduce using rule 87 (expression -> TRUE .)
    LBRACKET        reduce using rule 87 (expression -> TRUE .)
    PLUSPLUS        reduce using rule 87 (expression -> TRUE .)
    MINUSMINUS      reduce using rule 87 (expression -> TRUE .)
    COMMA           reduce using rule 87 (expression -> TRUE .)
    RPAREN          reduce using rule 87 (expression -> TRUE .)
    RBRACKET        reduce using rule 87 (expression -> TRUE .)
    RBRACE          reduce using rule 87 (expression -> TRUE .)
    COLON           reduce using rule 87 (expression -> TRUE .)


state 42

    (88) expression -> FALSE .

    SEMICOLON       reduce using rule 88 (expression -> FALSE .)
    PLUS            reduce using rule 88 (expression -> FALSE .)
    MINUS           reduce using rule 88 (expression -> FALSE .)
    TIMES           reduce using rule 88 (expression -> FALSE .)
    DIV             reduce using rule 88 (expression -> FALSE .)
    MOD             reduce using rule 88 (expression -> FALSE .)
    PLUS_ASSIGN     reduce using rule 88 (expression -> FALSE .)
    MINUS_ASSIGN    reduce using rule 88 (expression -> FALSE .)
    MULT_ASSIGN     reduce using rule 88 (expression -> FALSE .)
    DIV_ASSIGN      reduce using rule 88 (expression -> FALSE .)
    MOD_ASSIGN      reduce using rule 88 (expression -> FALSE .)
    POT             reduce using rule 88 (expression -> FALSE .)
    AND             reduce using rule 88 (expression -> FALSE .)
    OR              reduce using rule 88 (expression -> FALSE .)
    EQ              reduce using rule 88 (expression -> FALSE .)
    NEQ             reduce using rule 88 (expression -> FALSE .)
    STRICT_EQ       reduce using rule 88 (expression -> FALSE .)
    STRICT_NEQ      reduce using rule 88 (expression -> FALSE .)
    LT              reduce using rule 88 (expression -> FALSE .)
    GT              reduce using rule 88 (expression -> FALSE .)
    LE              reduce using rule 88 (expression -> FALSE .)
    GE              reduce using rule 88 (expression -> FALSE .)
    DOT             reduce using rule 88 (expression -> FALSE .)
    LBRACKET        reduce using rule 88 (expression -> FALSE .)
    PLUSPLUS        reduce using rule 88 (expression -> FALSE .)
    MINUSMINUS      reduce using rule 88 (expression -> FALSE .)
    COMMA           reduce using rule 88 (expression -> FALSE .)
    RPAREN          reduce using rule 88 (expression -> FALSE .)
    RBRACKET        reduce using rule 88 (expression -> FALSE .)
    RBRACE          reduce using rule 88 (expression -> FALSE .)
    COLON           reduce using rule 88 (expression -> FALSE .)


state 43

    (91) expression -> PLUSPLUS . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 115

state 44

    (92) expression -> MINUSMINUS . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 116

state 45

    (93) consolelog -> CONSOLE . DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON

    DOT             shift and go to state 117


state 46

    (140) varAssignment -> VAR . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> VAR . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 118


state 47

    (28) forEstructure -> FOR . LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> FOR . LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    LPAREN          shift and go to state 119


state 48

    (1) program -> program element .

    LET             reduce using rule 1 (program -> program element .)
    FUNCTION        reduce using rule 1 (program -> program element .)
    CONST           reduce using rule 1 (program -> program element .)
    ASYNC           reduce using rule 1 (program -> program element .)
    ENUM            reduce using rule 1 (program -> program element .)
    IF              reduce using rule 1 (program -> program element .)
    SWITCH          reduce using rule 1 (program -> program element .)
    WHILE           reduce using rule 1 (program -> program element .)
    CLASS           reduce using rule 1 (program -> program element .)
    RETURN          reduce using rule 1 (program -> program element .)
    LBRACE          reduce using rule 1 (program -> program element .)
    BREAK           reduce using rule 1 (program -> program element .)
    CONTINUE        reduce using rule 1 (program -> program element .)
    INTERFACE       reduce using rule 1 (program -> program element .)
    IDENTIFIER      reduce using rule 1 (program -> program element .)
    LBRACKET        reduce using rule 1 (program -> program element .)
    PROMPT          reduce using rule 1 (program -> program element .)
    NOT             reduce using rule 1 (program -> program element .)
    LPAREN          reduce using rule 1 (program -> program element .)
    NUMBER          reduce using rule 1 (program -> program element .)
    FLOAT           reduce using rule 1 (program -> program element .)
    STRING          reduce using rule 1 (program -> program element .)
    TRUE            reduce using rule 1 (program -> program element .)
    FALSE           reduce using rule 1 (program -> program element .)
    PLUSPLUS        reduce using rule 1 (program -> program element .)
    MINUSMINUS      reduce using rule 1 (program -> program element .)
    CONSOLE         reduce using rule 1 (program -> program element .)
    VAR             reduce using rule 1 (program -> program element .)
    FOR             reduce using rule 1 (program -> program element .)
    $end            reduce using rule 1 (program -> program element .)


state 49

    (15) element -> expression SEMICOLON .
    (107) statement -> expression SEMICOLON .

  ! reduce/reduce conflict for LET resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for ASYNC resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for ENUM resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LBRACE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for PROMPT resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for VAR resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 15 (element -> expression SEMICOLON .)
    LET             reduce using rule 15 (element -> expression SEMICOLON .)
    FUNCTION        reduce using rule 15 (element -> expression SEMICOLON .)
    CONST           reduce using rule 15 (element -> expression SEMICOLON .)
    ASYNC           reduce using rule 15 (element -> expression SEMICOLON .)
    ENUM            reduce using rule 15 (element -> expression SEMICOLON .)
    IF              reduce using rule 15 (element -> expression SEMICOLON .)
    SWITCH          reduce using rule 15 (element -> expression SEMICOLON .)
    WHILE           reduce using rule 15 (element -> expression SEMICOLON .)
    CLASS           reduce using rule 15 (element -> expression SEMICOLON .)
    RETURN          reduce using rule 15 (element -> expression SEMICOLON .)
    LBRACE          reduce using rule 15 (element -> expression SEMICOLON .)
    BREAK           reduce using rule 15 (element -> expression SEMICOLON .)
    CONTINUE        reduce using rule 15 (element -> expression SEMICOLON .)
    INTERFACE       reduce using rule 15 (element -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 15 (element -> expression SEMICOLON .)
    LBRACKET        reduce using rule 15 (element -> expression SEMICOLON .)
    PROMPT          reduce using rule 15 (element -> expression SEMICOLON .)
    NOT             reduce using rule 15 (element -> expression SEMICOLON .)
    LPAREN          reduce using rule 15 (element -> expression SEMICOLON .)
    NUMBER          reduce using rule 15 (element -> expression SEMICOLON .)
    FLOAT           reduce using rule 15 (element -> expression SEMICOLON .)
    STRING          reduce using rule 15 (element -> expression SEMICOLON .)
    TRUE            reduce using rule 15 (element -> expression SEMICOLON .)
    FALSE           reduce using rule 15 (element -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 15 (element -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 15 (element -> expression SEMICOLON .)
    CONSOLE         reduce using rule 15 (element -> expression SEMICOLON .)
    VAR             reduce using rule 15 (element -> expression SEMICOLON .)
    FOR             reduce using rule 15 (element -> expression SEMICOLON .)
    $end            reduce using rule 15 (element -> expression SEMICOLON .)

  ! LET             [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! CONST           [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! ASYNC           [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! ENUM            [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! IF              [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! WHILE           [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! CLASS           [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! RETURN          [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! LBRACE          [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! BREAK           [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! INTERFACE       [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! IDENTIFIER      [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! LBRACKET        [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! PROMPT          [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! NOT             [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! STRING          [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! TRUE            [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! FALSE           [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! PLUSPLUS        [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! MINUSMINUS      [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! CONSOLE         [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! VAR             [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! FOR             [ reduce using rule 107 (statement -> expression SEMICOLON .) ]
  ! $end            [ reduce using rule 107 (statement -> expression SEMICOLON .) ]


state 50

    (56) expression -> expression PLUS . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 120

state 51

    (57) expression -> expression MINUS . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 121

state 52

    (58) expression -> expression TIMES . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 122

state 53

    (59) expression -> expression DIV . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 123

state 54

    (60) expression -> expression MOD . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 124

state 55

    (61) expression -> expression PLUS_ASSIGN . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 125

state 56

    (62) expression -> expression MINUS_ASSIGN . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 126

state 57

    (63) expression -> expression MULT_ASSIGN . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 127

state 58

    (64) expression -> expression DIV_ASSIGN . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 128

state 59

    (65) expression -> expression MOD_ASSIGN . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 129

state 60

    (66) expression -> expression POT . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 130

state 61

    (67) expression -> expression AND . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 131

state 62

    (68) expression -> expression OR . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 132

state 63

    (69) expression -> expression EQ . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 133

state 64

    (70) expression -> expression NEQ . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 134

state 65

    (71) expression -> expression STRICT_EQ . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 135

state 66

    (72) expression -> expression STRICT_NEQ . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 136

state 67

    (73) expression -> expression LT . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 137

state 68

    (74) expression -> expression GT . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 138

state 69

    (75) expression -> expression LE . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 139

state 70

    (76) expression -> expression GE . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 140

state 71

    (80) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 141


state 72

    (81) expression -> expression LBRACKET . expression RBRACKET
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 142

state 73

    (89) expression -> expression PLUSPLUS .

    SEMICOLON       reduce using rule 89 (expression -> expression PLUSPLUS .)
    PLUS            reduce using rule 89 (expression -> expression PLUSPLUS .)
    MINUS           reduce using rule 89 (expression -> expression PLUSPLUS .)
    TIMES           reduce using rule 89 (expression -> expression PLUSPLUS .)
    DIV             reduce using rule 89 (expression -> expression PLUSPLUS .)
    MOD             reduce using rule 89 (expression -> expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 89 (expression -> expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 89 (expression -> expression PLUSPLUS .)
    MULT_ASSIGN     reduce using rule 89 (expression -> expression PLUSPLUS .)
    DIV_ASSIGN      reduce using rule 89 (expression -> expression PLUSPLUS .)
    MOD_ASSIGN      reduce using rule 89 (expression -> expression PLUSPLUS .)
    POT             reduce using rule 89 (expression -> expression PLUSPLUS .)
    AND             reduce using rule 89 (expression -> expression PLUSPLUS .)
    OR              reduce using rule 89 (expression -> expression PLUSPLUS .)
    EQ              reduce using rule 89 (expression -> expression PLUSPLUS .)
    NEQ             reduce using rule 89 (expression -> expression PLUSPLUS .)
    STRICT_EQ       reduce using rule 89 (expression -> expression PLUSPLUS .)
    STRICT_NEQ      reduce using rule 89 (expression -> expression PLUSPLUS .)
    LT              reduce using rule 89 (expression -> expression PLUSPLUS .)
    GT              reduce using rule 89 (expression -> expression PLUSPLUS .)
    LE              reduce using rule 89 (expression -> expression PLUSPLUS .)
    GE              reduce using rule 89 (expression -> expression PLUSPLUS .)
    DOT             reduce using rule 89 (expression -> expression PLUSPLUS .)
    LBRACKET        reduce using rule 89 (expression -> expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 89 (expression -> expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 89 (expression -> expression PLUSPLUS .)
    COMMA           reduce using rule 89 (expression -> expression PLUSPLUS .)
    RPAREN          reduce using rule 89 (expression -> expression PLUSPLUS .)
    RBRACKET        reduce using rule 89 (expression -> expression PLUSPLUS .)
    RBRACE          reduce using rule 89 (expression -> expression PLUSPLUS .)
    COLON           reduce using rule 89 (expression -> expression PLUSPLUS .)


state 74

    (90) expression -> expression MINUSMINUS .

    SEMICOLON       reduce using rule 90 (expression -> expression MINUSMINUS .)
    PLUS            reduce using rule 90 (expression -> expression MINUSMINUS .)
    MINUS           reduce using rule 90 (expression -> expression MINUSMINUS .)
    TIMES           reduce using rule 90 (expression -> expression MINUSMINUS .)
    DIV             reduce using rule 90 (expression -> expression MINUSMINUS .)
    MOD             reduce using rule 90 (expression -> expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 90 (expression -> expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 90 (expression -> expression MINUSMINUS .)
    MULT_ASSIGN     reduce using rule 90 (expression -> expression MINUSMINUS .)
    DIV_ASSIGN      reduce using rule 90 (expression -> expression MINUSMINUS .)
    MOD_ASSIGN      reduce using rule 90 (expression -> expression MINUSMINUS .)
    POT             reduce using rule 90 (expression -> expression MINUSMINUS .)
    AND             reduce using rule 90 (expression -> expression MINUSMINUS .)
    OR              reduce using rule 90 (expression -> expression MINUSMINUS .)
    EQ              reduce using rule 90 (expression -> expression MINUSMINUS .)
    NEQ             reduce using rule 90 (expression -> expression MINUSMINUS .)
    STRICT_EQ       reduce using rule 90 (expression -> expression MINUSMINUS .)
    STRICT_NEQ      reduce using rule 90 (expression -> expression MINUSMINUS .)
    LT              reduce using rule 90 (expression -> expression MINUSMINUS .)
    GT              reduce using rule 90 (expression -> expression MINUSMINUS .)
    LE              reduce using rule 90 (expression -> expression MINUSMINUS .)
    GE              reduce using rule 90 (expression -> expression MINUSMINUS .)
    DOT             reduce using rule 90 (expression -> expression MINUSMINUS .)
    LBRACKET        reduce using rule 90 (expression -> expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 90 (expression -> expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 90 (expression -> expression MINUSMINUS .)
    COMMA           reduce using rule 90 (expression -> expression MINUSMINUS .)
    RPAREN          reduce using rule 90 (expression -> expression MINUSMINUS .)
    RBRACKET        reduce using rule 90 (expression -> expression MINUSMINUS .)
    RBRACE          reduce using rule 90 (expression -> expression MINUSMINUS .)
    COLON           reduce using rule 90 (expression -> expression MINUSMINUS .)


state 75

    (18) letAssignment -> LET IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET IDENTIFIER . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER . COLON type SEMICOLON
    (21) declaracion -> LET IDENTIFIER . COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    COLON           shift and go to state 143
    EQUAL           shift and go to state 144


state 76

    (17) assignment -> IDENTIFIER EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 145

state 77

    (82) expression -> IDENTIFIER LPAREN . lista_expresiones_opt RPAREN
    (22) lista_expresiones_opt -> . lista_expresiones
    (23) lista_expresiones_opt -> . empty
    (24) lista_expresiones -> . expression
    (25) lista_expresiones -> . expression COMMA lista_expresiones
    (116) empty -> .
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    RPAREN          reduce using rule 116 (empty -> .)
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    lista_expresiones_opt          shift and go to state 146
    lista_expresiones              shift and go to state 147
    empty                          shift and go to state 148
    expression                     shift and go to state 149

state 78

    (49) expression -> LBRACKET expression . COMMA expression RBRACKET
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    COMMA           shift and go to state 150
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 79

    (82) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (86) expression -> IDENTIFIER .

    LPAREN          shift and go to state 77
    COMMA           reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 86 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 86 (expression -> IDENTIFIER .)
    DIV             reduce using rule 86 (expression -> IDENTIFIER .)
    MOD             reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 86 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    POT             reduce using rule 86 (expression -> IDENTIFIER .)
    AND             reduce using rule 86 (expression -> IDENTIFIER .)
    OR              reduce using rule 86 (expression -> IDENTIFIER .)
    EQ              reduce using rule 86 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 86 (expression -> IDENTIFIER .)
    LT              reduce using rule 86 (expression -> IDENTIFIER .)
    GT              reduce using rule 86 (expression -> IDENTIFIER .)
    LE              reduce using rule 86 (expression -> IDENTIFIER .)
    GE              reduce using rule 86 (expression -> IDENTIFIER .)
    DOT             reduce using rule 86 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 86 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 86 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 86 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 86 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 86 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 86 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 86 (expression -> IDENTIFIER .)
    COLON           reduce using rule 86 (expression -> IDENTIFIER .)


state 80

    (148) expression -> LBRACE . object_properties RBRACE
    (149) object_properties -> . object_property
    (150) object_properties -> . object_property COMMA object_properties
    (151) object_properties -> . empty
    (152) object_property -> . IDENTIFIER COLON expression
    (116) empty -> .

    IDENTIFIER      shift and go to state 152
    RBRACE          reduce using rule 116 (empty -> .)

    object_properties              shift and go to state 85
    object_property                shift and go to state 88
    empty                          shift and go to state 151

state 81

    (41) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    LPAREN          shift and go to state 153


state 82

    (79) expression -> LPAREN expression . RPAREN
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 154
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 83

    (98) statement -> LBRACE instruction_list . RBRACE
    (113) instruction_list -> instruction_list . statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          shift and go to state 155
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 156
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 84

    (112) statement -> LBRACE RBRACE .

    LET             reduce using rule 112 (statement -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 112 (statement -> LBRACE RBRACE .)
    CONST           reduce using rule 112 (statement -> LBRACE RBRACE .)
    ASYNC           reduce using rule 112 (statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 112 (statement -> LBRACE RBRACE .)
    IF              reduce using rule 112 (statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 112 (statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 112 (statement -> LBRACE RBRACE .)
    CLASS           reduce using rule 112 (statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 112 (statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 112 (statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 112 (statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 112 (statement -> LBRACE RBRACE .)
    INTERFACE       reduce using rule 112 (statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 112 (statement -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 112 (statement -> LBRACE RBRACE .)
    PROMPT          reduce using rule 112 (statement -> LBRACE RBRACE .)
    NOT             reduce using rule 112 (statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 112 (statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 112 (statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 112 (statement -> LBRACE RBRACE .)
    STRING          reduce using rule 112 (statement -> LBRACE RBRACE .)
    TRUE            reduce using rule 112 (statement -> LBRACE RBRACE .)
    FALSE           reduce using rule 112 (statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 112 (statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 112 (statement -> LBRACE RBRACE .)
    CONSOLE         reduce using rule 112 (statement -> LBRACE RBRACE .)
    VAR             reduce using rule 112 (statement -> LBRACE RBRACE .)
    FOR             reduce using rule 112 (statement -> LBRACE RBRACE .)
    $end            reduce using rule 112 (statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 112 (statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 112 (statement -> LBRACE RBRACE .)
    CASE            reduce using rule 112 (statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 112 (statement -> LBRACE RBRACE .)


state 85

    (148) expression -> LBRACE object_properties . RBRACE

    RBRACE          shift and go to state 157


state 86

    (114) instruction_list -> statement .

    RBRACE          reduce using rule 114 (instruction_list -> statement .)
    RETURN          reduce using rule 114 (instruction_list -> statement .)
    LBRACE          reduce using rule 114 (instruction_list -> statement .)
    BREAK           reduce using rule 114 (instruction_list -> statement .)
    CONTINUE        reduce using rule 114 (instruction_list -> statement .)
    LET             reduce using rule 114 (instruction_list -> statement .)
    VAR             reduce using rule 114 (instruction_list -> statement .)
    CONST           reduce using rule 114 (instruction_list -> statement .)
    FUNCTION        reduce using rule 114 (instruction_list -> statement .)
    ASYNC           reduce using rule 114 (instruction_list -> statement .)
    CONSOLE         reduce using rule 114 (instruction_list -> statement .)
    LBRACKET        reduce using rule 114 (instruction_list -> statement .)
    PROMPT          reduce using rule 114 (instruction_list -> statement .)
    NOT             reduce using rule 114 (instruction_list -> statement .)
    LPAREN          reduce using rule 114 (instruction_list -> statement .)
    IDENTIFIER      reduce using rule 114 (instruction_list -> statement .)
    NUMBER          reduce using rule 114 (instruction_list -> statement .)
    FLOAT           reduce using rule 114 (instruction_list -> statement .)
    STRING          reduce using rule 114 (instruction_list -> statement .)
    TRUE            reduce using rule 114 (instruction_list -> statement .)
    FALSE           reduce using rule 114 (instruction_list -> statement .)
    PLUSPLUS        reduce using rule 114 (instruction_list -> statement .)
    MINUSMINUS      reduce using rule 114 (instruction_list -> statement .)
    IF              reduce using rule 114 (instruction_list -> statement .)
    SWITCH          reduce using rule 114 (instruction_list -> statement .)
    WHILE           reduce using rule 114 (instruction_list -> statement .)
    FOR             reduce using rule 114 (instruction_list -> statement .)
    CLASS           reduce using rule 114 (instruction_list -> statement .)
    CASE            reduce using rule 114 (instruction_list -> statement .)
    DEFAULT         reduce using rule 114 (instruction_list -> statement .)


state 87

    (115) instruction_list -> empty .
    (151) object_properties -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 115 (instruction_list -> empty .)
    RBRACE          reduce using rule 115 (instruction_list -> empty .)
    RETURN          reduce using rule 115 (instruction_list -> empty .)
    LBRACE          reduce using rule 115 (instruction_list -> empty .)
    BREAK           reduce using rule 115 (instruction_list -> empty .)
    CONTINUE        reduce using rule 115 (instruction_list -> empty .)
    LET             reduce using rule 115 (instruction_list -> empty .)
    VAR             reduce using rule 115 (instruction_list -> empty .)
    CONST           reduce using rule 115 (instruction_list -> empty .)
    FUNCTION        reduce using rule 115 (instruction_list -> empty .)
    ASYNC           reduce using rule 115 (instruction_list -> empty .)
    CONSOLE         reduce using rule 115 (instruction_list -> empty .)
    LBRACKET        reduce using rule 115 (instruction_list -> empty .)
    PROMPT          reduce using rule 115 (instruction_list -> empty .)
    NOT             reduce using rule 115 (instruction_list -> empty .)
    LPAREN          reduce using rule 115 (instruction_list -> empty .)
    IDENTIFIER      reduce using rule 115 (instruction_list -> empty .)
    NUMBER          reduce using rule 115 (instruction_list -> empty .)
    FLOAT           reduce using rule 115 (instruction_list -> empty .)
    STRING          reduce using rule 115 (instruction_list -> empty .)
    TRUE            reduce using rule 115 (instruction_list -> empty .)
    FALSE           reduce using rule 115 (instruction_list -> empty .)
    PLUSPLUS        reduce using rule 115 (instruction_list -> empty .)
    MINUSMINUS      reduce using rule 115 (instruction_list -> empty .)
    IF              reduce using rule 115 (instruction_list -> empty .)
    SWITCH          reduce using rule 115 (instruction_list -> empty .)
    WHILE           reduce using rule 115 (instruction_list -> empty .)
    FOR             reduce using rule 115 (instruction_list -> empty .)
    CLASS           reduce using rule 115 (instruction_list -> empty .)

  ! RBRACE          [ reduce using rule 151 (object_properties -> empty .) ]


state 88

    (149) object_properties -> object_property .
    (150) object_properties -> object_property . COMMA object_properties

    RBRACE          reduce using rule 149 (object_properties -> object_property .)
    COMMA           shift and go to state 158


state 89

    (107) statement -> expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 159
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 90

    (99) statement -> letAssignment .

    RBRACE          reduce using rule 99 (statement -> letAssignment .)
    RETURN          reduce using rule 99 (statement -> letAssignment .)
    LBRACE          reduce using rule 99 (statement -> letAssignment .)
    BREAK           reduce using rule 99 (statement -> letAssignment .)
    CONTINUE        reduce using rule 99 (statement -> letAssignment .)
    LET             reduce using rule 99 (statement -> letAssignment .)
    VAR             reduce using rule 99 (statement -> letAssignment .)
    CONST           reduce using rule 99 (statement -> letAssignment .)
    FUNCTION        reduce using rule 99 (statement -> letAssignment .)
    ASYNC           reduce using rule 99 (statement -> letAssignment .)
    CONSOLE         reduce using rule 99 (statement -> letAssignment .)
    LBRACKET        reduce using rule 99 (statement -> letAssignment .)
    PROMPT          reduce using rule 99 (statement -> letAssignment .)
    NOT             reduce using rule 99 (statement -> letAssignment .)
    LPAREN          reduce using rule 99 (statement -> letAssignment .)
    IDENTIFIER      reduce using rule 99 (statement -> letAssignment .)
    NUMBER          reduce using rule 99 (statement -> letAssignment .)
    FLOAT           reduce using rule 99 (statement -> letAssignment .)
    STRING          reduce using rule 99 (statement -> letAssignment .)
    TRUE            reduce using rule 99 (statement -> letAssignment .)
    FALSE           reduce using rule 99 (statement -> letAssignment .)
    PLUSPLUS        reduce using rule 99 (statement -> letAssignment .)
    MINUSMINUS      reduce using rule 99 (statement -> letAssignment .)
    IF              reduce using rule 99 (statement -> letAssignment .)
    SWITCH          reduce using rule 99 (statement -> letAssignment .)
    WHILE           reduce using rule 99 (statement -> letAssignment .)
    FOR             reduce using rule 99 (statement -> letAssignment .)
    CLASS           reduce using rule 99 (statement -> letAssignment .)
    ELSE            reduce using rule 99 (statement -> letAssignment .)
    ENUM            reduce using rule 99 (statement -> letAssignment .)
    INTERFACE       reduce using rule 99 (statement -> letAssignment .)
    $end            reduce using rule 99 (statement -> letAssignment .)
    CASE            reduce using rule 99 (statement -> letAssignment .)
    DEFAULT         reduce using rule 99 (statement -> letAssignment .)


state 91

    (101) statement -> constAssignment .

    RBRACE          reduce using rule 101 (statement -> constAssignment .)
    RETURN          reduce using rule 101 (statement -> constAssignment .)
    LBRACE          reduce using rule 101 (statement -> constAssignment .)
    BREAK           reduce using rule 101 (statement -> constAssignment .)
    CONTINUE        reduce using rule 101 (statement -> constAssignment .)
    LET             reduce using rule 101 (statement -> constAssignment .)
    VAR             reduce using rule 101 (statement -> constAssignment .)
    CONST           reduce using rule 101 (statement -> constAssignment .)
    FUNCTION        reduce using rule 101 (statement -> constAssignment .)
    ASYNC           reduce using rule 101 (statement -> constAssignment .)
    CONSOLE         reduce using rule 101 (statement -> constAssignment .)
    LBRACKET        reduce using rule 101 (statement -> constAssignment .)
    PROMPT          reduce using rule 101 (statement -> constAssignment .)
    NOT             reduce using rule 101 (statement -> constAssignment .)
    LPAREN          reduce using rule 101 (statement -> constAssignment .)
    IDENTIFIER      reduce using rule 101 (statement -> constAssignment .)
    NUMBER          reduce using rule 101 (statement -> constAssignment .)
    FLOAT           reduce using rule 101 (statement -> constAssignment .)
    STRING          reduce using rule 101 (statement -> constAssignment .)
    TRUE            reduce using rule 101 (statement -> constAssignment .)
    FALSE           reduce using rule 101 (statement -> constAssignment .)
    PLUSPLUS        reduce using rule 101 (statement -> constAssignment .)
    MINUSMINUS      reduce using rule 101 (statement -> constAssignment .)
    IF              reduce using rule 101 (statement -> constAssignment .)
    SWITCH          reduce using rule 101 (statement -> constAssignment .)
    WHILE           reduce using rule 101 (statement -> constAssignment .)
    FOR             reduce using rule 101 (statement -> constAssignment .)
    CLASS           reduce using rule 101 (statement -> constAssignment .)
    ELSE            reduce using rule 101 (statement -> constAssignment .)
    ENUM            reduce using rule 101 (statement -> constAssignment .)
    INTERFACE       reduce using rule 101 (statement -> constAssignment .)
    $end            reduce using rule 101 (statement -> constAssignment .)
    CASE            reduce using rule 101 (statement -> constAssignment .)
    DEFAULT         reduce using rule 101 (statement -> constAssignment .)


state 92

    (102) statement -> declaracion .

    RBRACE          reduce using rule 102 (statement -> declaracion .)
    RETURN          reduce using rule 102 (statement -> declaracion .)
    LBRACE          reduce using rule 102 (statement -> declaracion .)
    BREAK           reduce using rule 102 (statement -> declaracion .)
    CONTINUE        reduce using rule 102 (statement -> declaracion .)
    LET             reduce using rule 102 (statement -> declaracion .)
    VAR             reduce using rule 102 (statement -> declaracion .)
    CONST           reduce using rule 102 (statement -> declaracion .)
    FUNCTION        reduce using rule 102 (statement -> declaracion .)
    ASYNC           reduce using rule 102 (statement -> declaracion .)
    CONSOLE         reduce using rule 102 (statement -> declaracion .)
    LBRACKET        reduce using rule 102 (statement -> declaracion .)
    PROMPT          reduce using rule 102 (statement -> declaracion .)
    NOT             reduce using rule 102 (statement -> declaracion .)
    LPAREN          reduce using rule 102 (statement -> declaracion .)
    IDENTIFIER      reduce using rule 102 (statement -> declaracion .)
    NUMBER          reduce using rule 102 (statement -> declaracion .)
    FLOAT           reduce using rule 102 (statement -> declaracion .)
    STRING          reduce using rule 102 (statement -> declaracion .)
    TRUE            reduce using rule 102 (statement -> declaracion .)
    FALSE           reduce using rule 102 (statement -> declaracion .)
    PLUSPLUS        reduce using rule 102 (statement -> declaracion .)
    MINUSMINUS      reduce using rule 102 (statement -> declaracion .)
    IF              reduce using rule 102 (statement -> declaracion .)
    SWITCH          reduce using rule 102 (statement -> declaracion .)
    WHILE           reduce using rule 102 (statement -> declaracion .)
    FOR             reduce using rule 102 (statement -> declaracion .)
    CLASS           reduce using rule 102 (statement -> declaracion .)
    ELSE            reduce using rule 102 (statement -> declaracion .)
    ENUM            reduce using rule 102 (statement -> declaracion .)
    INTERFACE       reduce using rule 102 (statement -> declaracion .)
    $end            reduce using rule 102 (statement -> declaracion .)
    CASE            reduce using rule 102 (statement -> declaracion .)
    DEFAULT         reduce using rule 102 (statement -> declaracion .)


state 93

    (103) statement -> function .

    RBRACE          reduce using rule 103 (statement -> function .)
    RETURN          reduce using rule 103 (statement -> function .)
    LBRACE          reduce using rule 103 (statement -> function .)
    BREAK           reduce using rule 103 (statement -> function .)
    CONTINUE        reduce using rule 103 (statement -> function .)
    LET             reduce using rule 103 (statement -> function .)
    VAR             reduce using rule 103 (statement -> function .)
    CONST           reduce using rule 103 (statement -> function .)
    FUNCTION        reduce using rule 103 (statement -> function .)
    ASYNC           reduce using rule 103 (statement -> function .)
    CONSOLE         reduce using rule 103 (statement -> function .)
    LBRACKET        reduce using rule 103 (statement -> function .)
    PROMPT          reduce using rule 103 (statement -> function .)
    NOT             reduce using rule 103 (statement -> function .)
    LPAREN          reduce using rule 103 (statement -> function .)
    IDENTIFIER      reduce using rule 103 (statement -> function .)
    NUMBER          reduce using rule 103 (statement -> function .)
    FLOAT           reduce using rule 103 (statement -> function .)
    STRING          reduce using rule 103 (statement -> function .)
    TRUE            reduce using rule 103 (statement -> function .)
    FALSE           reduce using rule 103 (statement -> function .)
    PLUSPLUS        reduce using rule 103 (statement -> function .)
    MINUSMINUS      reduce using rule 103 (statement -> function .)
    IF              reduce using rule 103 (statement -> function .)
    SWITCH          reduce using rule 103 (statement -> function .)
    WHILE           reduce using rule 103 (statement -> function .)
    FOR             reduce using rule 103 (statement -> function .)
    CLASS           reduce using rule 103 (statement -> function .)
    ELSE            reduce using rule 103 (statement -> function .)
    ENUM            reduce using rule 103 (statement -> function .)
    INTERFACE       reduce using rule 103 (statement -> function .)
    $end            reduce using rule 103 (statement -> function .)
    CASE            reduce using rule 103 (statement -> function .)
    DEFAULT         reduce using rule 103 (statement -> function .)


state 94

    (104) statement -> arrow_function .

    RBRACE          reduce using rule 104 (statement -> arrow_function .)
    RETURN          reduce using rule 104 (statement -> arrow_function .)
    LBRACE          reduce using rule 104 (statement -> arrow_function .)
    BREAK           reduce using rule 104 (statement -> arrow_function .)
    CONTINUE        reduce using rule 104 (statement -> arrow_function .)
    LET             reduce using rule 104 (statement -> arrow_function .)
    VAR             reduce using rule 104 (statement -> arrow_function .)
    CONST           reduce using rule 104 (statement -> arrow_function .)
    FUNCTION        reduce using rule 104 (statement -> arrow_function .)
    ASYNC           reduce using rule 104 (statement -> arrow_function .)
    CONSOLE         reduce using rule 104 (statement -> arrow_function .)
    LBRACKET        reduce using rule 104 (statement -> arrow_function .)
    PROMPT          reduce using rule 104 (statement -> arrow_function .)
    NOT             reduce using rule 104 (statement -> arrow_function .)
    LPAREN          reduce using rule 104 (statement -> arrow_function .)
    IDENTIFIER      reduce using rule 104 (statement -> arrow_function .)
    NUMBER          reduce using rule 104 (statement -> arrow_function .)
    FLOAT           reduce using rule 104 (statement -> arrow_function .)
    STRING          reduce using rule 104 (statement -> arrow_function .)
    TRUE            reduce using rule 104 (statement -> arrow_function .)
    FALSE           reduce using rule 104 (statement -> arrow_function .)
    PLUSPLUS        reduce using rule 104 (statement -> arrow_function .)
    MINUSMINUS      reduce using rule 104 (statement -> arrow_function .)
    IF              reduce using rule 104 (statement -> arrow_function .)
    SWITCH          reduce using rule 104 (statement -> arrow_function .)
    WHILE           reduce using rule 104 (statement -> arrow_function .)
    FOR             reduce using rule 104 (statement -> arrow_function .)
    CLASS           reduce using rule 104 (statement -> arrow_function .)
    ELSE            reduce using rule 104 (statement -> arrow_function .)
    ENUM            reduce using rule 104 (statement -> arrow_function .)
    INTERFACE       reduce using rule 104 (statement -> arrow_function .)
    $end            reduce using rule 104 (statement -> arrow_function .)
    CASE            reduce using rule 104 (statement -> arrow_function .)
    DEFAULT         reduce using rule 104 (statement -> arrow_function .)


state 95

    (105) statement -> async_function .

    RBRACE          reduce using rule 105 (statement -> async_function .)
    RETURN          reduce using rule 105 (statement -> async_function .)
    LBRACE          reduce using rule 105 (statement -> async_function .)
    BREAK           reduce using rule 105 (statement -> async_function .)
    CONTINUE        reduce using rule 105 (statement -> async_function .)
    LET             reduce using rule 105 (statement -> async_function .)
    VAR             reduce using rule 105 (statement -> async_function .)
    CONST           reduce using rule 105 (statement -> async_function .)
    FUNCTION        reduce using rule 105 (statement -> async_function .)
    ASYNC           reduce using rule 105 (statement -> async_function .)
    CONSOLE         reduce using rule 105 (statement -> async_function .)
    LBRACKET        reduce using rule 105 (statement -> async_function .)
    PROMPT          reduce using rule 105 (statement -> async_function .)
    NOT             reduce using rule 105 (statement -> async_function .)
    LPAREN          reduce using rule 105 (statement -> async_function .)
    IDENTIFIER      reduce using rule 105 (statement -> async_function .)
    NUMBER          reduce using rule 105 (statement -> async_function .)
    FLOAT           reduce using rule 105 (statement -> async_function .)
    STRING          reduce using rule 105 (statement -> async_function .)
    TRUE            reduce using rule 105 (statement -> async_function .)
    FALSE           reduce using rule 105 (statement -> async_function .)
    PLUSPLUS        reduce using rule 105 (statement -> async_function .)
    MINUSMINUS      reduce using rule 105 (statement -> async_function .)
    IF              reduce using rule 105 (statement -> async_function .)
    SWITCH          reduce using rule 105 (statement -> async_function .)
    WHILE           reduce using rule 105 (statement -> async_function .)
    FOR             reduce using rule 105 (statement -> async_function .)
    CLASS           reduce using rule 105 (statement -> async_function .)
    ELSE            reduce using rule 105 (statement -> async_function .)
    ENUM            reduce using rule 105 (statement -> async_function .)
    INTERFACE       reduce using rule 105 (statement -> async_function .)
    $end            reduce using rule 105 (statement -> async_function .)
    CASE            reduce using rule 105 (statement -> async_function .)
    DEFAULT         reduce using rule 105 (statement -> async_function .)


state 96

    (106) statement -> consolelog .

    RBRACE          reduce using rule 106 (statement -> consolelog .)
    RETURN          reduce using rule 106 (statement -> consolelog .)
    LBRACE          reduce using rule 106 (statement -> consolelog .)
    BREAK           reduce using rule 106 (statement -> consolelog .)
    CONTINUE        reduce using rule 106 (statement -> consolelog .)
    LET             reduce using rule 106 (statement -> consolelog .)
    VAR             reduce using rule 106 (statement -> consolelog .)
    CONST           reduce using rule 106 (statement -> consolelog .)
    FUNCTION        reduce using rule 106 (statement -> consolelog .)
    ASYNC           reduce using rule 106 (statement -> consolelog .)
    CONSOLE         reduce using rule 106 (statement -> consolelog .)
    LBRACKET        reduce using rule 106 (statement -> consolelog .)
    PROMPT          reduce using rule 106 (statement -> consolelog .)
    NOT             reduce using rule 106 (statement -> consolelog .)
    LPAREN          reduce using rule 106 (statement -> consolelog .)
    IDENTIFIER      reduce using rule 106 (statement -> consolelog .)
    NUMBER          reduce using rule 106 (statement -> consolelog .)
    FLOAT           reduce using rule 106 (statement -> consolelog .)
    STRING          reduce using rule 106 (statement -> consolelog .)
    TRUE            reduce using rule 106 (statement -> consolelog .)
    FALSE           reduce using rule 106 (statement -> consolelog .)
    PLUSPLUS        reduce using rule 106 (statement -> consolelog .)
    MINUSMINUS      reduce using rule 106 (statement -> consolelog .)
    IF              reduce using rule 106 (statement -> consolelog .)
    SWITCH          reduce using rule 106 (statement -> consolelog .)
    WHILE           reduce using rule 106 (statement -> consolelog .)
    FOR             reduce using rule 106 (statement -> consolelog .)
    CLASS           reduce using rule 106 (statement -> consolelog .)
    ELSE            reduce using rule 106 (statement -> consolelog .)
    ENUM            reduce using rule 106 (statement -> consolelog .)
    INTERFACE       reduce using rule 106 (statement -> consolelog .)
    $end            reduce using rule 106 (statement -> consolelog .)
    CASE            reduce using rule 106 (statement -> consolelog .)
    DEFAULT         reduce using rule 106 (statement -> consolelog .)


state 97

    (108) statement -> controlEstructure .

    RBRACE          reduce using rule 108 (statement -> controlEstructure .)
    RETURN          reduce using rule 108 (statement -> controlEstructure .)
    LBRACE          reduce using rule 108 (statement -> controlEstructure .)
    BREAK           reduce using rule 108 (statement -> controlEstructure .)
    CONTINUE        reduce using rule 108 (statement -> controlEstructure .)
    LET             reduce using rule 108 (statement -> controlEstructure .)
    VAR             reduce using rule 108 (statement -> controlEstructure .)
    CONST           reduce using rule 108 (statement -> controlEstructure .)
    FUNCTION        reduce using rule 108 (statement -> controlEstructure .)
    ASYNC           reduce using rule 108 (statement -> controlEstructure .)
    CONSOLE         reduce using rule 108 (statement -> controlEstructure .)
    LBRACKET        reduce using rule 108 (statement -> controlEstructure .)
    PROMPT          reduce using rule 108 (statement -> controlEstructure .)
    NOT             reduce using rule 108 (statement -> controlEstructure .)
    LPAREN          reduce using rule 108 (statement -> controlEstructure .)
    IDENTIFIER      reduce using rule 108 (statement -> controlEstructure .)
    NUMBER          reduce using rule 108 (statement -> controlEstructure .)
    FLOAT           reduce using rule 108 (statement -> controlEstructure .)
    STRING          reduce using rule 108 (statement -> controlEstructure .)
    TRUE            reduce using rule 108 (statement -> controlEstructure .)
    FALSE           reduce using rule 108 (statement -> controlEstructure .)
    PLUSPLUS        reduce using rule 108 (statement -> controlEstructure .)
    MINUSMINUS      reduce using rule 108 (statement -> controlEstructure .)
    IF              reduce using rule 108 (statement -> controlEstructure .)
    SWITCH          reduce using rule 108 (statement -> controlEstructure .)
    WHILE           reduce using rule 108 (statement -> controlEstructure .)
    FOR             reduce using rule 108 (statement -> controlEstructure .)
    CLASS           reduce using rule 108 (statement -> controlEstructure .)
    ELSE            reduce using rule 108 (statement -> controlEstructure .)
    ENUM            reduce using rule 108 (statement -> controlEstructure .)
    INTERFACE       reduce using rule 108 (statement -> controlEstructure .)
    $end            reduce using rule 108 (statement -> controlEstructure .)
    CASE            reduce using rule 108 (statement -> controlEstructure .)
    DEFAULT         reduce using rule 108 (statement -> controlEstructure .)


state 98

    (111) statement -> class_definition .

    RBRACE          reduce using rule 111 (statement -> class_definition .)
    RETURN          reduce using rule 111 (statement -> class_definition .)
    LBRACE          reduce using rule 111 (statement -> class_definition .)
    BREAK           reduce using rule 111 (statement -> class_definition .)
    CONTINUE        reduce using rule 111 (statement -> class_definition .)
    LET             reduce using rule 111 (statement -> class_definition .)
    VAR             reduce using rule 111 (statement -> class_definition .)
    CONST           reduce using rule 111 (statement -> class_definition .)
    FUNCTION        reduce using rule 111 (statement -> class_definition .)
    ASYNC           reduce using rule 111 (statement -> class_definition .)
    CONSOLE         reduce using rule 111 (statement -> class_definition .)
    LBRACKET        reduce using rule 111 (statement -> class_definition .)
    PROMPT          reduce using rule 111 (statement -> class_definition .)
    NOT             reduce using rule 111 (statement -> class_definition .)
    LPAREN          reduce using rule 111 (statement -> class_definition .)
    IDENTIFIER      reduce using rule 111 (statement -> class_definition .)
    NUMBER          reduce using rule 111 (statement -> class_definition .)
    FLOAT           reduce using rule 111 (statement -> class_definition .)
    STRING          reduce using rule 111 (statement -> class_definition .)
    TRUE            reduce using rule 111 (statement -> class_definition .)
    FALSE           reduce using rule 111 (statement -> class_definition .)
    PLUSPLUS        reduce using rule 111 (statement -> class_definition .)
    MINUSMINUS      reduce using rule 111 (statement -> class_definition .)
    IF              reduce using rule 111 (statement -> class_definition .)
    SWITCH          reduce using rule 111 (statement -> class_definition .)
    WHILE           reduce using rule 111 (statement -> class_definition .)
    FOR             reduce using rule 111 (statement -> class_definition .)
    CLASS           reduce using rule 111 (statement -> class_definition .)
    ELSE            reduce using rule 111 (statement -> class_definition .)
    ENUM            reduce using rule 111 (statement -> class_definition .)
    INTERFACE       reduce using rule 111 (statement -> class_definition .)
    $end            reduce using rule 111 (statement -> class_definition .)
    CASE            reduce using rule 111 (statement -> class_definition .)
    DEFAULT         reduce using rule 111 (statement -> class_definition .)


state 99

    (152) object_property -> IDENTIFIER . COLON expression
    (82) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (86) expression -> IDENTIFIER .

    COLON           shift and go to state 160
    LPAREN          shift and go to state 77
    SEMICOLON       reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 86 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 86 (expression -> IDENTIFIER .)
    DIV             reduce using rule 86 (expression -> IDENTIFIER .)
    MOD             reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 86 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    POT             reduce using rule 86 (expression -> IDENTIFIER .)
    AND             reduce using rule 86 (expression -> IDENTIFIER .)
    OR              reduce using rule 86 (expression -> IDENTIFIER .)
    EQ              reduce using rule 86 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 86 (expression -> IDENTIFIER .)
    LT              reduce using rule 86 (expression -> IDENTIFIER .)
    GT              reduce using rule 86 (expression -> IDENTIFIER .)
    LE              reduce using rule 86 (expression -> IDENTIFIER .)
    GE              reduce using rule 86 (expression -> IDENTIFIER .)
    DOT             reduce using rule 86 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 86 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 86 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 86 (expression -> IDENTIFIER .)


state 100

    (117) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON
    (142) arrow_function -> CONST . IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    IDENTIFIER      shift and go to state 161


state 101

    (142) arrow_function -> CONST IDENTIFIER . EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (117) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 162
    COLON           shift and go to state 163


state 102

    (138) async_function -> ASYNC FUNCTION . IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    IDENTIFIER      shift and go to state 164


state 103

    (135) enum_definition -> ENUM IDENTIFIER . LBRACE enum_members RBRACE

    LBRACE          shift and go to state 165


state 104

    (94) controlEstructure -> IF LPAREN . expression RPAREN statement
    (95) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE statement
    (96) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 166

state 105

    (127) controlEstructure -> SWITCH LPAREN . expression RPAREN LBRACE case_block RBRACE
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 167

state 106

    (139) controlEstructure -> WHILE LPAREN . expression RPAREN statement
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 168

state 107

    (119) class_definition -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 169


state 108

    (42) statement -> RETURN expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 170
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 109

    (110) statement -> RETURN SEMICOLON .

    LET             reduce using rule 110 (statement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 110 (statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 110 (statement -> RETURN SEMICOLON .)
    ASYNC           reduce using rule 110 (statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 110 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 110 (statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 110 (statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 110 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 110 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 110 (statement -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 110 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 110 (statement -> RETURN SEMICOLON .)
    LBRACKET        reduce using rule 110 (statement -> RETURN SEMICOLON .)
    PROMPT          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 110 (statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 110 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 110 (statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 110 (statement -> RETURN SEMICOLON .)
    PLUSPLUS        reduce using rule 110 (statement -> RETURN SEMICOLON .)
    MINUSMINUS      reduce using rule 110 (statement -> RETURN SEMICOLON .)
    CONSOLE         reduce using rule 110 (statement -> RETURN SEMICOLON .)
    VAR             reduce using rule 110 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 110 (statement -> RETURN SEMICOLON .)
    $end            reduce using rule 110 (statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 110 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 110 (statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 110 (statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 110 (statement -> RETURN SEMICOLON .)


state 110

    (133) statement -> BREAK SEMICOLON .

    LET             reduce using rule 133 (statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 133 (statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 133 (statement -> BREAK SEMICOLON .)
    ASYNC           reduce using rule 133 (statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 133 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 133 (statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 133 (statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 133 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 133 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 133 (statement -> BREAK SEMICOLON .)
    INTERFACE       reduce using rule 133 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 133 (statement -> BREAK SEMICOLON .)
    LBRACKET        reduce using rule 133 (statement -> BREAK SEMICOLON .)
    PROMPT          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 133 (statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 133 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 133 (statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 133 (statement -> BREAK SEMICOLON .)
    PLUSPLUS        reduce using rule 133 (statement -> BREAK SEMICOLON .)
    MINUSMINUS      reduce using rule 133 (statement -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 133 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 133 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 133 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 133 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 133 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 133 (statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 133 (statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 133 (statement -> BREAK SEMICOLON .)


state 111

    (134) statement -> CONTINUE SEMICOLON .

    LET             reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    ASYNC           reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    LBRACKET        reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    PROMPT          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    PLUSPLUS        reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    MINUSMINUS      reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    CONSOLE         reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 134 (statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 134 (statement -> CONTINUE SEMICOLON .)


state 112

    (143) interface -> INTERFACE IDENTIFIER . LBRACE interface_body RBRACE

    LBRACE          shift and go to state 171


state 113

    (77) expression -> PROMPT LPAREN . STRING RPAREN

    STRING          shift and go to state 172


state 114

    (78) expression -> NOT expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 78 (expression -> NOT expression .)
    COMMA           reduce using rule 78 (expression -> NOT expression .)
    RPAREN          reduce using rule 78 (expression -> NOT expression .)
    RBRACKET        reduce using rule 78 (expression -> NOT expression .)
    RBRACE          reduce using rule 78 (expression -> NOT expression .)
    COLON           reduce using rule 78 (expression -> NOT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 78 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 78 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 78 (expression -> NOT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 78 (expression -> NOT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 78 (expression -> NOT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 78 (expression -> NOT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 78 (expression -> NOT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 78 (expression -> NOT expression .) ]
  ! POT             [ reduce using rule 78 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 78 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 78 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 78 (expression -> NOT expression .) ]
  ! NEQ             [ reduce using rule 78 (expression -> NOT expression .) ]
  ! STRICT_EQ       [ reduce using rule 78 (expression -> NOT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 78 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 78 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 78 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 78 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 78 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 78 (expression -> NOT expression .) ]
  ! LBRACKET        [ reduce using rule 78 (expression -> NOT expression .) ]
  ! PLUSPLUS        [ reduce using rule 78 (expression -> NOT expression .) ]
  ! MINUSMINUS      [ reduce using rule 78 (expression -> NOT expression .) ]


state 115

    (91) expression -> PLUSPLUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 91 (expression -> PLUSPLUS expression .)
    COMMA           reduce using rule 91 (expression -> PLUSPLUS expression .)
    RPAREN          reduce using rule 91 (expression -> PLUSPLUS expression .)
    RBRACKET        reduce using rule 91 (expression -> PLUSPLUS expression .)
    RBRACE          reduce using rule 91 (expression -> PLUSPLUS expression .)
    COLON           reduce using rule 91 (expression -> PLUSPLUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! TIMES           [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! DIV             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MOD             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! POT             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! AND             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! OR              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! EQ              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! NEQ             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! LT              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! GT              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! LE              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! GE              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! DOT             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! LBRACKET        [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]


state 116

    (92) expression -> MINUSMINUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 92 (expression -> MINUSMINUS expression .)
    COMMA           reduce using rule 92 (expression -> MINUSMINUS expression .)
    RPAREN          reduce using rule 92 (expression -> MINUSMINUS expression .)
    RBRACKET        reduce using rule 92 (expression -> MINUSMINUS expression .)
    RBRACE          reduce using rule 92 (expression -> MINUSMINUS expression .)
    COLON           reduce using rule 92 (expression -> MINUSMINUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! TIMES           [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! DIV             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MOD             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! POT             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! AND             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! OR              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! EQ              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! NEQ             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! LT              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! GT              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! LE              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! GE              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! DOT             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! LBRACKET        [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]


state 117

    (93) consolelog -> CONSOLE DOT . LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON

    LOG             shift and go to state 173


state 118

    (140) varAssignment -> VAR IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> VAR IDENTIFIER . EQUAL expression SEMICOLON

    COLON           shift and go to state 174
    EQUAL           shift and go to state 175


state 119

    (28) forEstructure -> FOR LPAREN . for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> FOR LPAREN . CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (30) for_init -> . LET IDENTIFIER EQUAL expression
    (31) for_init -> . LET IDENTIFIER COLON type EQUAL expression
    (32) for_init -> . IDENTIFIER EQUAL expression
    (33) for_init -> . expression
    (34) for_init -> . empty
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (116) empty -> .

    CONST           shift and go to state 178
    LET             shift and go to state 180
    IDENTIFIER      shift and go to state 179
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80
    SEMICOLON       reduce using rule 116 (empty -> .)

    for_init                       shift and go to state 176
    expression                     shift and go to state 177
    empty                          shift and go to state 181

state 120

    (56) expression -> expression PLUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 56 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 56 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 56 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 56 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 56 (expression -> expression PLUS expression .)
    COLON           reduce using rule 56 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! POT             [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! DOT             [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! LBRACKET        [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 56 (expression -> expression PLUS expression .) ]


state 121

    (57) expression -> expression MINUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 57 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 57 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 57 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 57 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 57 (expression -> expression MINUS expression .)
    COLON           reduce using rule 57 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! POT             [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! DOT             [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! LBRACKET        [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 57 (expression -> expression MINUS expression .) ]


state 122

    (58) expression -> expression TIMES expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 58 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 58 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 58 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 58 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 58 (expression -> expression TIMES expression .)
    COLON           reduce using rule 58 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! DIV             [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! POT             [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! NEQ             [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! STRICT_EQ       [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! STRICT_NEQ      [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! DOT             [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! LBRACKET        [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! PLUSPLUS        [ reduce using rule 58 (expression -> expression TIMES expression .) ]
  ! MINUSMINUS      [ reduce using rule 58 (expression -> expression TIMES expression .) ]


state 123

    (59) expression -> expression DIV expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 59 (expression -> expression DIV expression .)
    COMMA           reduce using rule 59 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 59 (expression -> expression DIV expression .)
    RBRACKET        reduce using rule 59 (expression -> expression DIV expression .)
    RBRACE          reduce using rule 59 (expression -> expression DIV expression .)
    COLON           reduce using rule 59 (expression -> expression DIV expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! POT             [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! STRICT_EQ       [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! STRICT_NEQ      [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! DOT             [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! LBRACKET        [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! PLUSPLUS        [ reduce using rule 59 (expression -> expression DIV expression .) ]
  ! MINUSMINUS      [ reduce using rule 59 (expression -> expression DIV expression .) ]


state 124

    (60) expression -> expression MOD expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 60 (expression -> expression MOD expression .)
    COMMA           reduce using rule 60 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 60 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 60 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 60 (expression -> expression MOD expression .)
    COLON           reduce using rule 60 (expression -> expression MOD expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! DIV             [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! POT             [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! STRICT_EQ       [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! STRICT_NEQ      [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! DOT             [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! LBRACKET        [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! PLUSPLUS        [ reduce using rule 60 (expression -> expression MOD expression .) ]
  ! MINUSMINUS      [ reduce using rule 60 (expression -> expression MOD expression .) ]


state 125

    (61) expression -> expression PLUS_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .)
    COMMA           reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .)
    COLON           reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! POT             [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 61 (expression -> expression PLUS_ASSIGN expression .) ]


state 126

    (62) expression -> expression MINUS_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .)
    COMMA           reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .)
    COLON           reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! POT             [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 62 (expression -> expression MINUS_ASSIGN expression .) ]


state 127

    (63) expression -> expression MULT_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 63 (expression -> expression MULT_ASSIGN expression .)
    COMMA           reduce using rule 63 (expression -> expression MULT_ASSIGN expression .)
    RPAREN          reduce using rule 63 (expression -> expression MULT_ASSIGN expression .)
    RBRACKET        reduce using rule 63 (expression -> expression MULT_ASSIGN expression .)
    RBRACE          reduce using rule 63 (expression -> expression MULT_ASSIGN expression .)
    COLON           reduce using rule 63 (expression -> expression MULT_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! POT             [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 63 (expression -> expression MULT_ASSIGN expression .) ]


state 128

    (64) expression -> expression DIV_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 64 (expression -> expression DIV_ASSIGN expression .)
    COMMA           reduce using rule 64 (expression -> expression DIV_ASSIGN expression .)
    RPAREN          reduce using rule 64 (expression -> expression DIV_ASSIGN expression .)
    RBRACKET        reduce using rule 64 (expression -> expression DIV_ASSIGN expression .)
    RBRACE          reduce using rule 64 (expression -> expression DIV_ASSIGN expression .)
    COLON           reduce using rule 64 (expression -> expression DIV_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! POT             [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 64 (expression -> expression DIV_ASSIGN expression .) ]


state 129

    (65) expression -> expression MOD_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 65 (expression -> expression MOD_ASSIGN expression .)
    COMMA           reduce using rule 65 (expression -> expression MOD_ASSIGN expression .)
    RPAREN          reduce using rule 65 (expression -> expression MOD_ASSIGN expression .)
    RBRACKET        reduce using rule 65 (expression -> expression MOD_ASSIGN expression .)
    RBRACE          reduce using rule 65 (expression -> expression MOD_ASSIGN expression .)
    COLON           reduce using rule 65 (expression -> expression MOD_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! POT             [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! LT              [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! GT              [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! LE              [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! GE              [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 65 (expression -> expression MOD_ASSIGN expression .) ]


state 130

    (66) expression -> expression POT expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 66 (expression -> expression POT expression .)
    COMMA           reduce using rule 66 (expression -> expression POT expression .)
    RPAREN          reduce using rule 66 (expression -> expression POT expression .)
    RBRACKET        reduce using rule 66 (expression -> expression POT expression .)
    RBRACE          reduce using rule 66 (expression -> expression POT expression .)
    COLON           reduce using rule 66 (expression -> expression POT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! DIV             [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! POT             [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! EQ              [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! NEQ             [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! STRICT_EQ       [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! LE              [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! GE              [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! DOT             [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! LBRACKET        [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! PLUSPLUS        [ reduce using rule 66 (expression -> expression POT expression .) ]
  ! MINUSMINUS      [ reduce using rule 66 (expression -> expression POT expression .) ]


state 131

    (67) expression -> expression AND expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 67 (expression -> expression AND expression .)
    COMMA           reduce using rule 67 (expression -> expression AND expression .)
    RPAREN          reduce using rule 67 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 67 (expression -> expression AND expression .)
    RBRACE          reduce using rule 67 (expression -> expression AND expression .)
    COLON           reduce using rule 67 (expression -> expression AND expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! POT             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! STRICT_EQ       [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! STRICT_NEQ      [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! DOT             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! LBRACKET        [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! PLUSPLUS        [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MINUSMINUS      [ reduce using rule 67 (expression -> expression AND expression .) ]


state 132

    (68) expression -> expression OR expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 68 (expression -> expression OR expression .)
    COMMA           reduce using rule 68 (expression -> expression OR expression .)
    RPAREN          reduce using rule 68 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 68 (expression -> expression OR expression .)
    RBRACE          reduce using rule 68 (expression -> expression OR expression .)
    COLON           reduce using rule 68 (expression -> expression OR expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! POT             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! STRICT_EQ       [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! STRICT_NEQ      [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! DOT             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! LBRACKET        [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! PLUSPLUS        [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MINUSMINUS      [ reduce using rule 68 (expression -> expression OR expression .) ]


state 133

    (69) expression -> expression EQ expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 69 (expression -> expression EQ expression .)
    COMMA           reduce using rule 69 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 69 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 69 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 69 (expression -> expression EQ expression .)
    COLON           reduce using rule 69 (expression -> expression EQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! POT             [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! DOT             [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! LBRACKET        [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 69 (expression -> expression EQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 69 (expression -> expression EQ expression .) ]


state 134

    (70) expression -> expression NEQ expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 70 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 70 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 70 (expression -> expression NEQ expression .)
    RBRACKET        reduce using rule 70 (expression -> expression NEQ expression .)
    RBRACE          reduce using rule 70 (expression -> expression NEQ expression .)
    COLON           reduce using rule 70 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! POT             [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! DOT             [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! LBRACKET        [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 70 (expression -> expression NEQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 70 (expression -> expression NEQ expression .) ]


state 135

    (71) expression -> expression STRICT_EQ expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 71 (expression -> expression STRICT_EQ expression .)
    COMMA           reduce using rule 71 (expression -> expression STRICT_EQ expression .)
    RPAREN          reduce using rule 71 (expression -> expression STRICT_EQ expression .)
    RBRACKET        reduce using rule 71 (expression -> expression STRICT_EQ expression .)
    RBRACE          reduce using rule 71 (expression -> expression STRICT_EQ expression .)
    COLON           reduce using rule 71 (expression -> expression STRICT_EQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! TIMES           [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! DIV             [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! POT             [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! AND             [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! OR              [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! EQ              [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! NEQ             [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! LT              [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! GT              [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! LE              [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! GE              [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! DOT             [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! LBRACKET        [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 71 (expression -> expression STRICT_EQ expression .) ]


state 136

    (72) expression -> expression STRICT_NEQ expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 72 (expression -> expression STRICT_NEQ expression .)
    COMMA           reduce using rule 72 (expression -> expression STRICT_NEQ expression .)
    RPAREN          reduce using rule 72 (expression -> expression STRICT_NEQ expression .)
    RBRACKET        reduce using rule 72 (expression -> expression STRICT_NEQ expression .)
    RBRACE          reduce using rule 72 (expression -> expression STRICT_NEQ expression .)
    COLON           reduce using rule 72 (expression -> expression STRICT_NEQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! TIMES           [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! DIV             [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! POT             [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! AND             [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! OR              [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! EQ              [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! NEQ             [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! LT              [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! GT              [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! LE              [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! GE              [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! DOT             [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! LBRACKET        [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 72 (expression -> expression STRICT_NEQ expression .) ]


state 137

    (73) expression -> expression LT expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 73 (expression -> expression LT expression .)
    COMMA           reduce using rule 73 (expression -> expression LT expression .)
    RPAREN          reduce using rule 73 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 73 (expression -> expression LT expression .)
    RBRACE          reduce using rule 73 (expression -> expression LT expression .)
    COLON           reduce using rule 73 (expression -> expression LT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! POT             [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! STRICT_EQ       [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! DOT             [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! LBRACKET        [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! PLUSPLUS        [ reduce using rule 73 (expression -> expression LT expression .) ]
  ! MINUSMINUS      [ reduce using rule 73 (expression -> expression LT expression .) ]


state 138

    (74) expression -> expression GT expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 74 (expression -> expression GT expression .)
    COMMA           reduce using rule 74 (expression -> expression GT expression .)
    RPAREN          reduce using rule 74 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 74 (expression -> expression GT expression .)
    RBRACE          reduce using rule 74 (expression -> expression GT expression .)
    COLON           reduce using rule 74 (expression -> expression GT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! POT             [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! STRICT_EQ       [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! DOT             [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! LBRACKET        [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! PLUSPLUS        [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MINUSMINUS      [ reduce using rule 74 (expression -> expression GT expression .) ]


state 139

    (75) expression -> expression LE expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 75 (expression -> expression LE expression .)
    COMMA           reduce using rule 75 (expression -> expression LE expression .)
    RPAREN          reduce using rule 75 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 75 (expression -> expression LE expression .)
    RBRACE          reduce using rule 75 (expression -> expression LE expression .)
    COLON           reduce using rule 75 (expression -> expression LE expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! POT             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! NEQ             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! STRICT_EQ       [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! STRICT_NEQ      [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! DOT             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! LBRACKET        [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! PLUSPLUS        [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MINUSMINUS      [ reduce using rule 75 (expression -> expression LE expression .) ]


state 140

    (76) expression -> expression GE expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 76 (expression -> expression GE expression .)
    COMMA           reduce using rule 76 (expression -> expression GE expression .)
    RPAREN          reduce using rule 76 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 76 (expression -> expression GE expression .)
    RBRACE          reduce using rule 76 (expression -> expression GE expression .)
    COLON           reduce using rule 76 (expression -> expression GE expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! POT             [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! NEQ             [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! STRICT_EQ       [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! STRICT_NEQ      [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! DOT             [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! LBRACKET        [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! PLUSPLUS        [ reduce using rule 76 (expression -> expression GE expression .) ]
  ! MINUSMINUS      [ reduce using rule 76 (expression -> expression GE expression .) ]


state 141

    (80) expression -> expression DOT IDENTIFIER .

    SEMICOLON       reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    DIV             reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    POT             reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    STRICT_EQ       reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    STRICT_NEQ      reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    DOT             reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    PLUSPLUS        reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    MINUSMINUS      reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 80 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 80 (expression -> expression DOT IDENTIFIER .)


state 142

    (81) expression -> expression LBRACKET expression . RBRACKET
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RBRACKET        shift and go to state 182
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 143

    (18) letAssignment -> LET IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON . type SEMICOLON
    (21) declaracion -> LET IDENTIFIER COLON . type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 184

state 144

    (19) letAssignment -> LET IDENTIFIER EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 190

state 145

    (17) assignment -> IDENTIFIER EQUAL expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 191
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 146

    (82) expression -> IDENTIFIER LPAREN lista_expresiones_opt . RPAREN

    RPAREN          shift and go to state 192


state 147

    (22) lista_expresiones_opt -> lista_expresiones .

    RPAREN          reduce using rule 22 (lista_expresiones_opt -> lista_expresiones .)
    RBRACKET        reduce using rule 22 (lista_expresiones_opt -> lista_expresiones .)


state 148

    (23) lista_expresiones_opt -> empty .

    RPAREN          reduce using rule 23 (lista_expresiones_opt -> empty .)
    RBRACKET        reduce using rule 23 (lista_expresiones_opt -> empty .)


state 149

    (24) lista_expresiones -> expression .
    (25) lista_expresiones -> expression . COMMA lista_expresiones
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RPAREN          reduce using rule 24 (lista_expresiones -> expression .)
    RBRACKET        reduce using rule 24 (lista_expresiones -> expression .)
    COMMA           shift and go to state 193
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 150

    (49) expression -> LBRACKET expression COMMA . expression RBRACKET
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 194

state 151

    (151) object_properties -> empty .

    RBRACE          reduce using rule 151 (object_properties -> empty .)


state 152

    (152) object_property -> IDENTIFIER . COLON expression

    COLON           shift and go to state 160


state 153

    (41) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN COLON type LBRACE body_function RBRACE
    (43) parameters -> . IDENTIFIER COLON type
    (44) parameters -> . IDENTIFIER COLON type COMMA parameters
    (45) parameters -> . empty
    (116) empty -> .

    IDENTIFIER      shift and go to state 195
    RPAREN          reduce using rule 116 (empty -> .)

    parameters                     shift and go to state 196
    empty                          shift and go to state 197

state 154

    (79) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MULT_ASSIGN     reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    POT             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    STRICT_EQ       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    STRICT_NEQ      reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 79 (expression -> LPAREN expression RPAREN .)


state 155

    (98) statement -> LBRACE instruction_list RBRACE .

    LET             reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    FUNCTION        reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    CONST           reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    ASYNC           reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    ENUM            reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    IF              reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    SWITCH          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    WHILE           reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    CLASS           reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    RETURN          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    LBRACE          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    BREAK           reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    CONTINUE        reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    INTERFACE       reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    IDENTIFIER      reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    LBRACKET        reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    PROMPT          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    NOT             reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    LPAREN          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    NUMBER          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    FLOAT           reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    STRING          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    TRUE            reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    FALSE           reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    PLUSPLUS        reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    MINUSMINUS      reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    CONSOLE         reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    VAR             reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    FOR             reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    $end            reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    RBRACE          reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    ELSE            reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    CASE            reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)
    DEFAULT         reduce using rule 98 (statement -> LBRACE instruction_list RBRACE .)


state 156

    (113) instruction_list -> instruction_list statement .

    RBRACE          reduce using rule 113 (instruction_list -> instruction_list statement .)
    RETURN          reduce using rule 113 (instruction_list -> instruction_list statement .)
    LBRACE          reduce using rule 113 (instruction_list -> instruction_list statement .)
    BREAK           reduce using rule 113 (instruction_list -> instruction_list statement .)
    CONTINUE        reduce using rule 113 (instruction_list -> instruction_list statement .)
    LET             reduce using rule 113 (instruction_list -> instruction_list statement .)
    VAR             reduce using rule 113 (instruction_list -> instruction_list statement .)
    CONST           reduce using rule 113 (instruction_list -> instruction_list statement .)
    FUNCTION        reduce using rule 113 (instruction_list -> instruction_list statement .)
    ASYNC           reduce using rule 113 (instruction_list -> instruction_list statement .)
    CONSOLE         reduce using rule 113 (instruction_list -> instruction_list statement .)
    LBRACKET        reduce using rule 113 (instruction_list -> instruction_list statement .)
    PROMPT          reduce using rule 113 (instruction_list -> instruction_list statement .)
    NOT             reduce using rule 113 (instruction_list -> instruction_list statement .)
    LPAREN          reduce using rule 113 (instruction_list -> instruction_list statement .)
    IDENTIFIER      reduce using rule 113 (instruction_list -> instruction_list statement .)
    NUMBER          reduce using rule 113 (instruction_list -> instruction_list statement .)
    FLOAT           reduce using rule 113 (instruction_list -> instruction_list statement .)
    STRING          reduce using rule 113 (instruction_list -> instruction_list statement .)
    TRUE            reduce using rule 113 (instruction_list -> instruction_list statement .)
    FALSE           reduce using rule 113 (instruction_list -> instruction_list statement .)
    PLUSPLUS        reduce using rule 113 (instruction_list -> instruction_list statement .)
    MINUSMINUS      reduce using rule 113 (instruction_list -> instruction_list statement .)
    IF              reduce using rule 113 (instruction_list -> instruction_list statement .)
    SWITCH          reduce using rule 113 (instruction_list -> instruction_list statement .)
    WHILE           reduce using rule 113 (instruction_list -> instruction_list statement .)
    FOR             reduce using rule 113 (instruction_list -> instruction_list statement .)
    CLASS           reduce using rule 113 (instruction_list -> instruction_list statement .)
    CASE            reduce using rule 113 (instruction_list -> instruction_list statement .)
    DEFAULT         reduce using rule 113 (instruction_list -> instruction_list statement .)


state 157

    (148) expression -> LBRACE object_properties RBRACE .

    SEMICOLON       reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    PLUS            reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    MINUS           reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    TIMES           reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    DIV             reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    MOD             reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    PLUS_ASSIGN     reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    MINUS_ASSIGN    reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    MULT_ASSIGN     reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    DIV_ASSIGN      reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    MOD_ASSIGN      reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    POT             reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    AND             reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    OR              reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    EQ              reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    NEQ             reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    STRICT_EQ       reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    STRICT_NEQ      reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    LT              reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    GT              reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    LE              reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    GE              reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    DOT             reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    LBRACKET        reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    PLUSPLUS        reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    MINUSMINUS      reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    COMMA           reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    RPAREN          reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    RBRACKET        reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    RBRACE          reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)
    COLON           reduce using rule 148 (expression -> LBRACE object_properties RBRACE .)


state 158

    (150) object_properties -> object_property COMMA . object_properties
    (149) object_properties -> . object_property
    (150) object_properties -> . object_property COMMA object_properties
    (151) object_properties -> . empty
    (152) object_property -> . IDENTIFIER COLON expression
    (116) empty -> .

    IDENTIFIER      shift and go to state 152
    RBRACE          reduce using rule 116 (empty -> .)

    object_property                shift and go to state 88
    object_properties              shift and go to state 198
    empty                          shift and go to state 151

state 159

    (107) statement -> expression SEMICOLON .

    RBRACE          reduce using rule 107 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 107 (statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 107 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 107 (statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 107 (statement -> expression SEMICOLON .)
    LET             reduce using rule 107 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 107 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 107 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 107 (statement -> expression SEMICOLON .)
    ASYNC           reduce using rule 107 (statement -> expression SEMICOLON .)
    CONSOLE         reduce using rule 107 (statement -> expression SEMICOLON .)
    LBRACKET        reduce using rule 107 (statement -> expression SEMICOLON .)
    PROMPT          reduce using rule 107 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 107 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 107 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 107 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 107 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 107 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 107 (statement -> expression SEMICOLON .)
    TRUE            reduce using rule 107 (statement -> expression SEMICOLON .)
    FALSE           reduce using rule 107 (statement -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 107 (statement -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 107 (statement -> expression SEMICOLON .)
    IF              reduce using rule 107 (statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 107 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 107 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 107 (statement -> expression SEMICOLON .)
    CLASS           reduce using rule 107 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 107 (statement -> expression SEMICOLON .)
    ENUM            reduce using rule 107 (statement -> expression SEMICOLON .)
    INTERFACE       reduce using rule 107 (statement -> expression SEMICOLON .)
    $end            reduce using rule 107 (statement -> expression SEMICOLON .)
    CASE            reduce using rule 107 (statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 107 (statement -> expression SEMICOLON .)


state 160

    (152) object_property -> IDENTIFIER COLON . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 199

state 161

    (117) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON
    (142) arrow_function -> CONST IDENTIFIER . EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    COLON           shift and go to state 163
    EQUAL           shift and go to state 200


state 162

    (142) arrow_function -> CONST IDENTIFIER EQUAL . LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (118) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LPAREN          shift and go to state 201
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 202

state 163

    (117) constAssignment -> CONST IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 203

state 164

    (138) async_function -> ASYNC FUNCTION IDENTIFIER . LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    LPAREN          shift and go to state 204


state 165

    (135) enum_definition -> ENUM IDENTIFIER LBRACE . enum_members RBRACE
    (136) enum_members -> . IDENTIFIER
    (137) enum_members -> . IDENTIFIER COMMA enum_members

    IDENTIFIER      shift and go to state 205

    enum_members                   shift and go to state 206

state 166

    (94) controlEstructure -> IF LPAREN expression . RPAREN statement
    (95) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE statement
    (96) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 207
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 167

    (127) controlEstructure -> SWITCH LPAREN expression . RPAREN LBRACE case_block RBRACE
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 208
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 168

    (139) controlEstructure -> WHILE LPAREN expression . RPAREN statement
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 209
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 169

    (119) class_definition -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (120) class_body -> . class_body class_element
    (121) class_body -> . class_element
    (122) class_body -> . empty
    (123) class_element -> . function
    (124) class_element -> . letAssignment
    (125) class_element -> . varAssignment
    (126) class_element -> . constAssignment
    (116) empty -> .
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    RBRACE          reduce using rule 116 (empty -> .)
    FUNCTION        shift and go to state 20
    LET             shift and go to state 217
    VAR             shift and go to state 46
    CONST           shift and go to state 218

  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]

    class_body                     shift and go to state 210
    class_element                  shift and go to state 211
    empty                          shift and go to state 212
    function                       shift and go to state 213
    letAssignment                  shift and go to state 214
    varAssignment                  shift and go to state 215
    constAssignment                shift and go to state 216

state 170

    (42) statement -> RETURN expression SEMICOLON .

    LET             reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    ASYNC           reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    INTERFACE       reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    LBRACKET        reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    PROMPT          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    PLUSPLUS        reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    MINUSMINUS      reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 42 (statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 42 (statement -> RETURN expression SEMICOLON .)


state 171

    (143) interface -> INTERFACE IDENTIFIER LBRACE . interface_body RBRACE
    (144) interface_body -> . interface_body interface_property
    (145) interface_body -> . interface_property
    (146) interface_body -> . empty
    (147) interface_property -> . IDENTIFIER COLON type SEMICOLON
    (116) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 219
    RBRACE          reduce using rule 116 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]

    interface_body                 shift and go to state 220
    interface_property             shift and go to state 221
    empty                          shift and go to state 222

state 172

    (77) expression -> PROMPT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 223


state 173

    (93) consolelog -> CONSOLE DOT LOG . LPAREN lista_expresiones_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 224


state 174

    (140) varAssignment -> VAR IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 225

state 175

    (141) varAssignment -> VAR IDENTIFIER EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 226

state 176

    (28) forEstructure -> FOR LPAREN for_init . SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE

    SEMICOLON       shift and go to state 227


state 177

    (33) for_init -> expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 33 (for_init -> expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 178

    (29) forEstructure -> FOR LPAREN CONST . IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    IDENTIFIER      shift and go to state 228


state 179

    (32) for_init -> IDENTIFIER . EQUAL expression
    (82) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (86) expression -> IDENTIFIER .

    EQUAL           shift and go to state 229
    LPAREN          shift and go to state 77
    PLUS            reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 86 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 86 (expression -> IDENTIFIER .)
    DIV             reduce using rule 86 (expression -> IDENTIFIER .)
    MOD             reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 86 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    POT             reduce using rule 86 (expression -> IDENTIFIER .)
    AND             reduce using rule 86 (expression -> IDENTIFIER .)
    OR              reduce using rule 86 (expression -> IDENTIFIER .)
    EQ              reduce using rule 86 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 86 (expression -> IDENTIFIER .)
    LT              reduce using rule 86 (expression -> IDENTIFIER .)
    GT              reduce using rule 86 (expression -> IDENTIFIER .)
    LE              reduce using rule 86 (expression -> IDENTIFIER .)
    GE              reduce using rule 86 (expression -> IDENTIFIER .)
    DOT             reduce using rule 86 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 86 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 86 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 86 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 86 (expression -> IDENTIFIER .)


state 180

    (30) for_init -> LET . IDENTIFIER EQUAL expression
    (31) for_init -> LET . IDENTIFIER COLON type EQUAL expression

    IDENTIFIER      shift and go to state 230


state 181

    (34) for_init -> empty .

    SEMICOLON       reduce using rule 34 (for_init -> empty .)


state 182

    (81) expression -> expression LBRACKET expression RBRACKET .

    SEMICOLON       reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    MULT_ASSIGN     reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    POT             reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    STRICT_EQ       reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    STRICT_NEQ      reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 81 (expression -> expression LBRACKET expression RBRACKET .)


state 183

    (53) type -> IDENTIFIER .

    EQUAL           reduce using rule 53 (type -> IDENTIFIER .)
    SEMICOLON       reduce using rule 53 (type -> IDENTIFIER .)
    LBRACKET        reduce using rule 53 (type -> IDENTIFIER .)
    COMMA           reduce using rule 53 (type -> IDENTIFIER .)
    RPAREN          reduce using rule 53 (type -> IDENTIFIER .)
    RBRACKET        reduce using rule 53 (type -> IDENTIFIER .)
    LBRACE          reduce using rule 53 (type -> IDENTIFIER .)


state 184

    (18) letAssignment -> LET IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON type . SEMICOLON
    (21) declaracion -> LET IDENTIFIER COLON type . LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (55) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 231
    SEMICOLON       shift and go to state 232
    LBRACKET        shift and go to state 233


state 185

    (48) type -> LBRACKET . type COMMA type RBRACKET
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 234

state 186

    (50) type -> NUMBER_TYPE .

    EQUAL           reduce using rule 50 (type -> NUMBER_TYPE .)
    SEMICOLON       reduce using rule 50 (type -> NUMBER_TYPE .)
    LBRACKET        reduce using rule 50 (type -> NUMBER_TYPE .)
    COMMA           reduce using rule 50 (type -> NUMBER_TYPE .)
    RPAREN          reduce using rule 50 (type -> NUMBER_TYPE .)
    RBRACKET        reduce using rule 50 (type -> NUMBER_TYPE .)
    LBRACE          reduce using rule 50 (type -> NUMBER_TYPE .)


state 187

    (51) type -> STRING_TYPE .

    EQUAL           reduce using rule 51 (type -> STRING_TYPE .)
    SEMICOLON       reduce using rule 51 (type -> STRING_TYPE .)
    LBRACKET        reduce using rule 51 (type -> STRING_TYPE .)
    COMMA           reduce using rule 51 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 51 (type -> STRING_TYPE .)
    RBRACKET        reduce using rule 51 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 51 (type -> STRING_TYPE .)


state 188

    (52) type -> BOOLEAN_TYPE .

    EQUAL           reduce using rule 52 (type -> BOOLEAN_TYPE .)
    SEMICOLON       reduce using rule 52 (type -> BOOLEAN_TYPE .)
    LBRACKET        reduce using rule 52 (type -> BOOLEAN_TYPE .)
    COMMA           reduce using rule 52 (type -> BOOLEAN_TYPE .)
    RPAREN          reduce using rule 52 (type -> BOOLEAN_TYPE .)
    RBRACKET        reduce using rule 52 (type -> BOOLEAN_TYPE .)
    LBRACE          reduce using rule 52 (type -> BOOLEAN_TYPE .)


state 189

    (54) type -> VOID .

    EQUAL           reduce using rule 54 (type -> VOID .)
    SEMICOLON       reduce using rule 54 (type -> VOID .)
    LBRACKET        reduce using rule 54 (type -> VOID .)
    COMMA           reduce using rule 54 (type -> VOID .)
    RPAREN          reduce using rule 54 (type -> VOID .)
    RBRACKET        reduce using rule 54 (type -> VOID .)
    LBRACE          reduce using rule 54 (type -> VOID .)


state 190

    (19) letAssignment -> LET IDENTIFIER EQUAL expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 235
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 191

    (17) assignment -> IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)


state 192

    (82) expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .

    SEMICOLON       reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUS            reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUS           reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    TIMES           reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DIV             reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MOD             reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUS_ASSIGN     reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUS_ASSIGN    reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MULT_ASSIGN     reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DIV_ASSIGN      reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MOD_ASSIGN      reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    POT             reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    AND             reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    OR              reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    EQ              reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    NEQ             reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    STRICT_EQ       reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    STRICT_NEQ      reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LT              reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    GT              reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LE              reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    GE              reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DOT             reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LBRACKET        reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUSPLUS        reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUSMINUS      reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    COMMA           reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RPAREN          reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RBRACKET        reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RBRACE          reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    COLON           reduce using rule 82 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)


state 193

    (25) lista_expresiones -> expression COMMA . lista_expresiones
    (24) lista_expresiones -> . expression
    (25) lista_expresiones -> . expression COMMA lista_expresiones
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 149
    lista_expresiones              shift and go to state 236

state 194

    (49) expression -> LBRACKET expression COMMA expression . RBRACKET
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RBRACKET        shift and go to state 237
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 195

    (43) parameters -> IDENTIFIER . COLON type
    (44) parameters -> IDENTIFIER . COLON type COMMA parameters

    COLON           shift and go to state 238


state 196

    (41) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN COLON type LBRACE body_function RBRACE

    RPAREN          shift and go to state 239


state 197

    (45) parameters -> empty .

    RPAREN          reduce using rule 45 (parameters -> empty .)


state 198

    (150) object_properties -> object_property COMMA object_properties .

    RBRACE          reduce using rule 150 (object_properties -> object_property COMMA object_properties .)


state 199

    (152) object_property -> IDENTIFIER COLON expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    COMMA           reduce using rule 152 (object_property -> IDENTIFIER COLON expression .)
    RBRACE          reduce using rule 152 (object_property -> IDENTIFIER COLON expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 200

    (118) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (142) arrow_function -> CONST IDENTIFIER EQUAL . LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LPAREN          shift and go to state 201
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 202

state 201

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN . parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (79) expression -> LPAREN . expression RPAREN
    (43) parameters -> . IDENTIFIER COLON type
    (44) parameters -> . IDENTIFIER COLON type COMMA parameters
    (45) parameters -> . empty
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (116) empty -> .

    IDENTIFIER      shift and go to state 240
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80
    RPAREN          reduce using rule 116 (empty -> .)

    parameters                     shift and go to state 241
    expression                     shift and go to state 82
    empty                          shift and go to state 197

state 202

    (118) constAssignment -> CONST IDENTIFIER EQUAL expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 242
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 203

    (117) constAssignment -> CONST IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (55) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 243
    LBRACKET        shift and go to state 244


state 204

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN . parameters RPAREN COLON type LBRACE body_function RBRACE
    (43) parameters -> . IDENTIFIER COLON type
    (44) parameters -> . IDENTIFIER COLON type COMMA parameters
    (45) parameters -> . empty
    (116) empty -> .

    IDENTIFIER      shift and go to state 195
    RPAREN          reduce using rule 116 (empty -> .)

    parameters                     shift and go to state 245
    empty                          shift and go to state 197

state 205

    (136) enum_members -> IDENTIFIER .
    (137) enum_members -> IDENTIFIER . COMMA enum_members

    RBRACE          reduce using rule 136 (enum_members -> IDENTIFIER .)
    COMMA           shift and go to state 246


state 206

    (135) enum_definition -> ENUM IDENTIFIER LBRACE enum_members . RBRACE

    RBRACE          shift and go to state 247


state 207

    (94) controlEstructure -> IF LPAREN expression RPAREN . statement
    (95) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE statement
    (96) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 248
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 208

    (127) controlEstructure -> SWITCH LPAREN expression RPAREN . LBRACE case_block RBRACE

    LBRACE          shift and go to state 249


state 209

    (139) controlEstructure -> WHILE LPAREN expression RPAREN . statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 250
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 210

    (119) class_definition -> CLASS IDENTIFIER LBRACE class_body . RBRACE
    (120) class_body -> class_body . class_element
    (123) class_element -> . function
    (124) class_element -> . letAssignment
    (125) class_element -> . varAssignment
    (126) class_element -> . constAssignment
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON

    RBRACE          shift and go to state 251
    FUNCTION        shift and go to state 20
    LET             shift and go to state 217
    VAR             shift and go to state 46
    CONST           shift and go to state 218

    class_element                  shift and go to state 252
    function                       shift and go to state 213
    letAssignment                  shift and go to state 214
    varAssignment                  shift and go to state 215
    constAssignment                shift and go to state 216

state 211

    (121) class_body -> class_element .

    RBRACE          reduce using rule 121 (class_body -> class_element .)
    FUNCTION        reduce using rule 121 (class_body -> class_element .)
    LET             reduce using rule 121 (class_body -> class_element .)
    VAR             reduce using rule 121 (class_body -> class_element .)
    CONST           reduce using rule 121 (class_body -> class_element .)


state 212

    (122) class_body -> empty .

    RBRACE          reduce using rule 122 (class_body -> empty .)
    FUNCTION        reduce using rule 122 (class_body -> empty .)
    LET             reduce using rule 122 (class_body -> empty .)
    VAR             reduce using rule 122 (class_body -> empty .)
    CONST           reduce using rule 122 (class_body -> empty .)


state 213

    (123) class_element -> function .

    RBRACE          reduce using rule 123 (class_element -> function .)
    FUNCTION        reduce using rule 123 (class_element -> function .)
    LET             reduce using rule 123 (class_element -> function .)
    VAR             reduce using rule 123 (class_element -> function .)
    CONST           reduce using rule 123 (class_element -> function .)


state 214

    (124) class_element -> letAssignment .

    RBRACE          reduce using rule 124 (class_element -> letAssignment .)
    FUNCTION        reduce using rule 124 (class_element -> letAssignment .)
    LET             reduce using rule 124 (class_element -> letAssignment .)
    VAR             reduce using rule 124 (class_element -> letAssignment .)
    CONST           reduce using rule 124 (class_element -> letAssignment .)


state 215

    (125) class_element -> varAssignment .

    RBRACE          reduce using rule 125 (class_element -> varAssignment .)
    FUNCTION        reduce using rule 125 (class_element -> varAssignment .)
    LET             reduce using rule 125 (class_element -> varAssignment .)
    VAR             reduce using rule 125 (class_element -> varAssignment .)
    CONST           reduce using rule 125 (class_element -> varAssignment .)


state 216

    (126) class_element -> constAssignment .

    RBRACE          reduce using rule 126 (class_element -> constAssignment .)
    FUNCTION        reduce using rule 126 (class_element -> constAssignment .)
    LET             reduce using rule 126 (class_element -> constAssignment .)
    VAR             reduce using rule 126 (class_element -> constAssignment .)
    CONST           reduce using rule 126 (class_element -> constAssignment .)


state 217

    (18) letAssignment -> LET . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET . IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> LET . IDENTIFIER COLON type SEMICOLON

    IDENTIFIER      shift and go to state 253


state 218

    (117) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 254


state 219

    (147) interface_property -> IDENTIFIER . COLON type SEMICOLON

    COLON           shift and go to state 255


state 220

    (143) interface -> INTERFACE IDENTIFIER LBRACE interface_body . RBRACE
    (144) interface_body -> interface_body . interface_property
    (147) interface_property -> . IDENTIFIER COLON type SEMICOLON

    RBRACE          shift and go to state 256
    IDENTIFIER      shift and go to state 219

    interface_property             shift and go to state 257

state 221

    (145) interface_body -> interface_property .

    RBRACE          reduce using rule 145 (interface_body -> interface_property .)
    IDENTIFIER      reduce using rule 145 (interface_body -> interface_property .)


state 222

    (146) interface_body -> empty .

    RBRACE          reduce using rule 146 (interface_body -> empty .)
    IDENTIFIER      reduce using rule 146 (interface_body -> empty .)


state 223

    (77) expression -> PROMPT LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUS            reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUS           reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    TIMES           reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    DIV             reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    MOD             reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUS_ASSIGN     reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUS_ASSIGN    reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    MULT_ASSIGN     reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    DIV_ASSIGN      reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    MOD_ASSIGN      reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    POT             reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    AND             reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    OR              reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    EQ              reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    NEQ             reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    STRICT_EQ       reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    STRICT_NEQ      reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    LT              reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    GT              reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    LE              reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    GE              reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    DOT             reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    LBRACKET        reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUSPLUS        reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUSMINUS      reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    COMMA           reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    RBRACKET        reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    RBRACE          reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)
    COLON           reduce using rule 77 (expression -> PROMPT LPAREN STRING RPAREN .)


state 224

    (93) consolelog -> CONSOLE DOT LOG LPAREN . lista_expresiones_opt RPAREN SEMICOLON
    (22) lista_expresiones_opt -> . lista_expresiones
    (23) lista_expresiones_opt -> . empty
    (24) lista_expresiones -> . expression
    (25) lista_expresiones -> . expression COMMA lista_expresiones
    (116) empty -> .
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    RPAREN          reduce using rule 116 (empty -> .)
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    lista_expresiones_opt          shift and go to state 258
    lista_expresiones              shift and go to state 147
    empty                          shift and go to state 148
    expression                     shift and go to state 149

state 225

    (140) varAssignment -> VAR IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (55) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 259
    LBRACKET        shift and go to state 244


state 226

    (141) varAssignment -> VAR IDENTIFIER EQUAL expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 260
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 227

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON . expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 261

state 228

    (29) forEstructure -> FOR LPAREN CONST IDENTIFIER . OF IDENTIFIER RPAREN push_loop statement pop_loop

    OF              shift and go to state 262


state 229

    (32) for_init -> IDENTIFIER EQUAL . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 263

state 230

    (30) for_init -> LET IDENTIFIER . EQUAL expression
    (31) for_init -> LET IDENTIFIER . COLON type EQUAL expression

    EQUAL           shift and go to state 264
    COLON           shift and go to state 265


state 231

    (18) letAssignment -> LET IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 266

state 232

    (20) letAssignment -> LET IDENTIFIER COLON type SEMICOLON .

    LET             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FUNCTION        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CONST           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    ASYNC           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    ENUM            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    IF              reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    SWITCH          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    WHILE           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CLASS           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    RETURN          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    LBRACE          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    BREAK           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CONTINUE        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    INTERFACE       reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    LBRACKET        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    PROMPT          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    NOT             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    LPAREN          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    NUMBER          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FLOAT           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    STRING          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    TRUE            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FALSE           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    PLUSPLUS        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    MINUSMINUS      reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CONSOLE         reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    VAR             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FOR             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    $end            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    RBRACE          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    ELSE            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CASE            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    DEFAULT         reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)


state 233

    (21) declaracion -> LET IDENTIFIER COLON type LBRACKET . RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (55) type -> type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 267


state 234

    (48) type -> LBRACKET type . COMMA type RBRACKET
    (55) type -> type . LBRACKET RBRACKET

    COMMA           shift and go to state 268
    LBRACKET        shift and go to state 244


state 235

    (19) letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)


state 236

    (25) lista_expresiones -> expression COMMA lista_expresiones .

    RPAREN          reduce using rule 25 (lista_expresiones -> expression COMMA lista_expresiones .)
    RBRACKET        reduce using rule 25 (lista_expresiones -> expression COMMA lista_expresiones .)


state 237

    (49) expression -> LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUS            reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUS           reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    TIMES           reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DIV             reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MOD             reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MULT_ASSIGN     reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    POT             reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    AND             reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    OR              reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    EQ              reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    NEQ             reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    STRICT_EQ       reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    STRICT_NEQ      reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LT              reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    GT              reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LE              reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    GE              reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DOT             reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LBRACKET        reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUSPLUS        reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUSMINUS      reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    COMMA           reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RPAREN          reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RBRACKET        reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RBRACE          reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    COLON           reduce using rule 49 (expression -> LBRACKET expression COMMA expression RBRACKET .)


state 238

    (43) parameters -> IDENTIFIER COLON . type
    (44) parameters -> IDENTIFIER COLON . type COMMA parameters
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 269

state 239

    (41) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . COLON type LBRACE body_function RBRACE

    COLON           shift and go to state 270


state 240

    (43) parameters -> IDENTIFIER . COLON type
    (44) parameters -> IDENTIFIER . COLON type COMMA parameters
    (82) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (86) expression -> IDENTIFIER .

    COLON           shift and go to state 238
    LPAREN          shift and go to state 77
    RPAREN          reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 86 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 86 (expression -> IDENTIFIER .)
    DIV             reduce using rule 86 (expression -> IDENTIFIER .)
    MOD             reduce using rule 86 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 86 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER .)
    POT             reduce using rule 86 (expression -> IDENTIFIER .)
    AND             reduce using rule 86 (expression -> IDENTIFIER .)
    OR              reduce using rule 86 (expression -> IDENTIFIER .)
    EQ              reduce using rule 86 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 86 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 86 (expression -> IDENTIFIER .)
    LT              reduce using rule 86 (expression -> IDENTIFIER .)
    GT              reduce using rule 86 (expression -> IDENTIFIER .)
    LE              reduce using rule 86 (expression -> IDENTIFIER .)
    GE              reduce using rule 86 (expression -> IDENTIFIER .)
    DOT             reduce using rule 86 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 86 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 86 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 86 (expression -> IDENTIFIER .)


state 241

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters . RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    RPAREN          shift and go to state 271


state 242

    (118) constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 118 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)


state 243

    (117) constAssignment -> CONST IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 272

state 244

    (55) type -> type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 273


state 245

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters . RPAREN COLON type LBRACE body_function RBRACE

    RPAREN          shift and go to state 274


state 246

    (137) enum_members -> IDENTIFIER COMMA . enum_members
    (136) enum_members -> . IDENTIFIER
    (137) enum_members -> . IDENTIFIER COMMA enum_members

    IDENTIFIER      shift and go to state 205

    enum_members                   shift and go to state 275

state 247

    (135) enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .

    LET             reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FUNCTION        reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONST           reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    ASYNC           reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    ENUM            reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    IF              reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    SWITCH          reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    WHILE           reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CLASS           reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    RETURN          reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LBRACE          reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    BREAK           reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONTINUE        reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    INTERFACE       reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    IDENTIFIER      reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LBRACKET        reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    PROMPT          reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    NOT             reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LPAREN          reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    NUMBER          reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FLOAT           reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    STRING          reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    TRUE            reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FALSE           reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    PLUSPLUS        reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    MINUSMINUS      reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONSOLE         reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    VAR             reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FOR             reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    $end            reduce using rule 135 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)


state 248

    (94) controlEstructure -> IF LPAREN expression RPAREN statement .
    (95) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE statement
    (96) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LET             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    INTERFACE       reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 276

  ! ELSE            [ reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .) ]


state 249

    (127) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE . case_block RBRACE
    (128) case_block -> . case_block case
    (129) case_block -> . case
    (130) case_block -> . empty
    (131) case -> . CASE expression COLON instruction_list
    (132) case -> . DEFAULT COLON instruction_list
    (116) empty -> .

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    CASE            shift and go to state 280
    DEFAULT         shift and go to state 281
    RBRACE          reduce using rule 116 (empty -> .)

  ! CASE            [ reduce using rule 116 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 116 (empty -> .) ]

    case_block                     shift and go to state 277
    case                           shift and go to state 278
    empty                          shift and go to state 279

state 250

    (139) controlEstructure -> WHILE LPAREN expression RPAREN statement .

    LET             reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    INTERFACE       reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    $end            reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 139 (controlEstructure -> WHILE LPAREN expression RPAREN statement .)


state 251

    (119) class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    LET             reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ASYNC           reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ENUM            reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    SWITCH          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RETURN          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LBRACE          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    BREAK           reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONTINUE        reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTERFACE       reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LBRACKET        reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROMPT          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NOT             reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LPAREN          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NUMBER          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    STRING          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    TRUE            reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FALSE           reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PLUSPLUS        reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    MINUSMINUS      reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONSOLE         reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FOR             reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    $end            reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ELSE            reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CASE            reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    DEFAULT         reduce using rule 119 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 252

    (120) class_body -> class_body class_element .

    RBRACE          reduce using rule 120 (class_body -> class_body class_element .)
    FUNCTION        reduce using rule 120 (class_body -> class_body class_element .)
    LET             reduce using rule 120 (class_body -> class_body class_element .)
    VAR             reduce using rule 120 (class_body -> class_body class_element .)
    CONST           reduce using rule 120 (class_body -> class_body class_element .)


state 253

    (18) letAssignment -> LET IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET IDENTIFIER . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER . COLON type SEMICOLON

    COLON           shift and go to state 282
    EQUAL           shift and go to state 144


state 254

    (117) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON

    COLON           shift and go to state 163
    EQUAL           shift and go to state 283


state 255

    (147) interface_property -> IDENTIFIER COLON . type SEMICOLON
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 284

state 256

    (143) interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .

    LET             reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FUNCTION        reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CONST           reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    ASYNC           reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    ENUM            reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    IF              reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    SWITCH          reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    WHILE           reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CLASS           reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    RETURN          reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    LBRACE          reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    BREAK           reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CONTINUE        reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    INTERFACE       reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    IDENTIFIER      reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    LBRACKET        reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    PROMPT          reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    NOT             reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    LPAREN          reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    NUMBER          reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FLOAT           reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    STRING          reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    TRUE            reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FALSE           reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    PLUSPLUS        reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    MINUSMINUS      reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CONSOLE         reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    VAR             reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FOR             reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    $end            reduce using rule 143 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)


state 257

    (144) interface_body -> interface_body interface_property .

    RBRACE          reduce using rule 144 (interface_body -> interface_body interface_property .)
    IDENTIFIER      reduce using rule 144 (interface_body -> interface_body interface_property .)


state 258

    (93) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 285


state 259

    (140) varAssignment -> VAR IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 286

state 260

    (141) varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 141 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)


state 261

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression . SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 287
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 262

    (29) forEstructure -> FOR LPAREN CONST IDENTIFIER OF . IDENTIFIER RPAREN push_loop statement pop_loop

    IDENTIFIER      shift and go to state 288


state 263

    (32) for_init -> IDENTIFIER EQUAL expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 32 (for_init -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 264

    (30) for_init -> LET IDENTIFIER EQUAL . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 289

state 265

    (31) for_init -> LET IDENTIFIER COLON . type EQUAL expression
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 290

state 266

    (18) letAssignment -> LET IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 291
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 267

    (21) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET . EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (55) type -> type LBRACKET RBRACKET .

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 292
    SEMICOLON       reduce using rule 55 (type -> type LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 55 (type -> type LBRACKET RBRACKET .)

  ! EQUAL           [ reduce using rule 55 (type -> type LBRACKET RBRACKET .) ]


state 268

    (48) type -> LBRACKET type COMMA . type RBRACKET
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 293

state 269

    (43) parameters -> IDENTIFIER COLON type .
    (44) parameters -> IDENTIFIER COLON type . COMMA parameters
    (55) type -> type . LBRACKET RBRACKET

    RPAREN          reduce using rule 43 (parameters -> IDENTIFIER COLON type .)
    COMMA           shift and go to state 294
    LBRACKET        shift and go to state 244


state 270

    (41) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON . type LBRACE body_function RBRACE
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 295

state 271

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN . ARROW LBRACE body_function RBRACE SEMICOLON

    ARROW           shift and go to state 296


state 272

    (117) constAssignment -> CONST IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 297
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 273

    (55) type -> type LBRACKET RBRACKET .

    EQUAL           reduce using rule 55 (type -> type LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 55 (type -> type LBRACKET RBRACKET .)
    COMMA           reduce using rule 55 (type -> type LBRACKET RBRACKET .)
    RPAREN          reduce using rule 55 (type -> type LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 55 (type -> type LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 55 (type -> type LBRACKET RBRACKET .)
    LBRACE          reduce using rule 55 (type -> type LBRACKET RBRACKET .)


state 274

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN . COLON type LBRACE body_function RBRACE

    COLON           shift and go to state 298


state 275

    (137) enum_members -> IDENTIFIER COMMA enum_members .

    RBRACE          reduce using rule 137 (enum_members -> IDENTIFIER COMMA enum_members .)


state 276

    (95) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . statement
    (96) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement ELSE statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    IF              shift and go to state 299
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 300
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 277

    (127) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block . RBRACE
    (128) case_block -> case_block . case
    (131) case -> . CASE expression COLON instruction_list
    (132) case -> . DEFAULT COLON instruction_list

    RBRACE          shift and go to state 301
    CASE            shift and go to state 280
    DEFAULT         shift and go to state 281

    case                           shift and go to state 302

state 278

    (129) case_block -> case .

    RBRACE          reduce using rule 129 (case_block -> case .)
    CASE            reduce using rule 129 (case_block -> case .)
    DEFAULT         reduce using rule 129 (case_block -> case .)


state 279

    (130) case_block -> empty .

    RBRACE          reduce using rule 130 (case_block -> empty .)
    CASE            reduce using rule 130 (case_block -> empty .)
    DEFAULT         reduce using rule 130 (case_block -> empty .)


state 280

    (131) case -> CASE . expression COLON instruction_list
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 303

state 281

    (132) case -> DEFAULT . COLON instruction_list

    COLON           shift and go to state 304


state 282

    (18) letAssignment -> LET IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON . type SEMICOLON
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 305

state 283

    (118) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 202

state 284

    (147) interface_property -> IDENTIFIER COLON type . SEMICOLON
    (55) type -> type . LBRACKET RBRACKET

    SEMICOLON       shift and go to state 306
    LBRACKET        shift and go to state 244


state 285

    (93) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 307


state 286

    (140) varAssignment -> VAR IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 308
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 287

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON . for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (35) for_update -> . expression
    (36) for_update -> . expression PLUSPLUS
    (37) for_update -> . expression MINUSMINUS
    (38) for_update -> . PLUSPLUS expression
    (39) for_update -> . MINUSMINUS expression
    (40) for_update -> . empty
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (116) empty -> .

    PLUSPLUS        shift and go to state 311
    MINUSMINUS      shift and go to state 312
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    LBRACE          shift and go to state 80
    RPAREN          reduce using rule 116 (empty -> .)

    expression                     shift and go to state 309
    for_update                     shift and go to state 310
    empty                          shift and go to state 313

state 288

    (29) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER . RPAREN push_loop statement pop_loop

    RPAREN          shift and go to state 314


state 289

    (30) for_init -> LET IDENTIFIER EQUAL expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 30 (for_init -> LET IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 290

    (31) for_init -> LET IDENTIFIER COLON type . EQUAL expression
    (55) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 315
    LBRACKET        shift and go to state 244


state 291

    (18) letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 292

    (21) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL . LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    LBRACKET        shift and go to state 316


state 293

    (48) type -> LBRACKET type COMMA type . RBRACKET
    (55) type -> type . LBRACKET RBRACKET

    RBRACKET        shift and go to state 317
    LBRACKET        shift and go to state 244


state 294

    (44) parameters -> IDENTIFIER COLON type COMMA . parameters
    (43) parameters -> . IDENTIFIER COLON type
    (44) parameters -> . IDENTIFIER COLON type COMMA parameters
    (45) parameters -> . empty
    (116) empty -> .

    IDENTIFIER      shift and go to state 195
    RPAREN          reduce using rule 116 (empty -> .)

    parameters                     shift and go to state 318
    empty                          shift and go to state 197

state 295

    (41) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type . LBRACE body_function RBRACE
    (55) type -> type . LBRACKET RBRACKET

    LBRACE          shift and go to state 319
    LBRACKET        shift and go to state 244


state 296

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW . LBRACE body_function RBRACE SEMICOLON

    LBRACE          shift and go to state 320


state 297

    (117) constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 117 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 298

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON . type LBRACE body_function RBRACE
    (48) type -> . LBRACKET type COMMA type RBRACKET
    (50) type -> . NUMBER_TYPE
    (51) type -> . STRING_TYPE
    (52) type -> . BOOLEAN_TYPE
    (53) type -> . IDENTIFIER
    (54) type -> . VOID
    (55) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 321

state 299

    (96) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF . LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF . LPAREN expression RPAREN statement ELSE statement
    (94) controlEstructure -> IF . LPAREN expression RPAREN statement
    (95) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 322


state 300

    (95) controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .

    LET             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASYNC           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    INTERFACE       reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACKET        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PROMPT          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONSOLE         reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)


state 301

    (127) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .

    LET             reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FUNCTION        reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CONST           reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    ASYNC           reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    ENUM            reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    IF              reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    SWITCH          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    WHILE           reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CLASS           reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    RETURN          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    LBRACE          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    BREAK           reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CONTINUE        reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    INTERFACE       reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    IDENTIFIER      reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    LBRACKET        reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    PROMPT          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    NOT             reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    LPAREN          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    NUMBER          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FLOAT           reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    STRING          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    TRUE            reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FALSE           reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    PLUSPLUS        reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    MINUSMINUS      reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CONSOLE         reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    VAR             reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    FOR             reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    $end            reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    RBRACE          reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    ELSE            reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    CASE            reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)
    DEFAULT         reduce using rule 127 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE .)


state 302

    (128) case_block -> case_block case .

    RBRACE          reduce using rule 128 (case_block -> case_block case .)
    CASE            reduce using rule 128 (case_block -> case_block case .)
    DEFAULT         reduce using rule 128 (case_block -> case_block case .)


state 303

    (131) case -> CASE expression . COLON instruction_list
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    COLON           shift and go to state 323
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 304

    (132) case -> DEFAULT COLON . instruction_list
    (113) instruction_list -> . instruction_list statement
    (114) instruction_list -> . statement
    (115) instruction_list -> . empty
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (116) empty -> .
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    RBRACE          reduce using rule 116 (empty -> .)
    CASE            reduce using rule 116 (empty -> .)
    DEFAULT         reduce using rule 116 (empty -> .)
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! ASYNC           [ reduce using rule 116 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 116 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 116 (empty -> .) ]
  ! PROMPT          [ reduce using rule 116 (empty -> .) ]
  ! NOT             [ reduce using rule 116 (empty -> .) ]
  ! LPAREN          [ reduce using rule 116 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]
  ! NUMBER          [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! TRUE            [ reduce using rule 116 (empty -> .) ]
  ! FALSE           [ reduce using rule 116 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 116 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]

    instruction_list               shift and go to state 324
    statement                      shift and go to state 86
    empty                          shift and go to state 325
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 305

    (18) letAssignment -> LET IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON type . SEMICOLON
    (55) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 231
    SEMICOLON       shift and go to state 232
    LBRACKET        shift and go to state 244


state 306

    (147) interface_property -> IDENTIFIER COLON type SEMICOLON .

    RBRACE          reduce using rule 147 (interface_property -> IDENTIFIER COLON type SEMICOLON .)
    IDENTIFIER      reduce using rule 147 (interface_property -> IDENTIFIER COLON type SEMICOLON .)


state 307

    (93) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .

    LET             reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONST           reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ASYNC           reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ENUM            reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    IF              reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    PROMPT          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    NOT             reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    NUMBER          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    STRING          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    TRUE            reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FALSE           reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    PLUSPLUS        reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    MINUSMINUS      reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    VAR             reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    $end            reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 93 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)


state 308

    (140) varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 140 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 309

    (35) for_update -> expression .
    (36) for_update -> expression . PLUSPLUS
    (37) for_update -> expression . MINUSMINUS
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RPAREN          reduce using rule 35 (for_update -> expression .)
    PLUSPLUS        shift and go to state 326
    MINUSMINUS      shift and go to state 327
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72


state 310

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update . RPAREN LBRACE push_loop instruction_list pop_loop RBRACE

    RPAREN          shift and go to state 328


state 311

    (38) for_update -> PLUSPLUS . expression
    (91) expression -> PLUSPLUS . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 329

state 312

    (39) for_update -> MINUSMINUS . expression
    (92) expression -> MINUSMINUS . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 330

state 313

    (40) for_update -> empty .

    RPAREN          reduce using rule 40 (for_update -> empty .)


state 314

    (29) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN . push_loop statement pop_loop
    (26) push_loop -> .

    RETURN          reduce using rule 26 (push_loop -> .)
    LBRACE          reduce using rule 26 (push_loop -> .)
    BREAK           reduce using rule 26 (push_loop -> .)
    CONTINUE        reduce using rule 26 (push_loop -> .)
    LET             reduce using rule 26 (push_loop -> .)
    VAR             reduce using rule 26 (push_loop -> .)
    CONST           reduce using rule 26 (push_loop -> .)
    FUNCTION        reduce using rule 26 (push_loop -> .)
    ASYNC           reduce using rule 26 (push_loop -> .)
    CONSOLE         reduce using rule 26 (push_loop -> .)
    LBRACKET        reduce using rule 26 (push_loop -> .)
    PROMPT          reduce using rule 26 (push_loop -> .)
    NOT             reduce using rule 26 (push_loop -> .)
    LPAREN          reduce using rule 26 (push_loop -> .)
    IDENTIFIER      reduce using rule 26 (push_loop -> .)
    NUMBER          reduce using rule 26 (push_loop -> .)
    FLOAT           reduce using rule 26 (push_loop -> .)
    STRING          reduce using rule 26 (push_loop -> .)
    TRUE            reduce using rule 26 (push_loop -> .)
    FALSE           reduce using rule 26 (push_loop -> .)
    PLUSPLUS        reduce using rule 26 (push_loop -> .)
    MINUSMINUS      reduce using rule 26 (push_loop -> .)
    IF              reduce using rule 26 (push_loop -> .)
    SWITCH          reduce using rule 26 (push_loop -> .)
    WHILE           reduce using rule 26 (push_loop -> .)
    FOR             reduce using rule 26 (push_loop -> .)
    CLASS           reduce using rule 26 (push_loop -> .)

    push_loop                      shift and go to state 331

state 315

    (31) for_init -> LET IDENTIFIER COLON type EQUAL . expression
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 332

state 316

    (21) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET . lista_expresiones_opt RBRACKET SEMICOLON
    (22) lista_expresiones_opt -> . lista_expresiones
    (23) lista_expresiones_opt -> . empty
    (24) lista_expresiones -> . expression
    (25) lista_expresiones -> . expression COMMA lista_expresiones
    (116) empty -> .
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    RBRACKET        reduce using rule 116 (empty -> .)
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    lista_expresiones_opt          shift and go to state 333
    lista_expresiones              shift and go to state 147
    empty                          shift and go to state 148
    expression                     shift and go to state 149

state 317

    (48) type -> LBRACKET type COMMA type RBRACKET .

    EQUAL           reduce using rule 48 (type -> LBRACKET type COMMA type RBRACKET .)
    SEMICOLON       reduce using rule 48 (type -> LBRACKET type COMMA type RBRACKET .)
    LBRACKET        reduce using rule 48 (type -> LBRACKET type COMMA type RBRACKET .)
    COMMA           reduce using rule 48 (type -> LBRACKET type COMMA type RBRACKET .)
    RPAREN          reduce using rule 48 (type -> LBRACKET type COMMA type RBRACKET .)
    RBRACKET        reduce using rule 48 (type -> LBRACKET type COMMA type RBRACKET .)
    LBRACE          reduce using rule 48 (type -> LBRACKET type COMMA type RBRACKET .)


state 318

    (44) parameters -> IDENTIFIER COLON type COMMA parameters .

    RPAREN          reduce using rule 44 (parameters -> IDENTIFIER COLON type COMMA parameters .)


state 319

    (41) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE . body_function RBRACE
    (46) body_function -> . instruction_list
    (47) body_function -> . empty
    (113) instruction_list -> . instruction_list statement
    (114) instruction_list -> . statement
    (115) instruction_list -> . empty
    (116) empty -> .
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          reduce using rule 116 (empty -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! ASYNC           [ reduce using rule 116 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 116 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 116 (empty -> .) ]
  ! PROMPT          [ reduce using rule 116 (empty -> .) ]
  ! NOT             [ reduce using rule 116 (empty -> .) ]
  ! LPAREN          [ reduce using rule 116 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]
  ! NUMBER          [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! TRUE            [ reduce using rule 116 (empty -> .) ]
  ! FALSE           [ reduce using rule 116 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 116 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]

    body_function                  shift and go to state 334
    instruction_list               shift and go to state 335
    empty                          shift and go to state 336
    statement                      shift and go to state 86
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 320

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE . body_function RBRACE SEMICOLON
    (46) body_function -> . instruction_list
    (47) body_function -> . empty
    (113) instruction_list -> . instruction_list statement
    (114) instruction_list -> . statement
    (115) instruction_list -> . empty
    (116) empty -> .
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          reduce using rule 116 (empty -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! ASYNC           [ reduce using rule 116 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 116 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 116 (empty -> .) ]
  ! PROMPT          [ reduce using rule 116 (empty -> .) ]
  ! NOT             [ reduce using rule 116 (empty -> .) ]
  ! LPAREN          [ reduce using rule 116 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]
  ! NUMBER          [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! TRUE            [ reduce using rule 116 (empty -> .) ]
  ! FALSE           [ reduce using rule 116 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 116 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]

    body_function                  shift and go to state 337
    instruction_list               shift and go to state 335
    empty                          shift and go to state 336
    statement                      shift and go to state 86
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 321

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type . LBRACE body_function RBRACE
    (55) type -> type . LBRACKET RBRACKET

    LBRACE          shift and go to state 338
    LBRACKET        shift and go to state 244


state 322

    (96) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN . expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN . expression RPAREN statement ELSE statement
    (94) controlEstructure -> IF LPAREN . expression RPAREN statement
    (95) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE statement
    (96) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 339

state 323

    (131) case -> CASE expression COLON . instruction_list
    (113) instruction_list -> . instruction_list statement
    (114) instruction_list -> . statement
    (115) instruction_list -> . empty
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (116) empty -> .
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    RBRACE          reduce using rule 116 (empty -> .)
    CASE            reduce using rule 116 (empty -> .)
    DEFAULT         reduce using rule 116 (empty -> .)
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! ASYNC           [ reduce using rule 116 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 116 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 116 (empty -> .) ]
  ! PROMPT          [ reduce using rule 116 (empty -> .) ]
  ! NOT             [ reduce using rule 116 (empty -> .) ]
  ! LPAREN          [ reduce using rule 116 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]
  ! NUMBER          [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! TRUE            [ reduce using rule 116 (empty -> .) ]
  ! FALSE           [ reduce using rule 116 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 116 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]

    expression                     shift and go to state 89
    instruction_list               shift and go to state 340
    statement                      shift and go to state 86
    empty                          shift and go to state 325
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 324

    (132) case -> DEFAULT COLON instruction_list .
    (113) instruction_list -> instruction_list . statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 132 (case -> DEFAULT COLON instruction_list .)
    CASE            reduce using rule 132 (case -> DEFAULT COLON instruction_list .)
    DEFAULT         reduce using rule 132 (case -> DEFAULT COLON instruction_list .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 156
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 325

    (115) instruction_list -> empty .

    RETURN          reduce using rule 115 (instruction_list -> empty .)
    LBRACE          reduce using rule 115 (instruction_list -> empty .)
    BREAK           reduce using rule 115 (instruction_list -> empty .)
    CONTINUE        reduce using rule 115 (instruction_list -> empty .)
    LET             reduce using rule 115 (instruction_list -> empty .)
    VAR             reduce using rule 115 (instruction_list -> empty .)
    CONST           reduce using rule 115 (instruction_list -> empty .)
    FUNCTION        reduce using rule 115 (instruction_list -> empty .)
    ASYNC           reduce using rule 115 (instruction_list -> empty .)
    CONSOLE         reduce using rule 115 (instruction_list -> empty .)
    LBRACKET        reduce using rule 115 (instruction_list -> empty .)
    PROMPT          reduce using rule 115 (instruction_list -> empty .)
    NOT             reduce using rule 115 (instruction_list -> empty .)
    LPAREN          reduce using rule 115 (instruction_list -> empty .)
    IDENTIFIER      reduce using rule 115 (instruction_list -> empty .)
    NUMBER          reduce using rule 115 (instruction_list -> empty .)
    FLOAT           reduce using rule 115 (instruction_list -> empty .)
    STRING          reduce using rule 115 (instruction_list -> empty .)
    TRUE            reduce using rule 115 (instruction_list -> empty .)
    FALSE           reduce using rule 115 (instruction_list -> empty .)
    PLUSPLUS        reduce using rule 115 (instruction_list -> empty .)
    MINUSMINUS      reduce using rule 115 (instruction_list -> empty .)
    IF              reduce using rule 115 (instruction_list -> empty .)
    SWITCH          reduce using rule 115 (instruction_list -> empty .)
    WHILE           reduce using rule 115 (instruction_list -> empty .)
    FOR             reduce using rule 115 (instruction_list -> empty .)
    CLASS           reduce using rule 115 (instruction_list -> empty .)
    RBRACE          reduce using rule 115 (instruction_list -> empty .)
    CASE            reduce using rule 115 (instruction_list -> empty .)
    DEFAULT         reduce using rule 115 (instruction_list -> empty .)


state 326

    (36) for_update -> expression PLUSPLUS .
    (89) expression -> expression PLUSPLUS .

  ! reduce/reduce conflict for RPAREN resolved using rule 36 (for_update -> expression PLUSPLUS .)
    RPAREN          reduce using rule 36 (for_update -> expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 89 (expression -> expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 89 (expression -> expression PLUSPLUS .)
    PLUS            reduce using rule 89 (expression -> expression PLUSPLUS .)
    MINUS           reduce using rule 89 (expression -> expression PLUSPLUS .)
    TIMES           reduce using rule 89 (expression -> expression PLUSPLUS .)
    DIV             reduce using rule 89 (expression -> expression PLUSPLUS .)
    MOD             reduce using rule 89 (expression -> expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 89 (expression -> expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 89 (expression -> expression PLUSPLUS .)
    MULT_ASSIGN     reduce using rule 89 (expression -> expression PLUSPLUS .)
    DIV_ASSIGN      reduce using rule 89 (expression -> expression PLUSPLUS .)
    MOD_ASSIGN      reduce using rule 89 (expression -> expression PLUSPLUS .)
    POT             reduce using rule 89 (expression -> expression PLUSPLUS .)
    AND             reduce using rule 89 (expression -> expression PLUSPLUS .)
    OR              reduce using rule 89 (expression -> expression PLUSPLUS .)
    EQ              reduce using rule 89 (expression -> expression PLUSPLUS .)
    NEQ             reduce using rule 89 (expression -> expression PLUSPLUS .)
    STRICT_EQ       reduce using rule 89 (expression -> expression PLUSPLUS .)
    STRICT_NEQ      reduce using rule 89 (expression -> expression PLUSPLUS .)
    LT              reduce using rule 89 (expression -> expression PLUSPLUS .)
    GT              reduce using rule 89 (expression -> expression PLUSPLUS .)
    LE              reduce using rule 89 (expression -> expression PLUSPLUS .)
    GE              reduce using rule 89 (expression -> expression PLUSPLUS .)
    DOT             reduce using rule 89 (expression -> expression PLUSPLUS .)
    LBRACKET        reduce using rule 89 (expression -> expression PLUSPLUS .)

  ! RPAREN          [ reduce using rule 89 (expression -> expression PLUSPLUS .) ]


state 327

    (37) for_update -> expression MINUSMINUS .
    (90) expression -> expression MINUSMINUS .

  ! reduce/reduce conflict for RPAREN resolved using rule 37 (for_update -> expression MINUSMINUS .)
    RPAREN          reduce using rule 37 (for_update -> expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 90 (expression -> expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 90 (expression -> expression MINUSMINUS .)
    PLUS            reduce using rule 90 (expression -> expression MINUSMINUS .)
    MINUS           reduce using rule 90 (expression -> expression MINUSMINUS .)
    TIMES           reduce using rule 90 (expression -> expression MINUSMINUS .)
    DIV             reduce using rule 90 (expression -> expression MINUSMINUS .)
    MOD             reduce using rule 90 (expression -> expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 90 (expression -> expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 90 (expression -> expression MINUSMINUS .)
    MULT_ASSIGN     reduce using rule 90 (expression -> expression MINUSMINUS .)
    DIV_ASSIGN      reduce using rule 90 (expression -> expression MINUSMINUS .)
    MOD_ASSIGN      reduce using rule 90 (expression -> expression MINUSMINUS .)
    POT             reduce using rule 90 (expression -> expression MINUSMINUS .)
    AND             reduce using rule 90 (expression -> expression MINUSMINUS .)
    OR              reduce using rule 90 (expression -> expression MINUSMINUS .)
    EQ              reduce using rule 90 (expression -> expression MINUSMINUS .)
    NEQ             reduce using rule 90 (expression -> expression MINUSMINUS .)
    STRICT_EQ       reduce using rule 90 (expression -> expression MINUSMINUS .)
    STRICT_NEQ      reduce using rule 90 (expression -> expression MINUSMINUS .)
    LT              reduce using rule 90 (expression -> expression MINUSMINUS .)
    GT              reduce using rule 90 (expression -> expression MINUSMINUS .)
    LE              reduce using rule 90 (expression -> expression MINUSMINUS .)
    GE              reduce using rule 90 (expression -> expression MINUSMINUS .)
    DOT             reduce using rule 90 (expression -> expression MINUSMINUS .)
    LBRACKET        reduce using rule 90 (expression -> expression MINUSMINUS .)

  ! RPAREN          [ reduce using rule 90 (expression -> expression MINUSMINUS .) ]


state 328

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN . LBRACE push_loop instruction_list pop_loop RBRACE

    LBRACE          shift and go to state 341


state 329

    (38) for_update -> PLUSPLUS expression .
    (91) expression -> PLUSPLUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! reduce/reduce conflict for RPAREN resolved using rule 38 (for_update -> PLUSPLUS expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 38 (for_update -> PLUSPLUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUSPLUS        [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! PLUS            [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! TIMES           [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! DIV             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MOD             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! POT             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! AND             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! OR              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! EQ              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! NEQ             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! LT              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! GT              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! LE              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! GE              [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! DOT             [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! LBRACKET        [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]
  ! RPAREN          [ reduce using rule 91 (expression -> PLUSPLUS expression .) ]


state 330

    (39) for_update -> MINUSMINUS expression .
    (92) expression -> MINUSMINUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

  ! reduce/reduce conflict for RPAREN resolved using rule 39 (for_update -> MINUSMINUS expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 39 (for_update -> MINUSMINUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUSPLUS        [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! PLUS            [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! TIMES           [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! DIV             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MOD             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! POT             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! AND             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! OR              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! EQ              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! NEQ             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! LT              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! GT              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! LE              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! GE              [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! DOT             [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! LBRACKET        [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]
  ! RPAREN          [ reduce using rule 92 (expression -> MINUSMINUS expression .) ]


state 331

    (29) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop . statement pop_loop
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 342
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 332

    (31) for_init -> LET IDENTIFIER COLON type EQUAL expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 31 (for_init -> LET IDENTIFIER COLON type EQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 333

    (21) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 343


state 334

    (41) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function . RBRACE

    RBRACE          shift and go to state 344


state 335

    (46) body_function -> instruction_list .
    (113) instruction_list -> instruction_list . statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 46 (body_function -> instruction_list .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 156
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 336

    (47) body_function -> empty .
    (115) instruction_list -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 47 (body_function -> empty .)
    RBRACE          reduce using rule 47 (body_function -> empty .)
    RETURN          reduce using rule 115 (instruction_list -> empty .)
    LBRACE          reduce using rule 115 (instruction_list -> empty .)
    BREAK           reduce using rule 115 (instruction_list -> empty .)
    CONTINUE        reduce using rule 115 (instruction_list -> empty .)
    LET             reduce using rule 115 (instruction_list -> empty .)
    VAR             reduce using rule 115 (instruction_list -> empty .)
    CONST           reduce using rule 115 (instruction_list -> empty .)
    FUNCTION        reduce using rule 115 (instruction_list -> empty .)
    ASYNC           reduce using rule 115 (instruction_list -> empty .)
    CONSOLE         reduce using rule 115 (instruction_list -> empty .)
    LBRACKET        reduce using rule 115 (instruction_list -> empty .)
    PROMPT          reduce using rule 115 (instruction_list -> empty .)
    NOT             reduce using rule 115 (instruction_list -> empty .)
    LPAREN          reduce using rule 115 (instruction_list -> empty .)
    IDENTIFIER      reduce using rule 115 (instruction_list -> empty .)
    NUMBER          reduce using rule 115 (instruction_list -> empty .)
    FLOAT           reduce using rule 115 (instruction_list -> empty .)
    STRING          reduce using rule 115 (instruction_list -> empty .)
    TRUE            reduce using rule 115 (instruction_list -> empty .)
    FALSE           reduce using rule 115 (instruction_list -> empty .)
    PLUSPLUS        reduce using rule 115 (instruction_list -> empty .)
    MINUSMINUS      reduce using rule 115 (instruction_list -> empty .)
    IF              reduce using rule 115 (instruction_list -> empty .)
    SWITCH          reduce using rule 115 (instruction_list -> empty .)
    WHILE           reduce using rule 115 (instruction_list -> empty .)
    FOR             reduce using rule 115 (instruction_list -> empty .)
    CLASS           reduce using rule 115 (instruction_list -> empty .)

  ! RBRACE          [ reduce using rule 115 (instruction_list -> empty .) ]


state 337

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function . RBRACE SEMICOLON

    RBRACE          shift and go to state 345


state 338

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE . body_function RBRACE
    (46) body_function -> . instruction_list
    (47) body_function -> . empty
    (113) instruction_list -> . instruction_list statement
    (114) instruction_list -> . statement
    (115) instruction_list -> . empty
    (116) empty -> .
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          reduce using rule 116 (empty -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! ASYNC           [ reduce using rule 116 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 116 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 116 (empty -> .) ]
  ! PROMPT          [ reduce using rule 116 (empty -> .) ]
  ! NOT             [ reduce using rule 116 (empty -> .) ]
  ! LPAREN          [ reduce using rule 116 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]
  ! NUMBER          [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! TRUE            [ reduce using rule 116 (empty -> .) ]
  ! FALSE           [ reduce using rule 116 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 116 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]

    body_function                  shift and go to state 346
    instruction_list               shift and go to state 335
    empty                          shift and go to state 336
    statement                      shift and go to state 86
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 339

    (96) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression . RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression . RPAREN statement ELSE statement
    (94) controlEstructure -> IF LPAREN expression . RPAREN statement
    (95) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE statement
    (96) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . TIMES expression
    (59) expression -> expression . DIV expression
    (60) expression -> expression . MOD expression
    (61) expression -> expression . PLUS_ASSIGN expression
    (62) expression -> expression . MINUS_ASSIGN expression
    (63) expression -> expression . MULT_ASSIGN expression
    (64) expression -> expression . DIV_ASSIGN expression
    (65) expression -> expression . MOD_ASSIGN expression
    (66) expression -> expression . POT expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression
    (69) expression -> expression . EQ expression
    (70) expression -> expression . NEQ expression
    (71) expression -> expression . STRICT_EQ expression
    (72) expression -> expression . STRICT_NEQ expression
    (73) expression -> expression . LT expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . GE expression
    (80) expression -> expression . DOT IDENTIFIER
    (81) expression -> expression . LBRACKET expression RBRACKET
    (89) expression -> expression . PLUSPLUS
    (90) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 347
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 340

    (131) case -> CASE expression COLON instruction_list .
    (113) instruction_list -> instruction_list . statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 131 (case -> CASE expression COLON instruction_list .)
    CASE            reduce using rule 131 (case -> CASE expression COLON instruction_list .)
    DEFAULT         reduce using rule 131 (case -> CASE expression COLON instruction_list .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 156
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 341

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE . push_loop instruction_list pop_loop RBRACE
    (26) push_loop -> .

    RETURN          reduce using rule 26 (push_loop -> .)
    LBRACE          reduce using rule 26 (push_loop -> .)
    BREAK           reduce using rule 26 (push_loop -> .)
    CONTINUE        reduce using rule 26 (push_loop -> .)
    LET             reduce using rule 26 (push_loop -> .)
    VAR             reduce using rule 26 (push_loop -> .)
    CONST           reduce using rule 26 (push_loop -> .)
    FUNCTION        reduce using rule 26 (push_loop -> .)
    ASYNC           reduce using rule 26 (push_loop -> .)
    CONSOLE         reduce using rule 26 (push_loop -> .)
    LBRACKET        reduce using rule 26 (push_loop -> .)
    PROMPT          reduce using rule 26 (push_loop -> .)
    NOT             reduce using rule 26 (push_loop -> .)
    LPAREN          reduce using rule 26 (push_loop -> .)
    IDENTIFIER      reduce using rule 26 (push_loop -> .)
    NUMBER          reduce using rule 26 (push_loop -> .)
    FLOAT           reduce using rule 26 (push_loop -> .)
    STRING          reduce using rule 26 (push_loop -> .)
    TRUE            reduce using rule 26 (push_loop -> .)
    FALSE           reduce using rule 26 (push_loop -> .)
    PLUSPLUS        reduce using rule 26 (push_loop -> .)
    MINUSMINUS      reduce using rule 26 (push_loop -> .)
    IF              reduce using rule 26 (push_loop -> .)
    SWITCH          reduce using rule 26 (push_loop -> .)
    WHILE           reduce using rule 26 (push_loop -> .)
    FOR             reduce using rule 26 (push_loop -> .)
    CLASS           reduce using rule 26 (push_loop -> .)
    RBRACE          reduce using rule 26 (push_loop -> .)

    push_loop                      shift and go to state 348

state 342

    (29) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement . pop_loop
    (27) pop_loop -> .

    LET             reduce using rule 27 (pop_loop -> .)
    FUNCTION        reduce using rule 27 (pop_loop -> .)
    CONST           reduce using rule 27 (pop_loop -> .)
    ASYNC           reduce using rule 27 (pop_loop -> .)
    ENUM            reduce using rule 27 (pop_loop -> .)
    IF              reduce using rule 27 (pop_loop -> .)
    SWITCH          reduce using rule 27 (pop_loop -> .)
    WHILE           reduce using rule 27 (pop_loop -> .)
    CLASS           reduce using rule 27 (pop_loop -> .)
    RETURN          reduce using rule 27 (pop_loop -> .)
    LBRACE          reduce using rule 27 (pop_loop -> .)
    BREAK           reduce using rule 27 (pop_loop -> .)
    CONTINUE        reduce using rule 27 (pop_loop -> .)
    INTERFACE       reduce using rule 27 (pop_loop -> .)
    IDENTIFIER      reduce using rule 27 (pop_loop -> .)
    LBRACKET        reduce using rule 27 (pop_loop -> .)
    PROMPT          reduce using rule 27 (pop_loop -> .)
    NOT             reduce using rule 27 (pop_loop -> .)
    LPAREN          reduce using rule 27 (pop_loop -> .)
    NUMBER          reduce using rule 27 (pop_loop -> .)
    FLOAT           reduce using rule 27 (pop_loop -> .)
    STRING          reduce using rule 27 (pop_loop -> .)
    TRUE            reduce using rule 27 (pop_loop -> .)
    FALSE           reduce using rule 27 (pop_loop -> .)
    PLUSPLUS        reduce using rule 27 (pop_loop -> .)
    MINUSMINUS      reduce using rule 27 (pop_loop -> .)
    CONSOLE         reduce using rule 27 (pop_loop -> .)
    VAR             reduce using rule 27 (pop_loop -> .)
    FOR             reduce using rule 27 (pop_loop -> .)
    $end            reduce using rule 27 (pop_loop -> .)
    RBRACE          reduce using rule 27 (pop_loop -> .)
    ELSE            reduce using rule 27 (pop_loop -> .)
    CASE            reduce using rule 27 (pop_loop -> .)
    DEFAULT         reduce using rule 27 (pop_loop -> .)

    pop_loop                       shift and go to state 349

state 343

    (21) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 350


state 344

    (41) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .

    LET             reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FUNCTION        reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONST           reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ASYNC           reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ENUM            reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IF              reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    SWITCH          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    WHILE           reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CLASS           reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RETURN          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACE          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    BREAK           reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONTINUE        reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    INTERFACE       reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IDENTIFIER      reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACKET        reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PROMPT          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NOT             reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LPAREN          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NUMBER          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FLOAT           reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    STRING          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    TRUE            reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FALSE           reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PLUSPLUS        reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    MINUSMINUS      reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONSOLE         reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    VAR             reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FOR             reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    $end            reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RBRACE          reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ELSE            reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CASE            reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    DEFAULT         reduce using rule 41 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)


state 345

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 351


state 346

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function . RBRACE

    RBRACE          shift and go to state 352


state 347

    (96) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN . statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN . statement ELSE statement
    (94) controlEstructure -> IF LPAREN expression RPAREN . statement
    (95) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE statement
    (96) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 353
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 348

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop . instruction_list pop_loop RBRACE
    (113) instruction_list -> . instruction_list statement
    (114) instruction_list -> . statement
    (115) instruction_list -> . empty
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (116) empty -> .
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    RBRACE          reduce using rule 116 (empty -> .)
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 116 (empty -> .) ]
  ! LET             [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 116 (empty -> .) ]
  ! ASYNC           [ reduce using rule 116 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 116 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 116 (empty -> .) ]
  ! PROMPT          [ reduce using rule 116 (empty -> .) ]
  ! NOT             [ reduce using rule 116 (empty -> .) ]
  ! LPAREN          [ reduce using rule 116 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 116 (empty -> .) ]
  ! NUMBER          [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! TRUE            [ reduce using rule 116 (empty -> .) ]
  ! FALSE           [ reduce using rule 116 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 116 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]

    expression                     shift and go to state 89
    instruction_list               shift and go to state 354
    statement                      shift and go to state 86
    empty                          shift and go to state 325
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 349

    (29) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .

    LET             reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FUNCTION        reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CONST           reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    ASYNC           reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    ENUM            reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    IF              reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    SWITCH          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    WHILE           reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CLASS           reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    RETURN          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    LBRACE          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    BREAK           reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CONTINUE        reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    INTERFACE       reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    IDENTIFIER      reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    LBRACKET        reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    PROMPT          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    NOT             reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    LPAREN          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    NUMBER          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FLOAT           reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    STRING          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    TRUE            reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FALSE           reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    PLUSPLUS        reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    MINUSMINUS      reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CONSOLE         reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    VAR             reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FOR             reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    $end            reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    RBRACE          reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    ELSE            reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CASE            reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    DEFAULT         reduce using rule 29 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)


state 350

    (21) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .

    LET             reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONST           reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ASYNC           reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ENUM            reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    IF              reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    WHILE           reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CLASS           reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    RETURN          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LBRACE          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    BREAK           reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LBRACKET        reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    PROMPT          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    NOT             reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    STRING          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    TRUE            reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FALSE           reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    PLUSPLUS        reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    MINUSMINUS      reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONSOLE         reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    VAR             reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FOR             reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    $end            reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ELSE            reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CASE            reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 21 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)


state 351

    (142) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .

    LET             reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FUNCTION        reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONST           reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ASYNC           reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ENUM            reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    IF              reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    SWITCH          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    WHILE           reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CLASS           reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    RETURN          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LBRACE          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    BREAK           reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONTINUE        reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    INTERFACE       reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LBRACKET        reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    PROMPT          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    NOT             reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LPAREN          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    NUMBER          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FLOAT           reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    STRING          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    TRUE            reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FALSE           reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    PLUSPLUS        reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    MINUSMINUS      reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONSOLE         reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    VAR             reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FOR             reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    $end            reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    RBRACE          reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ELSE            reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CASE            reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 142 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)


state 352

    (138) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .

    LET             reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FUNCTION        reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONST           reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ASYNC           reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ENUM            reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IF              reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    SWITCH          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    WHILE           reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CLASS           reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RETURN          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACE          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    BREAK           reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONTINUE        reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    INTERFACE       reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IDENTIFIER      reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACKET        reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PROMPT          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NOT             reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LPAREN          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NUMBER          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FLOAT           reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    STRING          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    TRUE            reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FALSE           reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PLUSPLUS        reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    MINUSMINUS      reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONSOLE         reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    VAR             reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FOR             reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    $end            reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RBRACE          reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ELSE            reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CASE            reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    DEFAULT         reduce using rule 138 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)


state 353

    (96) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .
    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement . ELSE statement
    (94) controlEstructure -> IF LPAREN expression RPAREN statement .
    (95) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE statement
    (96) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONST resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for ASYNC resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for ENUM resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for IF resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for PROMPT resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for NOT resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for NUMBER resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for STRING resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for VAR resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FOR resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for $end resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CASE resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 355
    LET             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    INTERFACE       reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .)

  ! LET             [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FUNCTION        [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONST           [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ASYNC           [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ENUM            [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! IF              [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! SWITCH          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! WHILE           [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CLASS           [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! RETURN          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LBRACE          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! BREAK           [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONTINUE        [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! INTERFACE       [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! IDENTIFIER      [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LBRACKET        [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! PROMPT          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! NOT             [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LPAREN          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! NUMBER          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FLOAT           [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! STRING          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! TRUE            [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FALSE           [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! PLUSPLUS        [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! MINUSMINUS      [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONSOLE         [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! VAR             [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FOR             [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! $end            [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! RBRACE          [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CASE            [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! DEFAULT         [ reduce using rule 96 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 94 (controlEstructure -> IF LPAREN expression RPAREN statement .) ]


state 354

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list . pop_loop RBRACE
    (113) instruction_list -> instruction_list . statement
    (27) pop_loop -> .
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 27 (pop_loop -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    pop_loop                       shift and go to state 356
    statement                      shift and go to state 156
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 355

    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE . statement
    (95) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . statement
    (96) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement
    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement ELSE statement
    (42) statement -> . RETURN expression SEMICOLON
    (98) statement -> . LBRACE instruction_list RBRACE
    (99) statement -> . letAssignment
    (100) statement -> . varAssignment
    (101) statement -> . constAssignment
    (102) statement -> . declaracion
    (103) statement -> . function
    (104) statement -> . arrow_function
    (105) statement -> . async_function
    (106) statement -> . consolelog
    (107) statement -> . expression SEMICOLON
    (108) statement -> . controlEstructure
    (109) statement -> . forEstructure
    (110) statement -> . RETURN SEMICOLON
    (111) statement -> . class_definition
    (112) statement -> . LBRACE RBRACE
    (133) statement -> . BREAK SEMICOLON
    (134) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (140) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (141) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (117) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (118) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (21) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (41) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (142) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (138) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (93) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (49) expression -> . LBRACKET expression COMMA expression RBRACKET
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression TIMES expression
    (59) expression -> . expression DIV expression
    (60) expression -> . expression MOD expression
    (61) expression -> . expression PLUS_ASSIGN expression
    (62) expression -> . expression MINUS_ASSIGN expression
    (63) expression -> . expression MULT_ASSIGN expression
    (64) expression -> . expression DIV_ASSIGN expression
    (65) expression -> . expression MOD_ASSIGN expression
    (66) expression -> . expression POT expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . expression EQ expression
    (70) expression -> . expression NEQ expression
    (71) expression -> . expression STRICT_EQ expression
    (72) expression -> . expression STRICT_NEQ expression
    (73) expression -> . expression LT expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression GE expression
    (77) expression -> . PROMPT LPAREN STRING RPAREN
    (78) expression -> . NOT expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression DOT IDENTIFIER
    (81) expression -> . expression LBRACKET expression RBRACKET
    (82) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (83) expression -> . NUMBER
    (84) expression -> . FLOAT
    (85) expression -> . STRING
    (86) expression -> . IDENTIFIER
    (87) expression -> . TRUE
    (88) expression -> . FALSE
    (89) expression -> . expression PLUSPLUS
    (90) expression -> . expression MINUSMINUS
    (91) expression -> . PLUSPLUS expression
    (92) expression -> . MINUSMINUS expression
    (148) expression -> . LBRACE object_properties RBRACE
    (94) controlEstructure -> . IF LPAREN expression RPAREN statement
    (95) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (96) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (97) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (127) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE case_block RBRACE
    (139) controlEstructure -> . WHILE LPAREN expression RPAREN statement
    (28) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (29) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (119) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    IF              shift and go to state 299
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 357
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 356

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop . RBRACE

    RBRACE          shift and go to state 358


state 357

    (97) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .
    (95) controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .

  ! reduce/reduce conflict for ELSE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LET resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONST resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for ASYNC resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for ENUM resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for IF resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for PROMPT resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for NOT resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for NUMBER resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for STRING resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for VAR resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FOR resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for $end resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CASE resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LET             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASYNC           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    INTERFACE       reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACKET        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PROMPT          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONSOLE         reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 95 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)

  ! LET             [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FUNCTION        [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONST           [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ASYNC           [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ENUM            [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! IF              [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! SWITCH          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CLASS           [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! RETURN          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LBRACE          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! BREAK           [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONTINUE        [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! INTERFACE       [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! IDENTIFIER      [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LBRACKET        [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! PROMPT          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! NOT             [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LPAREN          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! NUMBER          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FLOAT           [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! STRING          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! TRUE            [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FALSE           [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! PLUSPLUS        [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! MINUSMINUS      [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONSOLE         [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! VAR             [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FOR             [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! $end            [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! RBRACE          [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ELSE            [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CASE            [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! DEFAULT         [ reduce using rule 97 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]


state 358

    (28) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .

    LET             reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FUNCTION        reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CONST           reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    ASYNC           reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    ENUM            reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    IF              reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    SWITCH          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    WHILE           reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CLASS           reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    RETURN          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    LBRACE          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    BREAK           reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CONTINUE        reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    INTERFACE       reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    IDENTIFIER      reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    LBRACKET        reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    PROMPT          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    NOT             reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    LPAREN          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    NUMBER          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FLOAT           reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    STRING          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    TRUE            reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FALSE           reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    PLUSPLUS        reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    MINUSMINUS      reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CONSOLE         reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    VAR             reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FOR             reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    $end            reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    RBRACE          reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    ELSE            reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CASE            reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    DEFAULT         reduce using rule 28 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACE in state 22 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 22 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 22 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 22 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 22 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 22 resolved as shift
WARNING: shift/reduce conflict for LET in state 22 resolved as shift
WARNING: shift/reduce conflict for VAR in state 22 resolved as shift
WARNING: shift/reduce conflict for CONST in state 22 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 22 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 22 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 22 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 22 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 22 resolved as shift
WARNING: shift/reduce conflict for NOT in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 22 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 22 resolved as shift
WARNING: shift/reduce conflict for STRING in state 22 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 22 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for IF in state 22 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 22 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 22 resolved as shift
WARNING: shift/reduce conflict for FOR in state 22 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV in state 114 resolved as shift
WARNING: shift/reduce conflict for MOD in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for POT in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for OR in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for LE in state 114 resolved as shift
WARNING: shift/reduce conflict for GE in state 114 resolved as shift
WARNING: shift/reduce conflict for DOT in state 114 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for POT in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for LE in state 115 resolved as shift
WARNING: shift/reduce conflict for GE in state 115 resolved as shift
WARNING: shift/reduce conflict for DOT in state 115 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for POT in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for LT in state 116 resolved as shift
WARNING: shift/reduce conflict for GT in state 116 resolved as shift
WARNING: shift/reduce conflict for LE in state 116 resolved as shift
WARNING: shift/reduce conflict for GE in state 116 resolved as shift
WARNING: shift/reduce conflict for DOT in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for POT in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for DOT in state 120 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for POT in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for LT in state 121 resolved as shift
WARNING: shift/reduce conflict for GT in state 121 resolved as shift
WARNING: shift/reduce conflict for LE in state 121 resolved as shift
WARNING: shift/reduce conflict for GE in state 121 resolved as shift
WARNING: shift/reduce conflict for DOT in state 121 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for POT in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for LT in state 122 resolved as shift
WARNING: shift/reduce conflict for GT in state 122 resolved as shift
WARNING: shift/reduce conflict for LE in state 122 resolved as shift
WARNING: shift/reduce conflict for GE in state 122 resolved as shift
WARNING: shift/reduce conflict for DOT in state 122 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV in state 123 resolved as shift
WARNING: shift/reduce conflict for MOD in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for POT in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for LT in state 123 resolved as shift
WARNING: shift/reduce conflict for GT in state 123 resolved as shift
WARNING: shift/reduce conflict for LE in state 123 resolved as shift
WARNING: shift/reduce conflict for GE in state 123 resolved as shift
WARNING: shift/reduce conflict for DOT in state 123 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV in state 124 resolved as shift
WARNING: shift/reduce conflict for MOD in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for POT in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for LT in state 124 resolved as shift
WARNING: shift/reduce conflict for GT in state 124 resolved as shift
WARNING: shift/reduce conflict for LE in state 124 resolved as shift
WARNING: shift/reduce conflict for GE in state 124 resolved as shift
WARNING: shift/reduce conflict for DOT in state 124 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV in state 125 resolved as shift
WARNING: shift/reduce conflict for MOD in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for POT in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 125 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 125 resolved as shift
WARNING: shift/reduce conflict for LT in state 125 resolved as shift
WARNING: shift/reduce conflict for GT in state 125 resolved as shift
WARNING: shift/reduce conflict for LE in state 125 resolved as shift
WARNING: shift/reduce conflict for GE in state 125 resolved as shift
WARNING: shift/reduce conflict for DOT in state 125 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for POT in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for LE in state 126 resolved as shift
WARNING: shift/reduce conflict for GE in state 126 resolved as shift
WARNING: shift/reduce conflict for DOT in state 126 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIV in state 127 resolved as shift
WARNING: shift/reduce conflict for MOD in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for POT in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 127 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for LE in state 127 resolved as shift
WARNING: shift/reduce conflict for GE in state 127 resolved as shift
WARNING: shift/reduce conflict for DOT in state 127 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIV in state 128 resolved as shift
WARNING: shift/reduce conflict for MOD in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for POT in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for EQ in state 128 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 128 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 128 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 128 resolved as shift
WARNING: shift/reduce conflict for LT in state 128 resolved as shift
WARNING: shift/reduce conflict for GT in state 128 resolved as shift
WARNING: shift/reduce conflict for LE in state 128 resolved as shift
WARNING: shift/reduce conflict for GE in state 128 resolved as shift
WARNING: shift/reduce conflict for DOT in state 128 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIV in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for POT in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for EQ in state 129 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 129 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for LT in state 129 resolved as shift
WARNING: shift/reduce conflict for GT in state 129 resolved as shift
WARNING: shift/reduce conflict for LE in state 129 resolved as shift
WARNING: shift/reduce conflict for GE in state 129 resolved as shift
WARNING: shift/reduce conflict for DOT in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for POT in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for EQ in state 130 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 130 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 130 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 130 resolved as shift
WARNING: shift/reduce conflict for LT in state 130 resolved as shift
WARNING: shift/reduce conflict for GT in state 130 resolved as shift
WARNING: shift/reduce conflict for LE in state 130 resolved as shift
WARNING: shift/reduce conflict for GE in state 130 resolved as shift
WARNING: shift/reduce conflict for DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIV in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for POT in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 131 resolved as shift
WARNING: shift/reduce conflict for EQ in state 131 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 131 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 131 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 131 resolved as shift
WARNING: shift/reduce conflict for LT in state 131 resolved as shift
WARNING: shift/reduce conflict for GT in state 131 resolved as shift
WARNING: shift/reduce conflict for LE in state 131 resolved as shift
WARNING: shift/reduce conflict for GE in state 131 resolved as shift
WARNING: shift/reduce conflict for DOT in state 131 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for DIV in state 132 resolved as shift
WARNING: shift/reduce conflict for MOD in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for POT in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 132 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 132 resolved as shift
WARNING: shift/reduce conflict for LT in state 132 resolved as shift
WARNING: shift/reduce conflict for GT in state 132 resolved as shift
WARNING: shift/reduce conflict for LE in state 132 resolved as shift
WARNING: shift/reduce conflict for GE in state 132 resolved as shift
WARNING: shift/reduce conflict for DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for DIV in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for POT in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for EQ in state 133 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 133 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for LT in state 133 resolved as shift
WARNING: shift/reduce conflict for GT in state 133 resolved as shift
WARNING: shift/reduce conflict for LE in state 133 resolved as shift
WARNING: shift/reduce conflict for GE in state 133 resolved as shift
WARNING: shift/reduce conflict for DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
WARNING: shift/reduce conflict for DIV in state 134 resolved as shift
WARNING: shift/reduce conflict for MOD in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for POT in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for EQ in state 134 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 134 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for LT in state 134 resolved as shift
WARNING: shift/reduce conflict for GT in state 134 resolved as shift
WARNING: shift/reduce conflict for LE in state 134 resolved as shift
WARNING: shift/reduce conflict for GE in state 134 resolved as shift
WARNING: shift/reduce conflict for DOT in state 134 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 135 resolved as shift
WARNING: shift/reduce conflict for DIV in state 135 resolved as shift
WARNING: shift/reduce conflict for MOD in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for POT in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for LT in state 135 resolved as shift
WARNING: shift/reduce conflict for GT in state 135 resolved as shift
WARNING: shift/reduce conflict for LE in state 135 resolved as shift
WARNING: shift/reduce conflict for GE in state 135 resolved as shift
WARNING: shift/reduce conflict for DOT in state 135 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for DIV in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for POT in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for LT in state 136 resolved as shift
WARNING: shift/reduce conflict for GT in state 136 resolved as shift
WARNING: shift/reduce conflict for LE in state 136 resolved as shift
WARNING: shift/reduce conflict for GE in state 136 resolved as shift
WARNING: shift/reduce conflict for DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 137 resolved as shift
WARNING: shift/reduce conflict for DIV in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for POT in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for LT in state 137 resolved as shift
WARNING: shift/reduce conflict for GT in state 137 resolved as shift
WARNING: shift/reduce conflict for LE in state 137 resolved as shift
WARNING: shift/reduce conflict for GE in state 137 resolved as shift
WARNING: shift/reduce conflict for DOT in state 137 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 138 resolved as shift
WARNING: shift/reduce conflict for DIV in state 138 resolved as shift
WARNING: shift/reduce conflict for MOD in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for POT in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for LT in state 138 resolved as shift
WARNING: shift/reduce conflict for GT in state 138 resolved as shift
WARNING: shift/reduce conflict for LE in state 138 resolved as shift
WARNING: shift/reduce conflict for GE in state 138 resolved as shift
WARNING: shift/reduce conflict for DOT in state 138 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 139 resolved as shift
WARNING: shift/reduce conflict for DIV in state 139 resolved as shift
WARNING: shift/reduce conflict for MOD in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for POT in state 139 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 139 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 139 resolved as shift
WARNING: shift/reduce conflict for LT in state 139 resolved as shift
WARNING: shift/reduce conflict for GT in state 139 resolved as shift
WARNING: shift/reduce conflict for LE in state 139 resolved as shift
WARNING: shift/reduce conflict for GE in state 139 resolved as shift
WARNING: shift/reduce conflict for DOT in state 139 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 140 resolved as shift
WARNING: shift/reduce conflict for DIV in state 140 resolved as shift
WARNING: shift/reduce conflict for MOD in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for POT in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for EQ in state 140 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 140 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 140 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 140 resolved as shift
WARNING: shift/reduce conflict for LT in state 140 resolved as shift
WARNING: shift/reduce conflict for GT in state 140 resolved as shift
WARNING: shift/reduce conflict for LE in state 140 resolved as shift
WARNING: shift/reduce conflict for GE in state 140 resolved as shift
WARNING: shift/reduce conflict for DOT in state 140 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 169 resolved as shift
WARNING: shift/reduce conflict for LET in state 169 resolved as shift
WARNING: shift/reduce conflict for VAR in state 169 resolved as shift
WARNING: shift/reduce conflict for CONST in state 169 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 171 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 248 resolved as shift
WARNING: shift/reduce conflict for CASE in state 249 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 249 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 267 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 304 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 304 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 304 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 304 resolved as shift
WARNING: shift/reduce conflict for LET in state 304 resolved as shift
WARNING: shift/reduce conflict for VAR in state 304 resolved as shift
WARNING: shift/reduce conflict for CONST in state 304 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 304 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 304 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 304 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 304 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 304 resolved as shift
WARNING: shift/reduce conflict for NOT in state 304 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 304 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 304 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 304 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 304 resolved as shift
WARNING: shift/reduce conflict for STRING in state 304 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 304 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 304 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 304 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 304 resolved as shift
WARNING: shift/reduce conflict for IF in state 304 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 304 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 304 resolved as shift
WARNING: shift/reduce conflict for FOR in state 304 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 304 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 319 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 319 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 319 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 319 resolved as shift
WARNING: shift/reduce conflict for LET in state 319 resolved as shift
WARNING: shift/reduce conflict for VAR in state 319 resolved as shift
WARNING: shift/reduce conflict for CONST in state 319 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 319 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 319 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 319 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 319 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 319 resolved as shift
WARNING: shift/reduce conflict for NOT in state 319 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 319 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 319 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 319 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 319 resolved as shift
WARNING: shift/reduce conflict for STRING in state 319 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 319 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 319 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 319 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 319 resolved as shift
WARNING: shift/reduce conflict for IF in state 319 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 319 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 319 resolved as shift
WARNING: shift/reduce conflict for FOR in state 319 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 319 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 320 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 320 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 320 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 320 resolved as shift
WARNING: shift/reduce conflict for LET in state 320 resolved as shift
WARNING: shift/reduce conflict for VAR in state 320 resolved as shift
WARNING: shift/reduce conflict for CONST in state 320 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 320 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 320 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 320 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 320 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 320 resolved as shift
WARNING: shift/reduce conflict for NOT in state 320 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 320 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 320 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 320 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 320 resolved as shift
WARNING: shift/reduce conflict for STRING in state 320 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 320 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 320 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 320 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 320 resolved as shift
WARNING: shift/reduce conflict for IF in state 320 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 320 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 320 resolved as shift
WARNING: shift/reduce conflict for FOR in state 320 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 320 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 323 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 323 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 323 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 323 resolved as shift
WARNING: shift/reduce conflict for LET in state 323 resolved as shift
WARNING: shift/reduce conflict for VAR in state 323 resolved as shift
WARNING: shift/reduce conflict for CONST in state 323 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 323 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 323 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 323 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 323 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 323 resolved as shift
WARNING: shift/reduce conflict for NOT in state 323 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 323 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 323 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 323 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 323 resolved as shift
WARNING: shift/reduce conflict for STRING in state 323 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 323 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 323 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 323 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 323 resolved as shift
WARNING: shift/reduce conflict for IF in state 323 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 323 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 323 resolved as shift
WARNING: shift/reduce conflict for FOR in state 323 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 323 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 329 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 329 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 329 resolved as shift
WARNING: shift/reduce conflict for DIV in state 329 resolved as shift
WARNING: shift/reduce conflict for MOD in state 329 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for POT in state 329 resolved as shift
WARNING: shift/reduce conflict for AND in state 329 resolved as shift
WARNING: shift/reduce conflict for OR in state 329 resolved as shift
WARNING: shift/reduce conflict for EQ in state 329 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 329 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 329 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 329 resolved as shift
WARNING: shift/reduce conflict for LT in state 329 resolved as shift
WARNING: shift/reduce conflict for GT in state 329 resolved as shift
WARNING: shift/reduce conflict for LE in state 329 resolved as shift
WARNING: shift/reduce conflict for GE in state 329 resolved as shift
WARNING: shift/reduce conflict for DOT in state 329 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 329 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 329 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 329 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 330 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 330 resolved as shift
WARNING: shift/reduce conflict for DIV in state 330 resolved as shift
WARNING: shift/reduce conflict for MOD in state 330 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for POT in state 330 resolved as shift
WARNING: shift/reduce conflict for AND in state 330 resolved as shift
WARNING: shift/reduce conflict for OR in state 330 resolved as shift
WARNING: shift/reduce conflict for EQ in state 330 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 330 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 330 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 330 resolved as shift
WARNING: shift/reduce conflict for LT in state 330 resolved as shift
WARNING: shift/reduce conflict for GT in state 330 resolved as shift
WARNING: shift/reduce conflict for LE in state 330 resolved as shift
WARNING: shift/reduce conflict for GE in state 330 resolved as shift
WARNING: shift/reduce conflict for DOT in state 330 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 330 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 330 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 338 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 338 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 338 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 338 resolved as shift
WARNING: shift/reduce conflict for LET in state 338 resolved as shift
WARNING: shift/reduce conflict for VAR in state 338 resolved as shift
WARNING: shift/reduce conflict for CONST in state 338 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 338 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 338 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 338 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 338 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 338 resolved as shift
WARNING: shift/reduce conflict for NOT in state 338 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 338 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 338 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 338 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 338 resolved as shift
WARNING: shift/reduce conflict for STRING in state 338 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 338 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 338 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 338 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 338 resolved as shift
WARNING: shift/reduce conflict for IF in state 338 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 338 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 338 resolved as shift
WARNING: shift/reduce conflict for FOR in state 338 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 338 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 348 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 348 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 348 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 348 resolved as shift
WARNING: shift/reduce conflict for LET in state 348 resolved as shift
WARNING: shift/reduce conflict for VAR in state 348 resolved as shift
WARNING: shift/reduce conflict for CONST in state 348 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 348 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 348 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 348 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 348 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 348 resolved as shift
WARNING: shift/reduce conflict for NOT in state 348 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 348 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 348 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 348 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 348 resolved as shift
WARNING: shift/reduce conflict for STRING in state 348 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 348 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 348 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 348 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 348 resolved as shift
WARNING: shift/reduce conflict for IF in state 348 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 348 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 348 resolved as shift
WARNING: shift/reduce conflict for FOR in state 348 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 348 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 353 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 353 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (element -> letAssignment)
WARNING: rejected rule (statement -> letAssignment) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (element -> declaracion)
WARNING: rejected rule (statement -> declaracion) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (element -> function)
WARNING: rejected rule (statement -> function) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (element -> arrow_function)
WARNING: rejected rule (statement -> arrow_function) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (element -> async_function)
WARNING: rejected rule (statement -> async_function) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (element -> constAssignment)
WARNING: rejected rule (statement -> constAssignment) in state 8
WARNING: reduce/reduce conflict in state 10 resolved using rule (element -> controlEstructure)
WARNING: rejected rule (statement -> controlEstructure) in state 10
WARNING: reduce/reduce conflict in state 11 resolved using rule (element -> class_definition)
WARNING: rejected rule (statement -> class_definition) in state 11
WARNING: reduce/reduce conflict in state 16 resolved using rule (element -> consolelog)
WARNING: rejected rule (statement -> consolelog) in state 16
WARNING: reduce/reduce conflict in state 49 resolved using rule (element -> expression SEMICOLON)
WARNING: rejected rule (statement -> expression SEMICOLON) in state 49
WARNING: reduce/reduce conflict in state 87 resolved using rule (instruction_list -> empty)
WARNING: rejected rule (object_properties -> empty) in state 87
WARNING: reduce/reduce conflict in state 326 resolved using rule (for_update -> expression PLUSPLUS)
WARNING: rejected rule (expression -> expression PLUSPLUS) in state 326
WARNING: reduce/reduce conflict in state 327 resolved using rule (for_update -> expression MINUSMINUS)
WARNING: rejected rule (expression -> expression MINUSMINUS) in state 327
WARNING: reduce/reduce conflict in state 329 resolved using rule (for_update -> PLUSPLUS expression)
WARNING: rejected rule (expression -> PLUSPLUS expression) in state 329
WARNING: reduce/reduce conflict in state 330 resolved using rule (for_update -> MINUSMINUS expression)
WARNING: rejected rule (expression -> MINUSMINUS expression) in state 330
WARNING: reduce/reduce conflict in state 336 resolved using rule (body_function -> empty)
WARNING: rejected rule (instruction_list -> empty) in state 336
WARNING: reduce/reduce conflict in state 353 resolved using rule (controlEstructure -> IF LPAREN expression RPAREN statement)
WARNING: rejected rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement) in state 353
WARNING: reduce/reduce conflict in state 357 resolved using rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement)
WARNING: rejected rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement) in state 357
WARNING: Rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement) is never reduced
WARNING: Rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement) is never reduced
