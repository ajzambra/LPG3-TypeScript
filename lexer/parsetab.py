
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ANY ARROW AS ASYNC AWAIT BIGINT_TYPE BOOLEAN_TYPE BREAK CASE CATCH CLASS COLON COMMA CONSOLE CONST CONTINUE DEFAULT DIV DIV_ASSIGN DOT ELSE ENUM EQ EQUAL EQUALS EXPORT FALSE FINALLY FLOAT FOR FUNCTION GE GT IDENTIFIER IF IMPORT INTERFACE LBRACE LBRACKET LE LET LOG LPAREN LT MINUS MINUSMINUS MINUS_ASSIGN MOD MOD_ASSIGN MULT_ASSIGN NEQ NEW NOT NULL_TYPE NUMBER NUMBER_TYPE OF OR PLUS PLUSPLUS PLUS_ASSIGN POT PRIVATE PROTECTED PUBLIC RBRACE RBRACKET RETURN RPAREN SEMICOLON STATIC STRICT_EQ STRICT_NEQ STRING STRING_TYPE SUPER SWITCH SYMBOL_TYPE THIS TIMES TRUE TRY TYPE UNDEFINED_TYPE VAR VOID WHILEprogram : program element\n               | elementelement : letAssignment\n                | declaracion\n                | function\n                | controlEstructure\n                | forEstructure\n                | statement\n                | expression SEMICOLON\n                | consolelogletAssignment : LET IDENTIFIER COLON type EQUAL expression SEMICOLONletAssignment : LET IDENTIFIER EQUAL expression SEMICOLONdeclaracion : LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLONlista_expresiones_opt : lista_expresiones\n                            | emptylista_expresiones : expression\n                        | expression COMMA lista_expresionesforEstructure : FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statementfor_init : letAssignment\n                | expression\n                | emptyfor_update : expression\n                | emptyfunction : FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACEparameters : IDENTIFIER COLON type\n                | IDENTIFIER COLON type COMMA parameters\n                | emptybody_function : instruction_listtype : NUMBER_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | IDENTIFIER\n            | type LBRACKET RBRACKETexpression : expression PLUS expression\n                | expression MINUS expression\n                | expression TIMES expression\n                | expression DIV expression\n                | expression MOD expression\n                | expression PLUS_ASSIGN expression\n                | expression MINUS_ASSIGN expression\n                | expression MULT_ASSIGN expression\n                | expression DIV_ASSIGN expression\n                | expression MOD_ASSIGN expression\n                | expression POT expression\n                | expression AND expression\n                | expression OR expression\n                | expression EQ expression\n                | expression NEQ expression\n                | expression STRICT_EQ expression\n                | expression STRICT_NEQ expression\n                | expression LT expression\n                | expression GT expression\n                | expression LE expression\n                | expression GE expression\n                | NOT expression\n                | LPAREN expression RPAREN\n                | expression DOT IDENTIFIER\n                | expression LBRACKET expression RBRACKET\n                | IDENTIFIER LPAREN lista_expresiones_opt RPAREN\n                | NUMBER\n                | FLOAT\n                | STRING\n                | IDENTIFIERexpression : expression PLUSPLUS\n                    | expression MINUSMINUS\n                    | PLUSPLUS expression\n                    | MINUSMINUS expressionconsolelog : CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLONcontrolEstructure : IF LPAREN expression RPAREN statement \n                        | IF LPAREN expression RPAREN statement ELSE statement \n                        | IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement \n                        | IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statementstatement : LBRACE instruction_list RBRACE\n                | letAssignment\n                | declaracion\n                | function\n                | consolelog\n                | expression SEMICOLON\n                | controlEstructure\n                | RETURN expression SEMICOLON\n                | forEstructureinstruction_list : instruction_list statement\n                        | statement\n                        | emptyempty :'
    
_lr_action_items = {'LET':([0,1,2,3,4,5,6,7,8,10,15,26,27,57,58,59,60,61,62,63,65,66,68,105,106,107,114,128,134,138,146,150,156,160,164,166,169,171,173,174,175,176,177,178,],[11,11,-2,-3,-4,-5,-6,-7,-8,-10,11,-1,-9,11,-83,-84,-74,-75,-76,-77,-79,-81,113,-73,-82,-78,-80,11,-12,-69,11,-11,-70,-68,11,11,11,-18,-24,11,-13,-69,11,-70,]),'FUNCTION':([0,1,2,3,4,5,6,7,8,10,15,26,27,57,58,59,60,61,62,63,65,66,105,106,107,114,128,134,138,146,150,156,160,164,166,169,171,173,174,175,176,177,178,],[13,13,-2,-3,-4,-5,-6,-7,-8,-10,13,-1,-9,13,-83,-84,-74,-75,-76,-77,-79,-81,-73,-82,-78,-80,13,-12,-69,13,-11,-70,-68,13,13,13,-18,-24,13,-13,-69,13,-70,]),'IF':([0,1,2,3,4,5,6,7,8,10,15,26,27,57,58,59,60,61,62,63,65,66,105,106,107,114,128,134,138,146,150,156,160,164,166,169,171,173,174,175,176,177,178,],[16,16,-2,-3,-4,-5,-6,-7,-8,-10,16,-1,-9,16,-83,-84,-74,-75,-76,-77,-79,-81,-73,-82,-78,-80,16,-12,-69,155,-11,-70,-68,16,16,16,-18,-24,16,-13,-69,155,-70,]),'FOR':([0,1,2,3,4,5,6,7,8,10,15,26,27,57,58,59,60,61,62,63,65,66,105,106,107,114,128,134,138,146,150,156,160,164,166,169,171,173,174,175,176,177,178,],[17,17,-2,-3,-4,-5,-6,-7,-8,-10,17,-1,-9,17,-83,-84,-74,-75,-76,-77,-79,-81,-73,-82,-78,-80,17,-12,-69,17,-11,-70,-68,17,17,17,-18,-24,17,-13,-69,17,-70,]),'LBRACE':([0,1,2,3,4,5,6,7,8,10,15,26,27,57,58,59,60,61,62,63,65,66,105,106,107,114,117,119,120,121,128,134,138,146,150,154,156,160,163,164,166,169,171,173,174,175,176,177,178,],[15,15,-2,-3,-4,-5,-6,-7,-8,-10,15,-1,-9,15,-83,-84,-74,-75,-76,-77,-79,-81,-73,-82,-78,-80,-32,-29,-30,-31,15,-12,-69,15,-11,164,-70,-68,-33,15,15,15,-18,-24,15,-13,-69,15,-70,]),'RETURN':([0,1,2,3,4,5,6,7,8,10,15,26,27,57,58,59,60,61,62,63,65,66,105,106,107,114,128,134,138,146,150,156,160,164,166,169,171,173,174,175,176,177,178,],[18,18,-2,-3,-4,-5,-6,-7,-8,-10,18,-1,-9,18,-83,-84,-74,-75,-76,-77,-79,-81,-73,-82,-78,-80,18,-12,-69,18,-11,-70,-68,18,18,18,-18,-24,18,-13,-69,18,-70,]),'NOT':([0,1,2,3,4,5,6,7,8,10,14,15,18,19,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,57,58,59,60,61,62,63,65,66,67,68,98,105,106,107,114,124,128,129,131,132,134,138,146,147,150,156,160,161,164,165,166,169,171,173,174,175,176,177,178,],[19,19,-2,-3,-4,-5,-6,-7,-8,-10,19,19,19,19,19,19,-1,-9,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-83,-84,-74,-75,-76,-77,-79,-81,19,19,19,-73,-82,-78,-80,19,19,19,19,19,-12,-69,19,19,-11,-70,-68,19,19,19,19,19,-18,-24,19,-13,-69,19,-70,]),'LPAREN':([0,1,2,3,4,5,6,7,8,10,12,14,15,16,17,18,19,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,55,57,58,59,60,61,62,63,65,66,67,68,98,105,106,107,114,115,124,128,129,131,132,134,138,146,147,150,155,156,160,161,164,165,166,169,171,173,174,175,176,177,178,],[14,14,-2,-3,-4,-5,-6,-7,-8,-10,54,14,14,67,68,14,14,14,14,-1,-9,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,103,14,-83,-84,-74,-75,-76,-77,-79,-81,14,14,14,-73,-82,-78,-80,131,14,14,14,14,14,-12,-69,14,14,-11,165,-70,-68,14,14,14,14,14,-18,-24,14,-13,-69,14,-70,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,10,11,13,14,15,18,19,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,59,60,61,62,63,65,66,67,68,97,98,103,105,106,107,113,114,124,128,129,131,132,134,136,138,140,145,146,147,150,152,156,160,161,164,165,166,169,171,173,174,175,176,177,178,],[12,12,-2,-3,-4,-5,-6,-7,-8,-10,53,55,12,12,12,12,12,12,-1,-9,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,95,12,12,12,-83,-84,-74,-75,-76,-77,-79,-81,12,12,117,12,125,-73,-82,-78,130,-80,12,12,12,12,12,-12,117,-69,117,117,12,12,-11,125,-70,-68,12,12,12,12,12,-18,-24,12,-13,-69,12,-70,]),'NUMBER':([0,1,2,3,4,5,6,7,8,10,14,15,18,19,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,57,58,59,60,61,62,63,65,66,67,68,98,105,106,107,114,124,128,129,131,132,134,138,146,147,150,156,160,161,164,165,166,169,171,173,174,175,176,177,178,],[20,20,-2,-3,-4,-5,-6,-7,-8,-10,20,20,20,20,20,20,-1,-9,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-83,-84,-74,-75,-76,-77,-79,-81,20,20,20,-73,-82,-78,-80,20,20,20,20,20,-12,-69,20,20,-11,-70,-68,20,20,20,20,20,-18,-24,20,-13,-69,20,-70,]),'FLOAT':([0,1,2,3,4,5,6,7,8,10,14,15,18,19,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,57,58,59,60,61,62,63,65,66,67,68,98,105,106,107,114,124,128,129,131,132,134,138,146,147,150,156,160,161,164,165,166,169,171,173,174,175,176,177,178,],[21,21,-2,-3,-4,-5,-6,-7,-8,-10,21,21,21,21,21,21,-1,-9,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-83,-84,-74,-75,-76,-77,-79,-81,21,21,21,-73,-82,-78,-80,21,21,21,21,21,-12,-69,21,21,-11,-70,-68,21,21,21,21,21,-18,-24,21,-13,-69,21,-70,]),'STRING':([0,1,2,3,4,5,6,7,8,10,14,15,18,19,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,57,58,59,60,61,62,63,65,66,67,68,98,105,106,107,114,124,128,129,131,132,134,138,146,147,150,156,160,161,164,165,166,169,171,173,174,175,176,177,178,],[22,22,-2,-3,-4,-5,-6,-7,-8,-10,22,22,22,22,22,22,-1,-9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-83,-84,-74,-75,-76,-77,-79,-81,22,22,22,-73,-82,-78,-80,22,22,22,22,22,-12,-69,22,22,-11,-70,-68,22,22,22,22,22,-18,-24,22,-13,-69,22,-70,]),'PLUSPLUS':([0,1,2,3,4,5,6,7,8,9,10,12,14,15,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,102,104,105,106,107,108,110,114,116,122,123,124,128,129,131,132,134,138,139,142,146,147,150,156,157,160,161,164,165,166,169,170,171,173,174,175,176,177,178,],[23,23,-2,-3,-4,-5,-6,-7,-8,51,-10,-63,23,23,23,23,-60,-61,-62,23,23,-1,-9,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-64,-65,23,51,23,-83,-84,-74,-75,-76,-77,51,-79,-81,23,23,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-57,51,23,51,-56,-73,-82,-78,51,51,-80,-58,51,-59,23,23,23,23,23,-12,-69,51,51,23,23,-11,-70,51,-68,23,23,23,23,23,51,-18,-24,23,-13,-69,23,-70,]),'MINUSMINUS':([0,1,2,3,4,5,6,7,8,9,10,12,14,15,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,102,104,105,106,107,108,110,114,116,122,123,124,128,129,131,132,134,138,139,142,146,147,150,156,157,160,161,164,165,166,169,170,171,173,174,175,176,177,178,],[24,24,-2,-3,-4,-5,-6,-7,-8,52,-10,-63,24,24,24,24,-60,-61,-62,24,24,-1,-9,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-64,-65,24,52,24,-83,-84,-74,-75,-76,-77,52,-79,-81,24,24,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-57,52,24,52,-56,-73,-82,-78,52,52,-80,-58,52,-59,24,24,24,24,24,-12,-69,52,52,24,24,-11,-70,52,-68,24,24,24,24,24,52,-18,-24,24,-13,-69,24,-70,]),'CONSOLE':([0,1,2,3,4,5,6,7,8,10,15,26,27,57,58,59,60,61,62,63,65,66,105,106,107,114,128,134,138,146,150,156,160,164,166,169,171,173,174,175,176,177,178,],[25,25,-2,-3,-4,-5,-6,-7,-8,-10,25,-1,-9,25,-83,-84,-74,-75,-76,-77,-79,-81,-73,-82,-78,-80,25,-12,-69,25,-11,-70,-68,25,25,25,-18,-24,25,-13,-69,25,-70,]),'$end':([1,2,3,4,5,6,7,8,10,26,27,60,61,62,63,65,66,105,107,114,134,138,150,156,160,171,173,175,176,178,],[0,-2,-3,-4,-5,-6,-7,-8,-10,-1,-9,-74,-75,-76,-77,-79,-81,-73,-78,-80,-12,-69,-11,-70,-68,-18,-24,-13,-69,-70,]),'SEMICOLON':([9,12,20,21,22,51,52,64,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,104,109,110,111,112,116,122,123,134,139,142,149,150,172,],[27,-63,-60,-61,-62,-64,-65,107,-85,114,-55,-66,-67,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,-56,129,-20,-19,-21,-58,134,-59,-12,147,150,160,-11,175,]),'PLUS':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[28,-63,-60,-61,-62,-64,-65,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-57,28,28,-56,28,28,-58,28,-59,28,28,28,28,]),'MINUS':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[29,-63,-60,-61,-62,-64,-65,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-57,29,29,-56,29,29,-58,29,-59,29,29,29,29,]),'TIMES':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[30,-63,-60,-61,-62,-64,-65,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-57,30,30,-56,30,30,-58,30,-59,30,30,30,30,]),'DIV':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[31,-63,-60,-61,-62,-64,-65,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-57,31,31,-56,31,31,-58,31,-59,31,31,31,31,]),'MOD':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[32,-63,-60,-61,-62,-64,-65,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-57,32,32,-56,32,32,-58,32,-59,32,32,32,32,]),'PLUS_ASSIGN':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[33,-63,-60,-61,-62,-64,-65,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-57,33,33,-56,33,33,-58,33,-59,33,33,33,33,]),'MINUS_ASSIGN':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[34,-63,-60,-61,-62,-64,-65,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-57,34,34,-56,34,34,-58,34,-59,34,34,34,34,]),'MULT_ASSIGN':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[35,-63,-60,-61,-62,-64,-65,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-57,35,35,-56,35,35,-58,35,-59,35,35,35,35,]),'DIV_ASSIGN':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[36,-63,-60,-61,-62,-64,-65,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-57,36,36,-56,36,36,-58,36,-59,36,36,36,36,]),'MOD_ASSIGN':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[37,-63,-60,-61,-62,-64,-65,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-57,37,37,-56,37,37,-58,37,-59,37,37,37,37,]),'POT':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[38,-63,-60,-61,-62,-64,-65,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-57,38,38,-56,38,38,-58,38,-59,38,38,38,38,]),'AND':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[39,-63,-60,-61,-62,-64,-65,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-57,39,39,-56,39,39,-58,39,-59,39,39,39,39,]),'OR':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[40,-63,-60,-61,-62,-64,-65,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-57,40,40,-56,40,40,-58,40,-59,40,40,40,40,]),'EQ':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[41,-63,-60,-61,-62,-64,-65,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-57,41,41,-56,41,41,-58,41,-59,41,41,41,41,]),'NEQ':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[42,-63,-60,-61,-62,-64,-65,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-57,42,42,-56,42,42,-58,42,-59,42,42,42,42,]),'STRICT_EQ':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[43,-63,-60,-61,-62,-64,-65,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-57,43,43,-56,43,43,-58,43,-59,43,43,43,43,]),'STRICT_NEQ':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[44,-63,-60,-61,-62,-64,-65,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-57,44,44,-56,44,44,-58,44,-59,44,44,44,44,]),'LT':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[45,-63,-60,-61,-62,-64,-65,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-57,45,45,-56,45,45,-58,45,-59,45,45,45,45,]),'GT':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[46,-63,-60,-61,-62,-64,-65,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-57,46,46,-56,46,46,-58,46,-59,46,46,46,46,]),'LE':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[47,-63,-60,-61,-62,-64,-65,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-57,47,47,-56,47,47,-58,47,-59,47,47,47,47,]),'GE':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[48,-63,-60,-61,-62,-64,-65,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-57,48,48,-56,48,48,-58,48,-59,48,48,48,48,]),'DOT':([9,12,20,21,22,25,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,122,123,139,142,157,170,],[49,-63,-60,-61,-62,73,-64,-65,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-57,49,49,-56,49,49,-58,49,-59,49,49,49,49,]),'LBRACKET':([9,12,20,21,22,51,52,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,104,108,110,116,117,118,119,120,121,122,123,139,142,143,144,148,151,154,157,163,170,],[50,-63,-60,-61,-62,-64,-65,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-57,50,50,-56,50,50,-58,-32,133,-29,-30,-31,50,-59,50,50,-33,153,153,161,153,50,-33,50,]),'RPAREN':([12,20,21,22,51,52,54,56,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,99,100,101,102,103,104,108,116,117,119,120,121,123,126,127,131,135,141,144,147,152,157,158,159,162,163,170,],[-63,-60,-61,-62,-64,-65,-85,104,-55,-66,-67,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,123,-14,-15,-16,-85,-56,128,-58,-32,-29,-30,-31,-59,137,-27,-85,-17,149,-25,-85,-85,-22,166,-23,-26,-33,174,]),'RBRACKET':([12,20,21,22,51,52,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,102,104,116,123,133,135,153,161,167,],[-63,-60,-61,-62,-64,-65,-55,-66,-67,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,116,-14,-15,-16,-56,-58,-59,143,-17,163,-85,172,]),'COMMA':([12,20,21,22,51,52,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,104,116,117,119,120,121,123,144,163,],[-63,-60,-61,-62,-64,-65,-55,-66,-67,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-57,124,-56,-58,-32,-29,-30,-31,-59,152,-33,]),'RBRACE':([15,57,58,59,60,61,62,63,65,66,105,106,107,114,134,138,150,156,160,164,168,169,171,173,175,176,178,],[-85,105,-83,-84,-74,-75,-76,-77,-79,-81,-73,-82,-78,-80,-12,-69,-11,-70,-68,-85,173,-28,-18,-24,-13,-69,-70,]),'COLON':([53,125,130,137,],[97,136,140,145,]),'EQUAL':([53,117,118,119,120,121,130,143,148,163,],[98,-32,132,-29,-30,-31,98,151,132,-33,]),'ELSE':([60,61,62,63,65,66,105,107,114,134,138,150,156,160,171,173,175,176,178,],[-74,-75,-76,-77,-79,-81,-73,-78,-80,-12,146,-11,-70,-68,-18,-24,-13,177,-70,]),'LOG':([73,],[115,]),'NUMBER_TYPE':([97,136,140,145,],[119,119,119,119,]),'STRING_TYPE':([97,136,140,145,],[120,120,120,120,]),'BOOLEAN_TYPE':([97,136,140,145,],[121,121,121,121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'element':([0,1,],[2,26,]),'letAssignment':([0,1,15,57,68,128,146,164,166,169,174,177,],[3,3,60,60,111,60,60,60,60,60,60,60,]),'declaracion':([0,1,15,57,128,146,164,166,169,174,177,],[4,4,61,61,61,61,61,61,61,61,61,]),'function':([0,1,15,57,128,146,164,166,169,174,177,],[5,5,62,62,62,62,62,62,62,62,62,]),'controlEstructure':([0,1,15,57,128,146,164,166,169,174,177,],[6,6,65,65,65,65,65,65,65,65,65,]),'forEstructure':([0,1,15,57,128,146,164,166,169,174,177,],[7,7,66,66,66,66,66,66,66,66,66,]),'statement':([0,1,15,57,128,146,164,166,169,174,177,],[8,8,58,106,138,156,58,171,106,176,178,]),'expression':([0,1,14,15,18,19,23,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,57,67,68,98,124,128,129,131,132,146,147,161,164,165,166,169,174,177,],[9,9,56,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,102,64,108,110,122,102,64,139,102,142,64,157,102,64,170,64,64,64,64,]),'consolelog':([0,1,15,57,128,146,164,166,169,174,177,],[10,10,63,63,63,63,63,63,63,63,63,]),'instruction_list':([15,164,],[57,169,]),'empty':([15,54,68,103,131,147,152,161,164,],[59,101,112,127,101,159,127,101,59,]),'lista_expresiones_opt':([54,131,161,],[99,141,167,]),'lista_expresiones':([54,124,131,161,],[100,135,100,100,]),'for_init':([68,],[109,]),'type':([97,136,140,145,],[118,144,148,154,]),'parameters':([103,152,],[126,162,]),'for_update':([147,],[158,]),'body_function':([164,],[168,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program element','program',2,'p_program','parser.py',15),
  ('program -> element','program',1,'p_program','parser.py',16),
  ('element -> letAssignment','element',1,'p_element','parser.py',20),
  ('element -> declaracion','element',1,'p_element','parser.py',21),
  ('element -> function','element',1,'p_element','parser.py',22),
  ('element -> controlEstructure','element',1,'p_element','parser.py',23),
  ('element -> forEstructure','element',1,'p_element','parser.py',24),
  ('element -> statement','element',1,'p_element','parser.py',25),
  ('element -> expression SEMICOLON','element',2,'p_element','parser.py',26),
  ('element -> consolelog','element',1,'p_element','parser.py',27),
  ('letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON','letAssignment',7,'p_letAssignment','parser.py',32),
  ('letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON','letAssignment',5,'p_letAssignment_no_type','parser.py',36),
  ('declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON','declaracion',11,'p_declaracion','parser.py',41),
  ('lista_expresiones_opt -> lista_expresiones','lista_expresiones_opt',1,'p_lista_expresiones_opt','parser.py',45),
  ('lista_expresiones_opt -> empty','lista_expresiones_opt',1,'p_lista_expresiones_opt','parser.py',46),
  ('lista_expresiones -> expression','lista_expresiones',1,'p_lista_expresiones','parser.py',50),
  ('lista_expresiones -> expression COMMA lista_expresiones','lista_expresiones',3,'p_lista_expresiones','parser.py',51),
  ('forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN statement','forEstructure',9,'p_forEstructure','parser.py',56),
  ('for_init -> letAssignment','for_init',1,'p_for_init','parser.py',60),
  ('for_init -> expression','for_init',1,'p_for_init','parser.py',61),
  ('for_init -> empty','for_init',1,'p_for_init','parser.py',62),
  ('for_update -> expression','for_update',1,'p_for_update','parser.py',66),
  ('for_update -> empty','for_update',1,'p_for_update','parser.py',67),
  ('function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE','function',10,'p_function','parser.py',72),
  ('parameters -> IDENTIFIER COLON type','parameters',3,'p_parameters','parser.py',76),
  ('parameters -> IDENTIFIER COLON type COMMA parameters','parameters',5,'p_parameters','parser.py',77),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',78),
  ('body_function -> instruction_list','body_function',1,'p_body_function','parser.py',82),
  ('type -> NUMBER_TYPE','type',1,'p_type','parser.py',87),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',88),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','parser.py',89),
  ('type -> IDENTIFIER','type',1,'p_type','parser.py',90),
  ('type -> type LBRACKET RBRACKET','type',3,'p_type','parser.py',91),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',96),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',97),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser.py',98),
  ('expression -> expression DIV expression','expression',3,'p_expression','parser.py',99),
  ('expression -> expression MOD expression','expression',3,'p_expression','parser.py',100),
  ('expression -> expression PLUS_ASSIGN expression','expression',3,'p_expression','parser.py',101),
  ('expression -> expression MINUS_ASSIGN expression','expression',3,'p_expression','parser.py',102),
  ('expression -> expression MULT_ASSIGN expression','expression',3,'p_expression','parser.py',103),
  ('expression -> expression DIV_ASSIGN expression','expression',3,'p_expression','parser.py',104),
  ('expression -> expression MOD_ASSIGN expression','expression',3,'p_expression','parser.py',105),
  ('expression -> expression POT expression','expression',3,'p_expression','parser.py',106),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',107),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',108),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',109),
  ('expression -> expression NEQ expression','expression',3,'p_expression','parser.py',110),
  ('expression -> expression STRICT_EQ expression','expression',3,'p_expression','parser.py',111),
  ('expression -> expression STRICT_NEQ expression','expression',3,'p_expression','parser.py',112),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',113),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',114),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',115),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',116),
  ('expression -> NOT expression','expression',2,'p_expression','parser.py',117),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser.py',118),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression','parser.py',119),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_expression','parser.py',120),
  ('expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN','expression',4,'p_expression','parser.py',121),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',122),
  ('expression -> FLOAT','expression',1,'p_expression','parser.py',123),
  ('expression -> STRING','expression',1,'p_expression','parser.py',124),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parser.py',125),
  ('expression -> expression PLUSPLUS','expression',2,'p_expression_increment','parser.py',129),
  ('expression -> expression MINUSMINUS','expression',2,'p_expression_increment','parser.py',130),
  ('expression -> PLUSPLUS expression','expression',2,'p_expression_increment','parser.py',131),
  ('expression -> MINUSMINUS expression','expression',2,'p_expression_increment','parser.py',132),
  ('consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON','consolelog',7,'p_consolelog','parser.py',136),
  ('controlEstructure -> IF LPAREN expression RPAREN statement','controlEstructure',5,'p_controlEstructure','parser.py',141),
  ('controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement','controlEstructure',7,'p_controlEstructure','parser.py',142),
  ('controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement','controlEstructure',11,'p_controlEstructure','parser.py',143),
  ('controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement','controlEstructure',13,'p_controlEstructure','parser.py',144),
  ('statement -> LBRACE instruction_list RBRACE','statement',3,'p_statement','parser.py',149),
  ('statement -> letAssignment','statement',1,'p_statement','parser.py',150),
  ('statement -> declaracion','statement',1,'p_statement','parser.py',151),
  ('statement -> function','statement',1,'p_statement','parser.py',152),
  ('statement -> consolelog','statement',1,'p_statement','parser.py',153),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',154),
  ('statement -> controlEstructure','statement',1,'p_statement','parser.py',155),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement','parser.py',156),
  ('statement -> forEstructure','statement',1,'p_statement','parser.py',157),
  ('instruction_list -> instruction_list statement','instruction_list',2,'p_instruction_list','parser.py',161),
  ('instruction_list -> statement','instruction_list',1,'p_instruction_list','parser.py',162),
  ('instruction_list -> empty','instruction_list',1,'p_instruction_list','parser.py',163),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',168),
]
