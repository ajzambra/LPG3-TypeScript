Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANY
    AS
    AWAIT
    BIGINT_TYPE
    CATCH
    EXPORT
    FINALLY
    IMPORT
    NEW
    NULL_TYPE
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    SYMBOL_TYPE
    THIS
    TRY
    TYPE
    UNDEFINED_TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> program element
Rule 2     program -> element
Rule 3     element -> letAssignment
Rule 4     element -> declaracion
Rule 5     element -> function
Rule 6     element -> arrow_function
Rule 7     element -> async_function
Rule 8     element -> constAssignment
Rule 9     element -> enum_definition
Rule 10    element -> controlEstructure
Rule 11    element -> class_definition
Rule 12    element -> statement
Rule 13    element -> interface
Rule 14    element -> assignment
Rule 15    element -> expression SEMICOLON
Rule 16    element -> consolelog
Rule 17    assignment -> IDENTIFIER EQUAL expression SEMICOLON
Rule 18    letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 19    letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON
Rule 20    letAssignment -> LET IDENTIFIER COLON type SEMICOLON
Rule 21    varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 22    varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON
Rule 23    declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
Rule 24    lista_expresiones_opt -> lista_expresiones
Rule 25    lista_expresiones_opt -> empty
Rule 26    lista_expresiones -> expression
Rule 27    lista_expresiones -> expression COMMA lista_expresiones
Rule 28    push_loop -> <empty>
Rule 29    pop_loop -> <empty>
Rule 30    push_switch -> <empty>
Rule 31    pop_switch -> <empty>
Rule 32    forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
Rule 33    forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
Rule 34    for_init -> LET IDENTIFIER EQUAL expression
Rule 35    for_init -> LET IDENTIFIER COLON type EQUAL expression
Rule 36    for_init -> IDENTIFIER EQUAL expression
Rule 37    for_init -> expression
Rule 38    for_init -> empty
Rule 39    for_update -> expression
Rule 40    for_update -> expression PLUSPLUS
Rule 41    for_update -> expression MINUSMINUS
Rule 42    for_update -> PLUSPLUS expression
Rule 43    for_update -> MINUSMINUS expression
Rule 44    for_update -> empty
Rule 45    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
Rule 46    statement -> RETURN expression SEMICOLON
Rule 47    parameters -> IDENTIFIER COLON type
Rule 48    parameters -> IDENTIFIER COLON type COMMA parameters
Rule 49    parameters -> empty
Rule 50    body_function -> instruction_list
Rule 51    body_function -> empty
Rule 52    type -> LBRACKET type COMMA type RBRACKET
Rule 53    expression -> LBRACKET expression COMMA expression RBRACKET
Rule 54    type -> NUMBER_TYPE
Rule 55    type -> STRING_TYPE
Rule 56    type -> BOOLEAN_TYPE
Rule 57    type -> IDENTIFIER
Rule 58    type -> VOID
Rule 59    type -> type LBRACKET RBRACKET
Rule 60    expression -> expression PLUS expression
Rule 61    expression -> expression MINUS expression
Rule 62    expression -> expression TIMES expression
Rule 63    expression -> expression DIV expression
Rule 64    expression -> expression MOD expression
Rule 65    expression -> expression PLUS_ASSIGN expression
Rule 66    expression -> expression MINUS_ASSIGN expression
Rule 67    expression -> expression MULT_ASSIGN expression
Rule 68    expression -> expression DIV_ASSIGN expression
Rule 69    expression -> expression MOD_ASSIGN expression
Rule 70    expression -> expression POT expression
Rule 71    expression -> expression AND expression
Rule 72    expression -> expression OR expression
Rule 73    expression -> expression EQ expression
Rule 74    expression -> expression NEQ expression
Rule 75    expression -> expression STRICT_EQ expression
Rule 76    expression -> expression STRICT_NEQ expression
Rule 77    expression -> expression LT expression
Rule 78    expression -> expression GT expression
Rule 79    expression -> expression LE expression
Rule 80    expression -> expression GE expression
Rule 81    expression -> PROMPT LPAREN STRING RPAREN
Rule 82    expression -> NOT expression
Rule 83    expression -> LPAREN expression RPAREN
Rule 84    expression -> expression DOT IDENTIFIER
Rule 85    expression -> expression LBRACKET expression RBRACKET
Rule 86    expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN
Rule 87    expression -> NUMBER
Rule 88    expression -> FLOAT
Rule 89    expression -> STRING
Rule 90    expression -> IDENTIFIER
Rule 91    expression -> TRUE
Rule 92    expression -> FALSE
Rule 93    expression -> expression PLUSPLUS
Rule 94    expression -> expression MINUSMINUS
Rule 95    expression -> PLUSPLUS expression
Rule 96    expression -> MINUSMINUS expression
Rule 97    consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
Rule 98    controlEstructure -> IF LPAREN expression RPAREN statement
Rule 99    controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement
Rule 100   controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
Rule 101   controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
Rule 102   statement -> LBRACE instruction_list RBRACE
Rule 103   statement -> letAssignment
Rule 104   statement -> varAssignment
Rule 105   statement -> constAssignment
Rule 106   statement -> declaracion
Rule 107   statement -> function
Rule 108   statement -> arrow_function
Rule 109   statement -> async_function
Rule 110   statement -> consolelog
Rule 111   statement -> expression SEMICOLON
Rule 112   statement -> controlEstructure
Rule 113   statement -> forEstructure
Rule 114   statement -> RETURN SEMICOLON
Rule 115   statement -> class_definition
Rule 116   statement -> LBRACE RBRACE
Rule 117   instruction_list -> instruction_list statement
Rule 118   instruction_list -> statement
Rule 119   instruction_list -> empty
Rule 120   empty -> <empty>
Rule 121   constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
Rule 122   constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON
Rule 123   class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 124   class_body -> class_body class_element
Rule 125   class_body -> class_element
Rule 126   class_body -> empty
Rule 127   class_element -> function
Rule 128   class_element -> letAssignment
Rule 129   class_element -> varAssignment
Rule 130   class_element -> constAssignment
Rule 131   controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
Rule 132   case_list -> case_list case
Rule 133   case_list -> case
Rule 134   case_list -> empty
Rule 135   case -> CASE expression COLON instruction_list
Rule 136   case -> DEFAULT COLON instruction_list
Rule 137   statement -> BREAK SEMICOLON
Rule 138   statement -> CONTINUE SEMICOLON
Rule 139   enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE
Rule 140   enum_members -> IDENTIFIER
Rule 141   enum_members -> IDENTIFIER COMMA enum_members
Rule 142   async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
Rule 143   controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop
Rule 144   arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
Rule 145   interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE
Rule 146   interface_body -> interface_body interface_property
Rule 147   interface_body -> interface_property
Rule 148   interface_body -> empty
Rule 149   interface_property -> IDENTIFIER COLON type SEMICOLON
Rule 150   expression -> LBRACE object_properties RBRACE
Rule 151   object_properties -> object_property
Rule 152   object_properties -> object_property COMMA object_properties
Rule 153   object_properties -> empty
Rule 154   object_property -> IDENTIFIER COLON expression

Terminals, with rules where they appear

AND                  : 71
ANY                  : 
ARROW                : 144
AS                   : 
ASYNC                : 142
AWAIT                : 
BIGINT_TYPE          : 
BOOLEAN_TYPE         : 56
BREAK                : 137
CASE                 : 135
CATCH                : 
CLASS                : 123
COLON                : 18 20 21 23 35 45 47 48 121 135 136 142 149 154
COMMA                : 27 48 52 53 141 152
CONSOLE              : 97
CONST                : 33 121 122 144
CONTINUE             : 138
DEFAULT              : 136
DIV                  : 63
DIV_ASSIGN           : 68
DOT                  : 84 97
ELSE                 : 99 100 101 101
ENUM                 : 139
EQ                   : 73
EQUAL                : 17 18 19 21 22 23 34 35 36 121 122 144
EXPORT               : 
FALSE                : 92
FINALLY              : 
FLOAT                : 88
FOR                  : 32 33
FUNCTION             : 45 142
GE                   : 80
GT                   : 78
IDENTIFIER           : 17 18 19 20 21 22 23 33 33 34 35 36 45 47 48 57 84 86 90 121 122 123 139 140 141 142 144 145 149 154
IF                   : 98 99 100 100 101 101
IMPORT               : 
INTERFACE            : 145
LBRACE               : 32 45 102 116 123 131 139 142 144 145 150
LBRACKET             : 23 23 52 53 59 85
LE                   : 79
LET                  : 18 19 20 23 34 35
LOG                  : 97
LPAREN               : 32 33 45 81 83 86 97 98 99 100 100 101 101 131 142 143 144
LT                   : 77
MINUS                : 61
MINUSMINUS           : 41 43 94 96
MINUS_ASSIGN         : 66
MOD                  : 64
MOD_ASSIGN           : 69
MULT_ASSIGN          : 67
NEQ                  : 74
NEW                  : 
NOT                  : 82
NULL_TYPE            : 
NUMBER               : 87
NUMBER_TYPE          : 54
OF                   : 33
OR                   : 72
PLUS                 : 60
PLUSPLUS             : 40 42 93 95
PLUS_ASSIGN          : 65
POT                  : 70
PRIVATE              : 
PROMPT               : 81
PROTECTED            : 
PUBLIC               : 
RBRACE               : 32 45 102 116 123 131 139 142 144 145 150
RBRACKET             : 23 23 52 53 59 85
RETURN               : 46 114
RPAREN               : 32 33 45 81 83 86 97 98 99 100 100 101 101 131 142 143 144
SEMICOLON            : 15 17 18 19 20 21 22 23 32 32 46 97 111 114 121 122 137 138 144 149
STATIC               : 
STRICT_EQ            : 75
STRICT_NEQ           : 76
STRING               : 81 89
STRING_TYPE          : 55
SUPER                : 
SWITCH               : 131
SYMBOL_TYPE          : 
THIS                 : 
TIMES                : 62
TRUE                 : 91
TRY                  : 
TYPE                 : 
UNDEFINED_TYPE       : 
VAR                  : 21 22
VOID                 : 58
WHILE                : 143
error                : 

Nonterminals, with rules where they appear

arrow_function       : 6 108
assignment           : 14
async_function       : 7 109
body_function        : 45 142 144
case                 : 132 133
case_list            : 131 132
class_body           : 123 124
class_definition     : 11 115
class_element        : 124 125
consolelog           : 16 110
constAssignment      : 8 105 130
controlEstructure    : 10 112
declaracion          : 4 106
element              : 1 2
empty                : 25 38 44 49 51 119 126 134 148 153
enum_definition      : 9
enum_members         : 139 141
expression           : 15 17 18 19 21 22 26 27 32 34 35 36 37 39 40 41 42 43 46 53 53 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 82 83 84 85 85 93 94 95 96 98 99 100 100 101 101 111 121 122 131 135 143 154
forEstructure        : 113
for_init             : 32
for_update           : 32
function             : 5 107 127
instruction_list     : 32 50 102 117 135 136
interface            : 13
interface_body       : 145 146
interface_property   : 146 147
letAssignment        : 3 103 128
lista_expresiones    : 24 27
lista_expresiones_opt : 23 86 97
object_properties    : 150 152
object_property      : 151 152
parameters           : 45 48 142 144
pop_loop             : 32 33 143
pop_switch           : 131
program              : 1 0
push_loop            : 32 33 143
push_switch          : 131
statement            : 12 33 98 99 99 100 100 101 101 101 117 118 143
type                 : 18 20 21 23 35 45 47 48 52 52 59 121 142 149
varAssignment        : 104 129

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program element
    (2) program -> . element
    (3) element -> . letAssignment
    (4) element -> . declaracion
    (5) element -> . function
    (6) element -> . arrow_function
    (7) element -> . async_function
    (8) element -> . constAssignment
    (9) element -> . enum_definition
    (10) element -> . controlEstructure
    (11) element -> . class_definition
    (12) element -> . statement
    (13) element -> . interface
    (14) element -> . assignment
    (15) element -> . expression SEMICOLON
    (16) element -> . consolelog
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (139) enum_definition -> . ENUM IDENTIFIER LBRACE enum_members RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (145) interface -> . INTERFACE IDENTIFIER LBRACE interface_body RBRACE
    (17) assignment -> . IDENTIFIER EQUAL expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    LET             shift and go to state 17
    FUNCTION        shift and go to state 20
    CONST           shift and go to state 23
    ASYNC           shift and go to state 24
    ENUM            shift and go to state 25
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    CLASS           shift and go to state 29
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    INTERFACE       shift and go to state 35
    IDENTIFIER      shift and go to state 18
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    CONSOLE         shift and go to state 45
    VAR             shift and go to state 46
    FOR             shift and go to state 47

    program                        shift and go to state 1
    element                        shift and go to state 2
    letAssignment                  shift and go to state 3
    declaracion                    shift and go to state 4
    function                       shift and go to state 5
    arrow_function                 shift and go to state 6
    async_function                 shift and go to state 7
    constAssignment                shift and go to state 8
    enum_definition                shift and go to state 9
    controlEstructure              shift and go to state 10
    class_definition               shift and go to state 11
    statement                      shift and go to state 12
    interface                      shift and go to state 13
    assignment                     shift and go to state 14
    expression                     shift and go to state 15
    consolelog                     shift and go to state 16
    varAssignment                  shift and go to state 31
    forEstructure                  shift and go to state 32

state 1

    (0) S' -> program .
    (1) program -> program . element
    (3) element -> . letAssignment
    (4) element -> . declaracion
    (5) element -> . function
    (6) element -> . arrow_function
    (7) element -> . async_function
    (8) element -> . constAssignment
    (9) element -> . enum_definition
    (10) element -> . controlEstructure
    (11) element -> . class_definition
    (12) element -> . statement
    (13) element -> . interface
    (14) element -> . assignment
    (15) element -> . expression SEMICOLON
    (16) element -> . consolelog
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (139) enum_definition -> . ENUM IDENTIFIER LBRACE enum_members RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (145) interface -> . INTERFACE IDENTIFIER LBRACE interface_body RBRACE
    (17) assignment -> . IDENTIFIER EQUAL expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    LET             shift and go to state 17
    FUNCTION        shift and go to state 20
    CONST           shift and go to state 23
    ASYNC           shift and go to state 24
    ENUM            shift and go to state 25
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    CLASS           shift and go to state 29
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    INTERFACE       shift and go to state 35
    IDENTIFIER      shift and go to state 18
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    CONSOLE         shift and go to state 45
    VAR             shift and go to state 46
    FOR             shift and go to state 47

    element                        shift and go to state 48
    letAssignment                  shift and go to state 3
    declaracion                    shift and go to state 4
    function                       shift and go to state 5
    arrow_function                 shift and go to state 6
    async_function                 shift and go to state 7
    constAssignment                shift and go to state 8
    enum_definition                shift and go to state 9
    controlEstructure              shift and go to state 10
    class_definition               shift and go to state 11
    statement                      shift and go to state 12
    interface                      shift and go to state 13
    assignment                     shift and go to state 14
    expression                     shift and go to state 15
    consolelog                     shift and go to state 16
    varAssignment                  shift and go to state 31
    forEstructure                  shift and go to state 32

state 2

    (2) program -> element .

    LET             reduce using rule 2 (program -> element .)
    FUNCTION        reduce using rule 2 (program -> element .)
    CONST           reduce using rule 2 (program -> element .)
    ASYNC           reduce using rule 2 (program -> element .)
    ENUM            reduce using rule 2 (program -> element .)
    IF              reduce using rule 2 (program -> element .)
    SWITCH          reduce using rule 2 (program -> element .)
    WHILE           reduce using rule 2 (program -> element .)
    CLASS           reduce using rule 2 (program -> element .)
    RETURN          reduce using rule 2 (program -> element .)
    LBRACE          reduce using rule 2 (program -> element .)
    BREAK           reduce using rule 2 (program -> element .)
    CONTINUE        reduce using rule 2 (program -> element .)
    INTERFACE       reduce using rule 2 (program -> element .)
    IDENTIFIER      reduce using rule 2 (program -> element .)
    LBRACKET        reduce using rule 2 (program -> element .)
    PROMPT          reduce using rule 2 (program -> element .)
    NOT             reduce using rule 2 (program -> element .)
    LPAREN          reduce using rule 2 (program -> element .)
    NUMBER          reduce using rule 2 (program -> element .)
    FLOAT           reduce using rule 2 (program -> element .)
    STRING          reduce using rule 2 (program -> element .)
    TRUE            reduce using rule 2 (program -> element .)
    FALSE           reduce using rule 2 (program -> element .)
    PLUSPLUS        reduce using rule 2 (program -> element .)
    MINUSMINUS      reduce using rule 2 (program -> element .)
    CONSOLE         reduce using rule 2 (program -> element .)
    VAR             reduce using rule 2 (program -> element .)
    FOR             reduce using rule 2 (program -> element .)
    $end            reduce using rule 2 (program -> element .)


state 3

    (3) element -> letAssignment .
    (103) statement -> letAssignment .

  ! reduce/reduce conflict for LET resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONST resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for ASYNC resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for ENUM resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for IF resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for SWITCH resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CLASS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LBRACE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for BREAK resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for PROMPT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for NOT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for LPAREN resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for NUMBER resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FLOAT resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for STRING resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for VAR resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (element -> letAssignment .)
  ! reduce/reduce conflict for $end resolved using rule 3 (element -> letAssignment .)
    LET             reduce using rule 3 (element -> letAssignment .)
    FUNCTION        reduce using rule 3 (element -> letAssignment .)
    CONST           reduce using rule 3 (element -> letAssignment .)
    ASYNC           reduce using rule 3 (element -> letAssignment .)
    ENUM            reduce using rule 3 (element -> letAssignment .)
    IF              reduce using rule 3 (element -> letAssignment .)
    SWITCH          reduce using rule 3 (element -> letAssignment .)
    WHILE           reduce using rule 3 (element -> letAssignment .)
    CLASS           reduce using rule 3 (element -> letAssignment .)
    RETURN          reduce using rule 3 (element -> letAssignment .)
    LBRACE          reduce using rule 3 (element -> letAssignment .)
    BREAK           reduce using rule 3 (element -> letAssignment .)
    CONTINUE        reduce using rule 3 (element -> letAssignment .)
    INTERFACE       reduce using rule 3 (element -> letAssignment .)
    IDENTIFIER      reduce using rule 3 (element -> letAssignment .)
    LBRACKET        reduce using rule 3 (element -> letAssignment .)
    PROMPT          reduce using rule 3 (element -> letAssignment .)
    NOT             reduce using rule 3 (element -> letAssignment .)
    LPAREN          reduce using rule 3 (element -> letAssignment .)
    NUMBER          reduce using rule 3 (element -> letAssignment .)
    FLOAT           reduce using rule 3 (element -> letAssignment .)
    STRING          reduce using rule 3 (element -> letAssignment .)
    TRUE            reduce using rule 3 (element -> letAssignment .)
    FALSE           reduce using rule 3 (element -> letAssignment .)
    PLUSPLUS        reduce using rule 3 (element -> letAssignment .)
    MINUSMINUS      reduce using rule 3 (element -> letAssignment .)
    CONSOLE         reduce using rule 3 (element -> letAssignment .)
    VAR             reduce using rule 3 (element -> letAssignment .)
    FOR             reduce using rule 3 (element -> letAssignment .)
    $end            reduce using rule 3 (element -> letAssignment .)

  ! LET             [ reduce using rule 103 (statement -> letAssignment .) ]
  ! FUNCTION        [ reduce using rule 103 (statement -> letAssignment .) ]
  ! CONST           [ reduce using rule 103 (statement -> letAssignment .) ]
  ! ASYNC           [ reduce using rule 103 (statement -> letAssignment .) ]
  ! ENUM            [ reduce using rule 103 (statement -> letAssignment .) ]
  ! IF              [ reduce using rule 103 (statement -> letAssignment .) ]
  ! SWITCH          [ reduce using rule 103 (statement -> letAssignment .) ]
  ! WHILE           [ reduce using rule 103 (statement -> letAssignment .) ]
  ! CLASS           [ reduce using rule 103 (statement -> letAssignment .) ]
  ! RETURN          [ reduce using rule 103 (statement -> letAssignment .) ]
  ! LBRACE          [ reduce using rule 103 (statement -> letAssignment .) ]
  ! BREAK           [ reduce using rule 103 (statement -> letAssignment .) ]
  ! CONTINUE        [ reduce using rule 103 (statement -> letAssignment .) ]
  ! INTERFACE       [ reduce using rule 103 (statement -> letAssignment .) ]
  ! IDENTIFIER      [ reduce using rule 103 (statement -> letAssignment .) ]
  ! LBRACKET        [ reduce using rule 103 (statement -> letAssignment .) ]
  ! PROMPT          [ reduce using rule 103 (statement -> letAssignment .) ]
  ! NOT             [ reduce using rule 103 (statement -> letAssignment .) ]
  ! LPAREN          [ reduce using rule 103 (statement -> letAssignment .) ]
  ! NUMBER          [ reduce using rule 103 (statement -> letAssignment .) ]
  ! FLOAT           [ reduce using rule 103 (statement -> letAssignment .) ]
  ! STRING          [ reduce using rule 103 (statement -> letAssignment .) ]
  ! TRUE            [ reduce using rule 103 (statement -> letAssignment .) ]
  ! FALSE           [ reduce using rule 103 (statement -> letAssignment .) ]
  ! PLUSPLUS        [ reduce using rule 103 (statement -> letAssignment .) ]
  ! MINUSMINUS      [ reduce using rule 103 (statement -> letAssignment .) ]
  ! CONSOLE         [ reduce using rule 103 (statement -> letAssignment .) ]
  ! VAR             [ reduce using rule 103 (statement -> letAssignment .) ]
  ! FOR             [ reduce using rule 103 (statement -> letAssignment .) ]
  ! $end            [ reduce using rule 103 (statement -> letAssignment .) ]


state 4

    (4) element -> declaracion .
    (106) statement -> declaracion .

  ! reduce/reduce conflict for LET resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONST resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for ASYNC resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for ENUM resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for IF resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CLASS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LBRACE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for BREAK resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for PROMPT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for VAR resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (element -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 4 (element -> declaracion .)
    LET             reduce using rule 4 (element -> declaracion .)
    FUNCTION        reduce using rule 4 (element -> declaracion .)
    CONST           reduce using rule 4 (element -> declaracion .)
    ASYNC           reduce using rule 4 (element -> declaracion .)
    ENUM            reduce using rule 4 (element -> declaracion .)
    IF              reduce using rule 4 (element -> declaracion .)
    SWITCH          reduce using rule 4 (element -> declaracion .)
    WHILE           reduce using rule 4 (element -> declaracion .)
    CLASS           reduce using rule 4 (element -> declaracion .)
    RETURN          reduce using rule 4 (element -> declaracion .)
    LBRACE          reduce using rule 4 (element -> declaracion .)
    BREAK           reduce using rule 4 (element -> declaracion .)
    CONTINUE        reduce using rule 4 (element -> declaracion .)
    INTERFACE       reduce using rule 4 (element -> declaracion .)
    IDENTIFIER      reduce using rule 4 (element -> declaracion .)
    LBRACKET        reduce using rule 4 (element -> declaracion .)
    PROMPT          reduce using rule 4 (element -> declaracion .)
    NOT             reduce using rule 4 (element -> declaracion .)
    LPAREN          reduce using rule 4 (element -> declaracion .)
    NUMBER          reduce using rule 4 (element -> declaracion .)
    FLOAT           reduce using rule 4 (element -> declaracion .)
    STRING          reduce using rule 4 (element -> declaracion .)
    TRUE            reduce using rule 4 (element -> declaracion .)
    FALSE           reduce using rule 4 (element -> declaracion .)
    PLUSPLUS        reduce using rule 4 (element -> declaracion .)
    MINUSMINUS      reduce using rule 4 (element -> declaracion .)
    CONSOLE         reduce using rule 4 (element -> declaracion .)
    VAR             reduce using rule 4 (element -> declaracion .)
    FOR             reduce using rule 4 (element -> declaracion .)
    $end            reduce using rule 4 (element -> declaracion .)

  ! LET             [ reduce using rule 106 (statement -> declaracion .) ]
  ! FUNCTION        [ reduce using rule 106 (statement -> declaracion .) ]
  ! CONST           [ reduce using rule 106 (statement -> declaracion .) ]
  ! ASYNC           [ reduce using rule 106 (statement -> declaracion .) ]
  ! ENUM            [ reduce using rule 106 (statement -> declaracion .) ]
  ! IF              [ reduce using rule 106 (statement -> declaracion .) ]
  ! SWITCH          [ reduce using rule 106 (statement -> declaracion .) ]
  ! WHILE           [ reduce using rule 106 (statement -> declaracion .) ]
  ! CLASS           [ reduce using rule 106 (statement -> declaracion .) ]
  ! RETURN          [ reduce using rule 106 (statement -> declaracion .) ]
  ! LBRACE          [ reduce using rule 106 (statement -> declaracion .) ]
  ! BREAK           [ reduce using rule 106 (statement -> declaracion .) ]
  ! CONTINUE        [ reduce using rule 106 (statement -> declaracion .) ]
  ! INTERFACE       [ reduce using rule 106 (statement -> declaracion .) ]
  ! IDENTIFIER      [ reduce using rule 106 (statement -> declaracion .) ]
  ! LBRACKET        [ reduce using rule 106 (statement -> declaracion .) ]
  ! PROMPT          [ reduce using rule 106 (statement -> declaracion .) ]
  ! NOT             [ reduce using rule 106 (statement -> declaracion .) ]
  ! LPAREN          [ reduce using rule 106 (statement -> declaracion .) ]
  ! NUMBER          [ reduce using rule 106 (statement -> declaracion .) ]
  ! FLOAT           [ reduce using rule 106 (statement -> declaracion .) ]
  ! STRING          [ reduce using rule 106 (statement -> declaracion .) ]
  ! TRUE            [ reduce using rule 106 (statement -> declaracion .) ]
  ! FALSE           [ reduce using rule 106 (statement -> declaracion .) ]
  ! PLUSPLUS        [ reduce using rule 106 (statement -> declaracion .) ]
  ! MINUSMINUS      [ reduce using rule 106 (statement -> declaracion .) ]
  ! CONSOLE         [ reduce using rule 106 (statement -> declaracion .) ]
  ! VAR             [ reduce using rule 106 (statement -> declaracion .) ]
  ! FOR             [ reduce using rule 106 (statement -> declaracion .) ]
  ! $end            [ reduce using rule 106 (statement -> declaracion .) ]


state 5

    (5) element -> function .
    (107) statement -> function .

  ! reduce/reduce conflict for LET resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for IF resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for BREAK resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for NOT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for STRING resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for TRUE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FALSE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for VAR resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (element -> function .)
  ! reduce/reduce conflict for $end resolved using rule 5 (element -> function .)
    LET             reduce using rule 5 (element -> function .)
    FUNCTION        reduce using rule 5 (element -> function .)
    CONST           reduce using rule 5 (element -> function .)
    ASYNC           reduce using rule 5 (element -> function .)
    ENUM            reduce using rule 5 (element -> function .)
    IF              reduce using rule 5 (element -> function .)
    SWITCH          reduce using rule 5 (element -> function .)
    WHILE           reduce using rule 5 (element -> function .)
    CLASS           reduce using rule 5 (element -> function .)
    RETURN          reduce using rule 5 (element -> function .)
    LBRACE          reduce using rule 5 (element -> function .)
    BREAK           reduce using rule 5 (element -> function .)
    CONTINUE        reduce using rule 5 (element -> function .)
    INTERFACE       reduce using rule 5 (element -> function .)
    IDENTIFIER      reduce using rule 5 (element -> function .)
    LBRACKET        reduce using rule 5 (element -> function .)
    PROMPT          reduce using rule 5 (element -> function .)
    NOT             reduce using rule 5 (element -> function .)
    LPAREN          reduce using rule 5 (element -> function .)
    NUMBER          reduce using rule 5 (element -> function .)
    FLOAT           reduce using rule 5 (element -> function .)
    STRING          reduce using rule 5 (element -> function .)
    TRUE            reduce using rule 5 (element -> function .)
    FALSE           reduce using rule 5 (element -> function .)
    PLUSPLUS        reduce using rule 5 (element -> function .)
    MINUSMINUS      reduce using rule 5 (element -> function .)
    CONSOLE         reduce using rule 5 (element -> function .)
    VAR             reduce using rule 5 (element -> function .)
    FOR             reduce using rule 5 (element -> function .)
    $end            reduce using rule 5 (element -> function .)

  ! LET             [ reduce using rule 107 (statement -> function .) ]
  ! FUNCTION        [ reduce using rule 107 (statement -> function .) ]
  ! CONST           [ reduce using rule 107 (statement -> function .) ]
  ! ASYNC           [ reduce using rule 107 (statement -> function .) ]
  ! ENUM            [ reduce using rule 107 (statement -> function .) ]
  ! IF              [ reduce using rule 107 (statement -> function .) ]
  ! SWITCH          [ reduce using rule 107 (statement -> function .) ]
  ! WHILE           [ reduce using rule 107 (statement -> function .) ]
  ! CLASS           [ reduce using rule 107 (statement -> function .) ]
  ! RETURN          [ reduce using rule 107 (statement -> function .) ]
  ! LBRACE          [ reduce using rule 107 (statement -> function .) ]
  ! BREAK           [ reduce using rule 107 (statement -> function .) ]
  ! CONTINUE        [ reduce using rule 107 (statement -> function .) ]
  ! INTERFACE       [ reduce using rule 107 (statement -> function .) ]
  ! IDENTIFIER      [ reduce using rule 107 (statement -> function .) ]
  ! LBRACKET        [ reduce using rule 107 (statement -> function .) ]
  ! PROMPT          [ reduce using rule 107 (statement -> function .) ]
  ! NOT             [ reduce using rule 107 (statement -> function .) ]
  ! LPAREN          [ reduce using rule 107 (statement -> function .) ]
  ! NUMBER          [ reduce using rule 107 (statement -> function .) ]
  ! FLOAT           [ reduce using rule 107 (statement -> function .) ]
  ! STRING          [ reduce using rule 107 (statement -> function .) ]
  ! TRUE            [ reduce using rule 107 (statement -> function .) ]
  ! FALSE           [ reduce using rule 107 (statement -> function .) ]
  ! PLUSPLUS        [ reduce using rule 107 (statement -> function .) ]
  ! MINUSMINUS      [ reduce using rule 107 (statement -> function .) ]
  ! CONSOLE         [ reduce using rule 107 (statement -> function .) ]
  ! VAR             [ reduce using rule 107 (statement -> function .) ]
  ! FOR             [ reduce using rule 107 (statement -> function .) ]
  ! $end            [ reduce using rule 107 (statement -> function .) ]


state 6

    (6) element -> arrow_function .
    (108) statement -> arrow_function .

  ! reduce/reduce conflict for LET resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONST resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for ENUM resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for IF resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CLASS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for RETURN resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for BREAK resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for NOT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for STRING resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for TRUE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FALSE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for VAR resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (element -> arrow_function .)
  ! reduce/reduce conflict for $end resolved using rule 6 (element -> arrow_function .)
    LET             reduce using rule 6 (element -> arrow_function .)
    FUNCTION        reduce using rule 6 (element -> arrow_function .)
    CONST           reduce using rule 6 (element -> arrow_function .)
    ASYNC           reduce using rule 6 (element -> arrow_function .)
    ENUM            reduce using rule 6 (element -> arrow_function .)
    IF              reduce using rule 6 (element -> arrow_function .)
    SWITCH          reduce using rule 6 (element -> arrow_function .)
    WHILE           reduce using rule 6 (element -> arrow_function .)
    CLASS           reduce using rule 6 (element -> arrow_function .)
    RETURN          reduce using rule 6 (element -> arrow_function .)
    LBRACE          reduce using rule 6 (element -> arrow_function .)
    BREAK           reduce using rule 6 (element -> arrow_function .)
    CONTINUE        reduce using rule 6 (element -> arrow_function .)
    INTERFACE       reduce using rule 6 (element -> arrow_function .)
    IDENTIFIER      reduce using rule 6 (element -> arrow_function .)
    LBRACKET        reduce using rule 6 (element -> arrow_function .)
    PROMPT          reduce using rule 6 (element -> arrow_function .)
    NOT             reduce using rule 6 (element -> arrow_function .)
    LPAREN          reduce using rule 6 (element -> arrow_function .)
    NUMBER          reduce using rule 6 (element -> arrow_function .)
    FLOAT           reduce using rule 6 (element -> arrow_function .)
    STRING          reduce using rule 6 (element -> arrow_function .)
    TRUE            reduce using rule 6 (element -> arrow_function .)
    FALSE           reduce using rule 6 (element -> arrow_function .)
    PLUSPLUS        reduce using rule 6 (element -> arrow_function .)
    MINUSMINUS      reduce using rule 6 (element -> arrow_function .)
    CONSOLE         reduce using rule 6 (element -> arrow_function .)
    VAR             reduce using rule 6 (element -> arrow_function .)
    FOR             reduce using rule 6 (element -> arrow_function .)
    $end            reduce using rule 6 (element -> arrow_function .)

  ! LET             [ reduce using rule 108 (statement -> arrow_function .) ]
  ! FUNCTION        [ reduce using rule 108 (statement -> arrow_function .) ]
  ! CONST           [ reduce using rule 108 (statement -> arrow_function .) ]
  ! ASYNC           [ reduce using rule 108 (statement -> arrow_function .) ]
  ! ENUM            [ reduce using rule 108 (statement -> arrow_function .) ]
  ! IF              [ reduce using rule 108 (statement -> arrow_function .) ]
  ! SWITCH          [ reduce using rule 108 (statement -> arrow_function .) ]
  ! WHILE           [ reduce using rule 108 (statement -> arrow_function .) ]
  ! CLASS           [ reduce using rule 108 (statement -> arrow_function .) ]
  ! RETURN          [ reduce using rule 108 (statement -> arrow_function .) ]
  ! LBRACE          [ reduce using rule 108 (statement -> arrow_function .) ]
  ! BREAK           [ reduce using rule 108 (statement -> arrow_function .) ]
  ! CONTINUE        [ reduce using rule 108 (statement -> arrow_function .) ]
  ! INTERFACE       [ reduce using rule 108 (statement -> arrow_function .) ]
  ! IDENTIFIER      [ reduce using rule 108 (statement -> arrow_function .) ]
  ! LBRACKET        [ reduce using rule 108 (statement -> arrow_function .) ]
  ! PROMPT          [ reduce using rule 108 (statement -> arrow_function .) ]
  ! NOT             [ reduce using rule 108 (statement -> arrow_function .) ]
  ! LPAREN          [ reduce using rule 108 (statement -> arrow_function .) ]
  ! NUMBER          [ reduce using rule 108 (statement -> arrow_function .) ]
  ! FLOAT           [ reduce using rule 108 (statement -> arrow_function .) ]
  ! STRING          [ reduce using rule 108 (statement -> arrow_function .) ]
  ! TRUE            [ reduce using rule 108 (statement -> arrow_function .) ]
  ! FALSE           [ reduce using rule 108 (statement -> arrow_function .) ]
  ! PLUSPLUS        [ reduce using rule 108 (statement -> arrow_function .) ]
  ! MINUSMINUS      [ reduce using rule 108 (statement -> arrow_function .) ]
  ! CONSOLE         [ reduce using rule 108 (statement -> arrow_function .) ]
  ! VAR             [ reduce using rule 108 (statement -> arrow_function .) ]
  ! FOR             [ reduce using rule 108 (statement -> arrow_function .) ]
  ! $end            [ reduce using rule 108 (statement -> arrow_function .) ]


state 7

    (7) element -> async_function .
    (109) statement -> async_function .

  ! reduce/reduce conflict for LET resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONST resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for ASYNC resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for ENUM resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for IF resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for SWITCH resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CLASS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LBRACE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for BREAK resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for PROMPT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for NOT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for NUMBER resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FLOAT resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for STRING resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for TRUE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FALSE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for VAR resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (element -> async_function .)
  ! reduce/reduce conflict for $end resolved using rule 7 (element -> async_function .)
    LET             reduce using rule 7 (element -> async_function .)
    FUNCTION        reduce using rule 7 (element -> async_function .)
    CONST           reduce using rule 7 (element -> async_function .)
    ASYNC           reduce using rule 7 (element -> async_function .)
    ENUM            reduce using rule 7 (element -> async_function .)
    IF              reduce using rule 7 (element -> async_function .)
    SWITCH          reduce using rule 7 (element -> async_function .)
    WHILE           reduce using rule 7 (element -> async_function .)
    CLASS           reduce using rule 7 (element -> async_function .)
    RETURN          reduce using rule 7 (element -> async_function .)
    LBRACE          reduce using rule 7 (element -> async_function .)
    BREAK           reduce using rule 7 (element -> async_function .)
    CONTINUE        reduce using rule 7 (element -> async_function .)
    INTERFACE       reduce using rule 7 (element -> async_function .)
    IDENTIFIER      reduce using rule 7 (element -> async_function .)
    LBRACKET        reduce using rule 7 (element -> async_function .)
    PROMPT          reduce using rule 7 (element -> async_function .)
    NOT             reduce using rule 7 (element -> async_function .)
    LPAREN          reduce using rule 7 (element -> async_function .)
    NUMBER          reduce using rule 7 (element -> async_function .)
    FLOAT           reduce using rule 7 (element -> async_function .)
    STRING          reduce using rule 7 (element -> async_function .)
    TRUE            reduce using rule 7 (element -> async_function .)
    FALSE           reduce using rule 7 (element -> async_function .)
    PLUSPLUS        reduce using rule 7 (element -> async_function .)
    MINUSMINUS      reduce using rule 7 (element -> async_function .)
    CONSOLE         reduce using rule 7 (element -> async_function .)
    VAR             reduce using rule 7 (element -> async_function .)
    FOR             reduce using rule 7 (element -> async_function .)
    $end            reduce using rule 7 (element -> async_function .)

  ! LET             [ reduce using rule 109 (statement -> async_function .) ]
  ! FUNCTION        [ reduce using rule 109 (statement -> async_function .) ]
  ! CONST           [ reduce using rule 109 (statement -> async_function .) ]
  ! ASYNC           [ reduce using rule 109 (statement -> async_function .) ]
  ! ENUM            [ reduce using rule 109 (statement -> async_function .) ]
  ! IF              [ reduce using rule 109 (statement -> async_function .) ]
  ! SWITCH          [ reduce using rule 109 (statement -> async_function .) ]
  ! WHILE           [ reduce using rule 109 (statement -> async_function .) ]
  ! CLASS           [ reduce using rule 109 (statement -> async_function .) ]
  ! RETURN          [ reduce using rule 109 (statement -> async_function .) ]
  ! LBRACE          [ reduce using rule 109 (statement -> async_function .) ]
  ! BREAK           [ reduce using rule 109 (statement -> async_function .) ]
  ! CONTINUE        [ reduce using rule 109 (statement -> async_function .) ]
  ! INTERFACE       [ reduce using rule 109 (statement -> async_function .) ]
  ! IDENTIFIER      [ reduce using rule 109 (statement -> async_function .) ]
  ! LBRACKET        [ reduce using rule 109 (statement -> async_function .) ]
  ! PROMPT          [ reduce using rule 109 (statement -> async_function .) ]
  ! NOT             [ reduce using rule 109 (statement -> async_function .) ]
  ! LPAREN          [ reduce using rule 109 (statement -> async_function .) ]
  ! NUMBER          [ reduce using rule 109 (statement -> async_function .) ]
  ! FLOAT           [ reduce using rule 109 (statement -> async_function .) ]
  ! STRING          [ reduce using rule 109 (statement -> async_function .) ]
  ! TRUE            [ reduce using rule 109 (statement -> async_function .) ]
  ! FALSE           [ reduce using rule 109 (statement -> async_function .) ]
  ! PLUSPLUS        [ reduce using rule 109 (statement -> async_function .) ]
  ! MINUSMINUS      [ reduce using rule 109 (statement -> async_function .) ]
  ! CONSOLE         [ reduce using rule 109 (statement -> async_function .) ]
  ! VAR             [ reduce using rule 109 (statement -> async_function .) ]
  ! FOR             [ reduce using rule 109 (statement -> async_function .) ]
  ! $end            [ reduce using rule 109 (statement -> async_function .) ]


state 8

    (8) element -> constAssignment .
    (105) statement -> constAssignment .

  ! reduce/reduce conflict for LET resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONST resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for ASYNC resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for ENUM resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for IF resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for SWITCH resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CLASS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for RETURN resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LBRACE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for BREAK resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for PROMPT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for NOT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for LPAREN resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for NUMBER resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FLOAT resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for STRING resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for TRUE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FALSE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for VAR resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (element -> constAssignment .)
  ! reduce/reduce conflict for $end resolved using rule 8 (element -> constAssignment .)
    LET             reduce using rule 8 (element -> constAssignment .)
    FUNCTION        reduce using rule 8 (element -> constAssignment .)
    CONST           reduce using rule 8 (element -> constAssignment .)
    ASYNC           reduce using rule 8 (element -> constAssignment .)
    ENUM            reduce using rule 8 (element -> constAssignment .)
    IF              reduce using rule 8 (element -> constAssignment .)
    SWITCH          reduce using rule 8 (element -> constAssignment .)
    WHILE           reduce using rule 8 (element -> constAssignment .)
    CLASS           reduce using rule 8 (element -> constAssignment .)
    RETURN          reduce using rule 8 (element -> constAssignment .)
    LBRACE          reduce using rule 8 (element -> constAssignment .)
    BREAK           reduce using rule 8 (element -> constAssignment .)
    CONTINUE        reduce using rule 8 (element -> constAssignment .)
    INTERFACE       reduce using rule 8 (element -> constAssignment .)
    IDENTIFIER      reduce using rule 8 (element -> constAssignment .)
    LBRACKET        reduce using rule 8 (element -> constAssignment .)
    PROMPT          reduce using rule 8 (element -> constAssignment .)
    NOT             reduce using rule 8 (element -> constAssignment .)
    LPAREN          reduce using rule 8 (element -> constAssignment .)
    NUMBER          reduce using rule 8 (element -> constAssignment .)
    FLOAT           reduce using rule 8 (element -> constAssignment .)
    STRING          reduce using rule 8 (element -> constAssignment .)
    TRUE            reduce using rule 8 (element -> constAssignment .)
    FALSE           reduce using rule 8 (element -> constAssignment .)
    PLUSPLUS        reduce using rule 8 (element -> constAssignment .)
    MINUSMINUS      reduce using rule 8 (element -> constAssignment .)
    CONSOLE         reduce using rule 8 (element -> constAssignment .)
    VAR             reduce using rule 8 (element -> constAssignment .)
    FOR             reduce using rule 8 (element -> constAssignment .)
    $end            reduce using rule 8 (element -> constAssignment .)

  ! LET             [ reduce using rule 105 (statement -> constAssignment .) ]
  ! FUNCTION        [ reduce using rule 105 (statement -> constAssignment .) ]
  ! CONST           [ reduce using rule 105 (statement -> constAssignment .) ]
  ! ASYNC           [ reduce using rule 105 (statement -> constAssignment .) ]
  ! ENUM            [ reduce using rule 105 (statement -> constAssignment .) ]
  ! IF              [ reduce using rule 105 (statement -> constAssignment .) ]
  ! SWITCH          [ reduce using rule 105 (statement -> constAssignment .) ]
  ! WHILE           [ reduce using rule 105 (statement -> constAssignment .) ]
  ! CLASS           [ reduce using rule 105 (statement -> constAssignment .) ]
  ! RETURN          [ reduce using rule 105 (statement -> constAssignment .) ]
  ! LBRACE          [ reduce using rule 105 (statement -> constAssignment .) ]
  ! BREAK           [ reduce using rule 105 (statement -> constAssignment .) ]
  ! CONTINUE        [ reduce using rule 105 (statement -> constAssignment .) ]
  ! INTERFACE       [ reduce using rule 105 (statement -> constAssignment .) ]
  ! IDENTIFIER      [ reduce using rule 105 (statement -> constAssignment .) ]
  ! LBRACKET        [ reduce using rule 105 (statement -> constAssignment .) ]
  ! PROMPT          [ reduce using rule 105 (statement -> constAssignment .) ]
  ! NOT             [ reduce using rule 105 (statement -> constAssignment .) ]
  ! LPAREN          [ reduce using rule 105 (statement -> constAssignment .) ]
  ! NUMBER          [ reduce using rule 105 (statement -> constAssignment .) ]
  ! FLOAT           [ reduce using rule 105 (statement -> constAssignment .) ]
  ! STRING          [ reduce using rule 105 (statement -> constAssignment .) ]
  ! TRUE            [ reduce using rule 105 (statement -> constAssignment .) ]
  ! FALSE           [ reduce using rule 105 (statement -> constAssignment .) ]
  ! PLUSPLUS        [ reduce using rule 105 (statement -> constAssignment .) ]
  ! MINUSMINUS      [ reduce using rule 105 (statement -> constAssignment .) ]
  ! CONSOLE         [ reduce using rule 105 (statement -> constAssignment .) ]
  ! VAR             [ reduce using rule 105 (statement -> constAssignment .) ]
  ! FOR             [ reduce using rule 105 (statement -> constAssignment .) ]
  ! $end            [ reduce using rule 105 (statement -> constAssignment .) ]


state 9

    (9) element -> enum_definition .

    LET             reduce using rule 9 (element -> enum_definition .)
    FUNCTION        reduce using rule 9 (element -> enum_definition .)
    CONST           reduce using rule 9 (element -> enum_definition .)
    ASYNC           reduce using rule 9 (element -> enum_definition .)
    ENUM            reduce using rule 9 (element -> enum_definition .)
    IF              reduce using rule 9 (element -> enum_definition .)
    SWITCH          reduce using rule 9 (element -> enum_definition .)
    WHILE           reduce using rule 9 (element -> enum_definition .)
    CLASS           reduce using rule 9 (element -> enum_definition .)
    RETURN          reduce using rule 9 (element -> enum_definition .)
    LBRACE          reduce using rule 9 (element -> enum_definition .)
    BREAK           reduce using rule 9 (element -> enum_definition .)
    CONTINUE        reduce using rule 9 (element -> enum_definition .)
    INTERFACE       reduce using rule 9 (element -> enum_definition .)
    IDENTIFIER      reduce using rule 9 (element -> enum_definition .)
    LBRACKET        reduce using rule 9 (element -> enum_definition .)
    PROMPT          reduce using rule 9 (element -> enum_definition .)
    NOT             reduce using rule 9 (element -> enum_definition .)
    LPAREN          reduce using rule 9 (element -> enum_definition .)
    NUMBER          reduce using rule 9 (element -> enum_definition .)
    FLOAT           reduce using rule 9 (element -> enum_definition .)
    STRING          reduce using rule 9 (element -> enum_definition .)
    TRUE            reduce using rule 9 (element -> enum_definition .)
    FALSE           reduce using rule 9 (element -> enum_definition .)
    PLUSPLUS        reduce using rule 9 (element -> enum_definition .)
    MINUSMINUS      reduce using rule 9 (element -> enum_definition .)
    CONSOLE         reduce using rule 9 (element -> enum_definition .)
    VAR             reduce using rule 9 (element -> enum_definition .)
    FOR             reduce using rule 9 (element -> enum_definition .)
    $end            reduce using rule 9 (element -> enum_definition .)


state 10

    (10) element -> controlEstructure .
    (112) statement -> controlEstructure .

  ! reduce/reduce conflict for LET resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONST resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for ASYNC resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for ENUM resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for IF resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for SWITCH resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for RETURN resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LBRACE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for BREAK resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for PROMPT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FLOAT resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for TRUE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FALSE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for VAR resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (element -> controlEstructure .)
  ! reduce/reduce conflict for $end resolved using rule 10 (element -> controlEstructure .)
    LET             reduce using rule 10 (element -> controlEstructure .)
    FUNCTION        reduce using rule 10 (element -> controlEstructure .)
    CONST           reduce using rule 10 (element -> controlEstructure .)
    ASYNC           reduce using rule 10 (element -> controlEstructure .)
    ENUM            reduce using rule 10 (element -> controlEstructure .)
    IF              reduce using rule 10 (element -> controlEstructure .)
    SWITCH          reduce using rule 10 (element -> controlEstructure .)
    WHILE           reduce using rule 10 (element -> controlEstructure .)
    CLASS           reduce using rule 10 (element -> controlEstructure .)
    RETURN          reduce using rule 10 (element -> controlEstructure .)
    LBRACE          reduce using rule 10 (element -> controlEstructure .)
    BREAK           reduce using rule 10 (element -> controlEstructure .)
    CONTINUE        reduce using rule 10 (element -> controlEstructure .)
    INTERFACE       reduce using rule 10 (element -> controlEstructure .)
    IDENTIFIER      reduce using rule 10 (element -> controlEstructure .)
    LBRACKET        reduce using rule 10 (element -> controlEstructure .)
    PROMPT          reduce using rule 10 (element -> controlEstructure .)
    NOT             reduce using rule 10 (element -> controlEstructure .)
    LPAREN          reduce using rule 10 (element -> controlEstructure .)
    NUMBER          reduce using rule 10 (element -> controlEstructure .)
    FLOAT           reduce using rule 10 (element -> controlEstructure .)
    STRING          reduce using rule 10 (element -> controlEstructure .)
    TRUE            reduce using rule 10 (element -> controlEstructure .)
    FALSE           reduce using rule 10 (element -> controlEstructure .)
    PLUSPLUS        reduce using rule 10 (element -> controlEstructure .)
    MINUSMINUS      reduce using rule 10 (element -> controlEstructure .)
    CONSOLE         reduce using rule 10 (element -> controlEstructure .)
    VAR             reduce using rule 10 (element -> controlEstructure .)
    FOR             reduce using rule 10 (element -> controlEstructure .)
    $end            reduce using rule 10 (element -> controlEstructure .)

  ! LET             [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! FUNCTION        [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! CONST           [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! ASYNC           [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! ENUM            [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! IF              [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! SWITCH          [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! WHILE           [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! CLASS           [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! RETURN          [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! LBRACE          [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! BREAK           [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! CONTINUE        [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! INTERFACE       [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! IDENTIFIER      [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! LBRACKET        [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! PROMPT          [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! NOT             [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! LPAREN          [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! NUMBER          [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! FLOAT           [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! STRING          [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! TRUE            [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! FALSE           [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! PLUSPLUS        [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! MINUSMINUS      [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! CONSOLE         [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! VAR             [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! FOR             [ reduce using rule 112 (statement -> controlEstructure .) ]
  ! $end            [ reduce using rule 112 (statement -> controlEstructure .) ]


state 11

    (11) element -> class_definition .
    (115) statement -> class_definition .

  ! reduce/reduce conflict for LET resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CONST resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for ASYNC resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for ENUM resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for IF resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for SWITCH resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CLASS resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for RETURN resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for LBRACE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for BREAK resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for PROMPT resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for VAR resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (element -> class_definition .)
  ! reduce/reduce conflict for $end resolved using rule 11 (element -> class_definition .)
    LET             reduce using rule 11 (element -> class_definition .)
    FUNCTION        reduce using rule 11 (element -> class_definition .)
    CONST           reduce using rule 11 (element -> class_definition .)
    ASYNC           reduce using rule 11 (element -> class_definition .)
    ENUM            reduce using rule 11 (element -> class_definition .)
    IF              reduce using rule 11 (element -> class_definition .)
    SWITCH          reduce using rule 11 (element -> class_definition .)
    WHILE           reduce using rule 11 (element -> class_definition .)
    CLASS           reduce using rule 11 (element -> class_definition .)
    RETURN          reduce using rule 11 (element -> class_definition .)
    LBRACE          reduce using rule 11 (element -> class_definition .)
    BREAK           reduce using rule 11 (element -> class_definition .)
    CONTINUE        reduce using rule 11 (element -> class_definition .)
    INTERFACE       reduce using rule 11 (element -> class_definition .)
    IDENTIFIER      reduce using rule 11 (element -> class_definition .)
    LBRACKET        reduce using rule 11 (element -> class_definition .)
    PROMPT          reduce using rule 11 (element -> class_definition .)
    NOT             reduce using rule 11 (element -> class_definition .)
    LPAREN          reduce using rule 11 (element -> class_definition .)
    NUMBER          reduce using rule 11 (element -> class_definition .)
    FLOAT           reduce using rule 11 (element -> class_definition .)
    STRING          reduce using rule 11 (element -> class_definition .)
    TRUE            reduce using rule 11 (element -> class_definition .)
    FALSE           reduce using rule 11 (element -> class_definition .)
    PLUSPLUS        reduce using rule 11 (element -> class_definition .)
    MINUSMINUS      reduce using rule 11 (element -> class_definition .)
    CONSOLE         reduce using rule 11 (element -> class_definition .)
    VAR             reduce using rule 11 (element -> class_definition .)
    FOR             reduce using rule 11 (element -> class_definition .)
    $end            reduce using rule 11 (element -> class_definition .)

  ! LET             [ reduce using rule 115 (statement -> class_definition .) ]
  ! FUNCTION        [ reduce using rule 115 (statement -> class_definition .) ]
  ! CONST           [ reduce using rule 115 (statement -> class_definition .) ]
  ! ASYNC           [ reduce using rule 115 (statement -> class_definition .) ]
  ! ENUM            [ reduce using rule 115 (statement -> class_definition .) ]
  ! IF              [ reduce using rule 115 (statement -> class_definition .) ]
  ! SWITCH          [ reduce using rule 115 (statement -> class_definition .) ]
  ! WHILE           [ reduce using rule 115 (statement -> class_definition .) ]
  ! CLASS           [ reduce using rule 115 (statement -> class_definition .) ]
  ! RETURN          [ reduce using rule 115 (statement -> class_definition .) ]
  ! LBRACE          [ reduce using rule 115 (statement -> class_definition .) ]
  ! BREAK           [ reduce using rule 115 (statement -> class_definition .) ]
  ! CONTINUE        [ reduce using rule 115 (statement -> class_definition .) ]
  ! INTERFACE       [ reduce using rule 115 (statement -> class_definition .) ]
  ! IDENTIFIER      [ reduce using rule 115 (statement -> class_definition .) ]
  ! LBRACKET        [ reduce using rule 115 (statement -> class_definition .) ]
  ! PROMPT          [ reduce using rule 115 (statement -> class_definition .) ]
  ! NOT             [ reduce using rule 115 (statement -> class_definition .) ]
  ! LPAREN          [ reduce using rule 115 (statement -> class_definition .) ]
  ! NUMBER          [ reduce using rule 115 (statement -> class_definition .) ]
  ! FLOAT           [ reduce using rule 115 (statement -> class_definition .) ]
  ! STRING          [ reduce using rule 115 (statement -> class_definition .) ]
  ! TRUE            [ reduce using rule 115 (statement -> class_definition .) ]
  ! FALSE           [ reduce using rule 115 (statement -> class_definition .) ]
  ! PLUSPLUS        [ reduce using rule 115 (statement -> class_definition .) ]
  ! MINUSMINUS      [ reduce using rule 115 (statement -> class_definition .) ]
  ! CONSOLE         [ reduce using rule 115 (statement -> class_definition .) ]
  ! VAR             [ reduce using rule 115 (statement -> class_definition .) ]
  ! FOR             [ reduce using rule 115 (statement -> class_definition .) ]
  ! $end            [ reduce using rule 115 (statement -> class_definition .) ]


state 12

    (12) element -> statement .

    LET             reduce using rule 12 (element -> statement .)
    FUNCTION        reduce using rule 12 (element -> statement .)
    CONST           reduce using rule 12 (element -> statement .)
    ASYNC           reduce using rule 12 (element -> statement .)
    ENUM            reduce using rule 12 (element -> statement .)
    IF              reduce using rule 12 (element -> statement .)
    SWITCH          reduce using rule 12 (element -> statement .)
    WHILE           reduce using rule 12 (element -> statement .)
    CLASS           reduce using rule 12 (element -> statement .)
    RETURN          reduce using rule 12 (element -> statement .)
    LBRACE          reduce using rule 12 (element -> statement .)
    BREAK           reduce using rule 12 (element -> statement .)
    CONTINUE        reduce using rule 12 (element -> statement .)
    INTERFACE       reduce using rule 12 (element -> statement .)
    IDENTIFIER      reduce using rule 12 (element -> statement .)
    LBRACKET        reduce using rule 12 (element -> statement .)
    PROMPT          reduce using rule 12 (element -> statement .)
    NOT             reduce using rule 12 (element -> statement .)
    LPAREN          reduce using rule 12 (element -> statement .)
    NUMBER          reduce using rule 12 (element -> statement .)
    FLOAT           reduce using rule 12 (element -> statement .)
    STRING          reduce using rule 12 (element -> statement .)
    TRUE            reduce using rule 12 (element -> statement .)
    FALSE           reduce using rule 12 (element -> statement .)
    PLUSPLUS        reduce using rule 12 (element -> statement .)
    MINUSMINUS      reduce using rule 12 (element -> statement .)
    CONSOLE         reduce using rule 12 (element -> statement .)
    VAR             reduce using rule 12 (element -> statement .)
    FOR             reduce using rule 12 (element -> statement .)
    $end            reduce using rule 12 (element -> statement .)


state 13

    (13) element -> interface .

    LET             reduce using rule 13 (element -> interface .)
    FUNCTION        reduce using rule 13 (element -> interface .)
    CONST           reduce using rule 13 (element -> interface .)
    ASYNC           reduce using rule 13 (element -> interface .)
    ENUM            reduce using rule 13 (element -> interface .)
    IF              reduce using rule 13 (element -> interface .)
    SWITCH          reduce using rule 13 (element -> interface .)
    WHILE           reduce using rule 13 (element -> interface .)
    CLASS           reduce using rule 13 (element -> interface .)
    RETURN          reduce using rule 13 (element -> interface .)
    LBRACE          reduce using rule 13 (element -> interface .)
    BREAK           reduce using rule 13 (element -> interface .)
    CONTINUE        reduce using rule 13 (element -> interface .)
    INTERFACE       reduce using rule 13 (element -> interface .)
    IDENTIFIER      reduce using rule 13 (element -> interface .)
    LBRACKET        reduce using rule 13 (element -> interface .)
    PROMPT          reduce using rule 13 (element -> interface .)
    NOT             reduce using rule 13 (element -> interface .)
    LPAREN          reduce using rule 13 (element -> interface .)
    NUMBER          reduce using rule 13 (element -> interface .)
    FLOAT           reduce using rule 13 (element -> interface .)
    STRING          reduce using rule 13 (element -> interface .)
    TRUE            reduce using rule 13 (element -> interface .)
    FALSE           reduce using rule 13 (element -> interface .)
    PLUSPLUS        reduce using rule 13 (element -> interface .)
    MINUSMINUS      reduce using rule 13 (element -> interface .)
    CONSOLE         reduce using rule 13 (element -> interface .)
    VAR             reduce using rule 13 (element -> interface .)
    FOR             reduce using rule 13 (element -> interface .)
    $end            reduce using rule 13 (element -> interface .)


state 14

    (14) element -> assignment .

    LET             reduce using rule 14 (element -> assignment .)
    FUNCTION        reduce using rule 14 (element -> assignment .)
    CONST           reduce using rule 14 (element -> assignment .)
    ASYNC           reduce using rule 14 (element -> assignment .)
    ENUM            reduce using rule 14 (element -> assignment .)
    IF              reduce using rule 14 (element -> assignment .)
    SWITCH          reduce using rule 14 (element -> assignment .)
    WHILE           reduce using rule 14 (element -> assignment .)
    CLASS           reduce using rule 14 (element -> assignment .)
    RETURN          reduce using rule 14 (element -> assignment .)
    LBRACE          reduce using rule 14 (element -> assignment .)
    BREAK           reduce using rule 14 (element -> assignment .)
    CONTINUE        reduce using rule 14 (element -> assignment .)
    INTERFACE       reduce using rule 14 (element -> assignment .)
    IDENTIFIER      reduce using rule 14 (element -> assignment .)
    LBRACKET        reduce using rule 14 (element -> assignment .)
    PROMPT          reduce using rule 14 (element -> assignment .)
    NOT             reduce using rule 14 (element -> assignment .)
    LPAREN          reduce using rule 14 (element -> assignment .)
    NUMBER          reduce using rule 14 (element -> assignment .)
    FLOAT           reduce using rule 14 (element -> assignment .)
    STRING          reduce using rule 14 (element -> assignment .)
    TRUE            reduce using rule 14 (element -> assignment .)
    FALSE           reduce using rule 14 (element -> assignment .)
    PLUSPLUS        reduce using rule 14 (element -> assignment .)
    MINUSMINUS      reduce using rule 14 (element -> assignment .)
    CONSOLE         reduce using rule 14 (element -> assignment .)
    VAR             reduce using rule 14 (element -> assignment .)
    FOR             reduce using rule 14 (element -> assignment .)
    $end            reduce using rule 14 (element -> assignment .)


state 15

    (15) element -> expression . SEMICOLON
    (111) statement -> expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 16

    (16) element -> consolelog .
    (110) statement -> consolelog .

  ! reduce/reduce conflict for LET resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CONST resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for ASYNC resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for ENUM resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for IF resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for SWITCH resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CLASS resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for LBRACE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for BREAK resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for PROMPT resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for NOT resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for LPAREN resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for NUMBER resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FLOAT resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for STRING resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for TRUE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FALSE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (element -> consolelog .)
  ! reduce/reduce conflict for $end resolved using rule 16 (element -> consolelog .)
    LET             reduce using rule 16 (element -> consolelog .)
    FUNCTION        reduce using rule 16 (element -> consolelog .)
    CONST           reduce using rule 16 (element -> consolelog .)
    ASYNC           reduce using rule 16 (element -> consolelog .)
    ENUM            reduce using rule 16 (element -> consolelog .)
    IF              reduce using rule 16 (element -> consolelog .)
    SWITCH          reduce using rule 16 (element -> consolelog .)
    WHILE           reduce using rule 16 (element -> consolelog .)
    CLASS           reduce using rule 16 (element -> consolelog .)
    RETURN          reduce using rule 16 (element -> consolelog .)
    LBRACE          reduce using rule 16 (element -> consolelog .)
    BREAK           reduce using rule 16 (element -> consolelog .)
    CONTINUE        reduce using rule 16 (element -> consolelog .)
    INTERFACE       reduce using rule 16 (element -> consolelog .)
    IDENTIFIER      reduce using rule 16 (element -> consolelog .)
    LBRACKET        reduce using rule 16 (element -> consolelog .)
    PROMPT          reduce using rule 16 (element -> consolelog .)
    NOT             reduce using rule 16 (element -> consolelog .)
    LPAREN          reduce using rule 16 (element -> consolelog .)
    NUMBER          reduce using rule 16 (element -> consolelog .)
    FLOAT           reduce using rule 16 (element -> consolelog .)
    STRING          reduce using rule 16 (element -> consolelog .)
    TRUE            reduce using rule 16 (element -> consolelog .)
    FALSE           reduce using rule 16 (element -> consolelog .)
    PLUSPLUS        reduce using rule 16 (element -> consolelog .)
    MINUSMINUS      reduce using rule 16 (element -> consolelog .)
    CONSOLE         reduce using rule 16 (element -> consolelog .)
    VAR             reduce using rule 16 (element -> consolelog .)
    FOR             reduce using rule 16 (element -> consolelog .)
    $end            reduce using rule 16 (element -> consolelog .)

  ! LET             [ reduce using rule 110 (statement -> consolelog .) ]
  ! FUNCTION        [ reduce using rule 110 (statement -> consolelog .) ]
  ! CONST           [ reduce using rule 110 (statement -> consolelog .) ]
  ! ASYNC           [ reduce using rule 110 (statement -> consolelog .) ]
  ! ENUM            [ reduce using rule 110 (statement -> consolelog .) ]
  ! IF              [ reduce using rule 110 (statement -> consolelog .) ]
  ! SWITCH          [ reduce using rule 110 (statement -> consolelog .) ]
  ! WHILE           [ reduce using rule 110 (statement -> consolelog .) ]
  ! CLASS           [ reduce using rule 110 (statement -> consolelog .) ]
  ! RETURN          [ reduce using rule 110 (statement -> consolelog .) ]
  ! LBRACE          [ reduce using rule 110 (statement -> consolelog .) ]
  ! BREAK           [ reduce using rule 110 (statement -> consolelog .) ]
  ! CONTINUE        [ reduce using rule 110 (statement -> consolelog .) ]
  ! INTERFACE       [ reduce using rule 110 (statement -> consolelog .) ]
  ! IDENTIFIER      [ reduce using rule 110 (statement -> consolelog .) ]
  ! LBRACKET        [ reduce using rule 110 (statement -> consolelog .) ]
  ! PROMPT          [ reduce using rule 110 (statement -> consolelog .) ]
  ! NOT             [ reduce using rule 110 (statement -> consolelog .) ]
  ! LPAREN          [ reduce using rule 110 (statement -> consolelog .) ]
  ! NUMBER          [ reduce using rule 110 (statement -> consolelog .) ]
  ! FLOAT           [ reduce using rule 110 (statement -> consolelog .) ]
  ! STRING          [ reduce using rule 110 (statement -> consolelog .) ]
  ! TRUE            [ reduce using rule 110 (statement -> consolelog .) ]
  ! FALSE           [ reduce using rule 110 (statement -> consolelog .) ]
  ! PLUSPLUS        [ reduce using rule 110 (statement -> consolelog .) ]
  ! MINUSMINUS      [ reduce using rule 110 (statement -> consolelog .) ]
  ! CONSOLE         [ reduce using rule 110 (statement -> consolelog .) ]
  ! VAR             [ reduce using rule 110 (statement -> consolelog .) ]
  ! FOR             [ reduce using rule 110 (statement -> consolelog .) ]
  ! $end            [ reduce using rule 110 (statement -> consolelog .) ]


state 17

    (18) letAssignment -> LET . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET . IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> LET . IDENTIFIER COLON type SEMICOLON
    (23) declaracion -> LET . IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    IDENTIFIER      shift and go to state 75


state 18

    (17) assignment -> IDENTIFIER . EQUAL expression SEMICOLON
    (86) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (90) expression -> IDENTIFIER .

    EQUAL           shift and go to state 76
    LPAREN          shift and go to state 77
    SEMICOLON       reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 90 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 90 (expression -> IDENTIFIER .)
    DIV             reduce using rule 90 (expression -> IDENTIFIER .)
    MOD             reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 90 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    POT             reduce using rule 90 (expression -> IDENTIFIER .)
    AND             reduce using rule 90 (expression -> IDENTIFIER .)
    OR              reduce using rule 90 (expression -> IDENTIFIER .)
    EQ              reduce using rule 90 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 90 (expression -> IDENTIFIER .)
    LT              reduce using rule 90 (expression -> IDENTIFIER .)
    GT              reduce using rule 90 (expression -> IDENTIFIER .)
    LE              reduce using rule 90 (expression -> IDENTIFIER .)
    GE              reduce using rule 90 (expression -> IDENTIFIER .)
    DOT             reduce using rule 90 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 90 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 90 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 90 (expression -> IDENTIFIER .)


state 19

    (53) expression -> LBRACKET . expression COMMA expression RBRACKET
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 78

state 20

    (45) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    IDENTIFIER      shift and go to state 81


state 21

    (83) expression -> LPAREN . expression RPAREN
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 82

state 22

    (102) statement -> LBRACE . instruction_list RBRACE
    (116) statement -> LBRACE . RBRACE
    (150) expression -> LBRACE . object_properties RBRACE
    (117) instruction_list -> . instruction_list statement
    (118) instruction_list -> . statement
    (119) instruction_list -> . empty
    (151) object_properties -> . object_property
    (152) object_properties -> . object_property COMMA object_properties
    (153) object_properties -> . empty
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (120) empty -> .
    (154) object_property -> . IDENTIFIER COLON expression
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          shift and go to state 84
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    IDENTIFIER      shift and go to state 99
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RBRACE          [ reduce using rule 120 (empty -> .) ]
  ! RETURN          [ reduce using rule 120 (empty -> .) ]
  ! LBRACE          [ reduce using rule 120 (empty -> .) ]
  ! BREAK           [ reduce using rule 120 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! ASYNC           [ reduce using rule 120 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 120 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 120 (empty -> .) ]
  ! PROMPT          [ reduce using rule 120 (empty -> .) ]
  ! NOT             [ reduce using rule 120 (empty -> .) ]
  ! LPAREN          [ reduce using rule 120 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]
  ! NUMBER          [ reduce using rule 120 (empty -> .) ]
  ! FLOAT           [ reduce using rule 120 (empty -> .) ]
  ! STRING          [ reduce using rule 120 (empty -> .) ]
  ! TRUE            [ reduce using rule 120 (empty -> .) ]
  ! FALSE           [ reduce using rule 120 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 120 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 120 (empty -> .) ]
  ! IF              [ reduce using rule 120 (empty -> .) ]
  ! SWITCH          [ reduce using rule 120 (empty -> .) ]
  ! WHILE           [ reduce using rule 120 (empty -> .) ]
  ! FOR             [ reduce using rule 120 (empty -> .) ]
  ! CLASS           [ reduce using rule 120 (empty -> .) ]

    instruction_list               shift and go to state 83
    object_properties              shift and go to state 85
    statement                      shift and go to state 86
    empty                          shift and go to state 87
    object_property                shift and go to state 88
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 23

    (144) arrow_function -> CONST . IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (121) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 101


state 24

    (142) async_function -> ASYNC . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    FUNCTION        shift and go to state 102


state 25

    (139) enum_definition -> ENUM . IDENTIFIER LBRACE enum_members RBRACE

    IDENTIFIER      shift and go to state 103


state 26

    (98) controlEstructure -> IF . LPAREN expression RPAREN statement
    (99) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 104


state 27

    (131) controlEstructure -> SWITCH . LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE

    LPAREN          shift and go to state 105


state 28

    (143) controlEstructure -> WHILE . LPAREN expression RPAREN push_loop statement pop_loop

    LPAREN          shift and go to state 106


state 29

    (123) class_definition -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 107


state 30

    (46) statement -> RETURN . expression SEMICOLON
    (114) statement -> RETURN . SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    SEMICOLON       shift and go to state 109
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 108

state 31

    (104) statement -> varAssignment .

    LET             reduce using rule 104 (statement -> varAssignment .)
    FUNCTION        reduce using rule 104 (statement -> varAssignment .)
    CONST           reduce using rule 104 (statement -> varAssignment .)
    ASYNC           reduce using rule 104 (statement -> varAssignment .)
    ENUM            reduce using rule 104 (statement -> varAssignment .)
    IF              reduce using rule 104 (statement -> varAssignment .)
    SWITCH          reduce using rule 104 (statement -> varAssignment .)
    WHILE           reduce using rule 104 (statement -> varAssignment .)
    CLASS           reduce using rule 104 (statement -> varAssignment .)
    RETURN          reduce using rule 104 (statement -> varAssignment .)
    LBRACE          reduce using rule 104 (statement -> varAssignment .)
    BREAK           reduce using rule 104 (statement -> varAssignment .)
    CONTINUE        reduce using rule 104 (statement -> varAssignment .)
    INTERFACE       reduce using rule 104 (statement -> varAssignment .)
    IDENTIFIER      reduce using rule 104 (statement -> varAssignment .)
    LBRACKET        reduce using rule 104 (statement -> varAssignment .)
    PROMPT          reduce using rule 104 (statement -> varAssignment .)
    NOT             reduce using rule 104 (statement -> varAssignment .)
    LPAREN          reduce using rule 104 (statement -> varAssignment .)
    NUMBER          reduce using rule 104 (statement -> varAssignment .)
    FLOAT           reduce using rule 104 (statement -> varAssignment .)
    STRING          reduce using rule 104 (statement -> varAssignment .)
    TRUE            reduce using rule 104 (statement -> varAssignment .)
    FALSE           reduce using rule 104 (statement -> varAssignment .)
    PLUSPLUS        reduce using rule 104 (statement -> varAssignment .)
    MINUSMINUS      reduce using rule 104 (statement -> varAssignment .)
    CONSOLE         reduce using rule 104 (statement -> varAssignment .)
    VAR             reduce using rule 104 (statement -> varAssignment .)
    FOR             reduce using rule 104 (statement -> varAssignment .)
    $end            reduce using rule 104 (statement -> varAssignment .)
    RBRACE          reduce using rule 104 (statement -> varAssignment .)
    ELSE            reduce using rule 104 (statement -> varAssignment .)
    CASE            reduce using rule 104 (statement -> varAssignment .)
    DEFAULT         reduce using rule 104 (statement -> varAssignment .)


state 32

    (113) statement -> forEstructure .

    LET             reduce using rule 113 (statement -> forEstructure .)
    FUNCTION        reduce using rule 113 (statement -> forEstructure .)
    CONST           reduce using rule 113 (statement -> forEstructure .)
    ASYNC           reduce using rule 113 (statement -> forEstructure .)
    ENUM            reduce using rule 113 (statement -> forEstructure .)
    IF              reduce using rule 113 (statement -> forEstructure .)
    SWITCH          reduce using rule 113 (statement -> forEstructure .)
    WHILE           reduce using rule 113 (statement -> forEstructure .)
    CLASS           reduce using rule 113 (statement -> forEstructure .)
    RETURN          reduce using rule 113 (statement -> forEstructure .)
    LBRACE          reduce using rule 113 (statement -> forEstructure .)
    BREAK           reduce using rule 113 (statement -> forEstructure .)
    CONTINUE        reduce using rule 113 (statement -> forEstructure .)
    INTERFACE       reduce using rule 113 (statement -> forEstructure .)
    IDENTIFIER      reduce using rule 113 (statement -> forEstructure .)
    LBRACKET        reduce using rule 113 (statement -> forEstructure .)
    PROMPT          reduce using rule 113 (statement -> forEstructure .)
    NOT             reduce using rule 113 (statement -> forEstructure .)
    LPAREN          reduce using rule 113 (statement -> forEstructure .)
    NUMBER          reduce using rule 113 (statement -> forEstructure .)
    FLOAT           reduce using rule 113 (statement -> forEstructure .)
    STRING          reduce using rule 113 (statement -> forEstructure .)
    TRUE            reduce using rule 113 (statement -> forEstructure .)
    FALSE           reduce using rule 113 (statement -> forEstructure .)
    PLUSPLUS        reduce using rule 113 (statement -> forEstructure .)
    MINUSMINUS      reduce using rule 113 (statement -> forEstructure .)
    CONSOLE         reduce using rule 113 (statement -> forEstructure .)
    VAR             reduce using rule 113 (statement -> forEstructure .)
    FOR             reduce using rule 113 (statement -> forEstructure .)
    $end            reduce using rule 113 (statement -> forEstructure .)
    RBRACE          reduce using rule 113 (statement -> forEstructure .)
    ELSE            reduce using rule 113 (statement -> forEstructure .)
    CASE            reduce using rule 113 (statement -> forEstructure .)
    DEFAULT         reduce using rule 113 (statement -> forEstructure .)


state 33

    (137) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 110


state 34

    (138) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 111


state 35

    (145) interface -> INTERFACE . IDENTIFIER LBRACE interface_body RBRACE

    IDENTIFIER      shift and go to state 112


state 36

    (81) expression -> PROMPT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 113


state 37

    (89) expression -> STRING .

    SEMICOLON       reduce using rule 89 (expression -> STRING .)
    PLUS            reduce using rule 89 (expression -> STRING .)
    MINUS           reduce using rule 89 (expression -> STRING .)
    TIMES           reduce using rule 89 (expression -> STRING .)
    DIV             reduce using rule 89 (expression -> STRING .)
    MOD             reduce using rule 89 (expression -> STRING .)
    PLUS_ASSIGN     reduce using rule 89 (expression -> STRING .)
    MINUS_ASSIGN    reduce using rule 89 (expression -> STRING .)
    MULT_ASSIGN     reduce using rule 89 (expression -> STRING .)
    DIV_ASSIGN      reduce using rule 89 (expression -> STRING .)
    MOD_ASSIGN      reduce using rule 89 (expression -> STRING .)
    POT             reduce using rule 89 (expression -> STRING .)
    AND             reduce using rule 89 (expression -> STRING .)
    OR              reduce using rule 89 (expression -> STRING .)
    EQ              reduce using rule 89 (expression -> STRING .)
    NEQ             reduce using rule 89 (expression -> STRING .)
    STRICT_EQ       reduce using rule 89 (expression -> STRING .)
    STRICT_NEQ      reduce using rule 89 (expression -> STRING .)
    LT              reduce using rule 89 (expression -> STRING .)
    GT              reduce using rule 89 (expression -> STRING .)
    LE              reduce using rule 89 (expression -> STRING .)
    GE              reduce using rule 89 (expression -> STRING .)
    DOT             reduce using rule 89 (expression -> STRING .)
    LBRACKET        reduce using rule 89 (expression -> STRING .)
    PLUSPLUS        reduce using rule 89 (expression -> STRING .)
    MINUSMINUS      reduce using rule 89 (expression -> STRING .)
    COMMA           reduce using rule 89 (expression -> STRING .)
    RPAREN          reduce using rule 89 (expression -> STRING .)
    RBRACKET        reduce using rule 89 (expression -> STRING .)
    RBRACE          reduce using rule 89 (expression -> STRING .)
    COLON           reduce using rule 89 (expression -> STRING .)


state 38

    (82) expression -> NOT . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 114

state 39

    (87) expression -> NUMBER .

    SEMICOLON       reduce using rule 87 (expression -> NUMBER .)
    PLUS            reduce using rule 87 (expression -> NUMBER .)
    MINUS           reduce using rule 87 (expression -> NUMBER .)
    TIMES           reduce using rule 87 (expression -> NUMBER .)
    DIV             reduce using rule 87 (expression -> NUMBER .)
    MOD             reduce using rule 87 (expression -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 87 (expression -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 87 (expression -> NUMBER .)
    MULT_ASSIGN     reduce using rule 87 (expression -> NUMBER .)
    DIV_ASSIGN      reduce using rule 87 (expression -> NUMBER .)
    MOD_ASSIGN      reduce using rule 87 (expression -> NUMBER .)
    POT             reduce using rule 87 (expression -> NUMBER .)
    AND             reduce using rule 87 (expression -> NUMBER .)
    OR              reduce using rule 87 (expression -> NUMBER .)
    EQ              reduce using rule 87 (expression -> NUMBER .)
    NEQ             reduce using rule 87 (expression -> NUMBER .)
    STRICT_EQ       reduce using rule 87 (expression -> NUMBER .)
    STRICT_NEQ      reduce using rule 87 (expression -> NUMBER .)
    LT              reduce using rule 87 (expression -> NUMBER .)
    GT              reduce using rule 87 (expression -> NUMBER .)
    LE              reduce using rule 87 (expression -> NUMBER .)
    GE              reduce using rule 87 (expression -> NUMBER .)
    DOT             reduce using rule 87 (expression -> NUMBER .)
    LBRACKET        reduce using rule 87 (expression -> NUMBER .)
    PLUSPLUS        reduce using rule 87 (expression -> NUMBER .)
    MINUSMINUS      reduce using rule 87 (expression -> NUMBER .)
    COMMA           reduce using rule 87 (expression -> NUMBER .)
    RPAREN          reduce using rule 87 (expression -> NUMBER .)
    RBRACKET        reduce using rule 87 (expression -> NUMBER .)
    RBRACE          reduce using rule 87 (expression -> NUMBER .)
    COLON           reduce using rule 87 (expression -> NUMBER .)


state 40

    (88) expression -> FLOAT .

    SEMICOLON       reduce using rule 88 (expression -> FLOAT .)
    PLUS            reduce using rule 88 (expression -> FLOAT .)
    MINUS           reduce using rule 88 (expression -> FLOAT .)
    TIMES           reduce using rule 88 (expression -> FLOAT .)
    DIV             reduce using rule 88 (expression -> FLOAT .)
    MOD             reduce using rule 88 (expression -> FLOAT .)
    PLUS_ASSIGN     reduce using rule 88 (expression -> FLOAT .)
    MINUS_ASSIGN    reduce using rule 88 (expression -> FLOAT .)
    MULT_ASSIGN     reduce using rule 88 (expression -> FLOAT .)
    DIV_ASSIGN      reduce using rule 88 (expression -> FLOAT .)
    MOD_ASSIGN      reduce using rule 88 (expression -> FLOAT .)
    POT             reduce using rule 88 (expression -> FLOAT .)
    AND             reduce using rule 88 (expression -> FLOAT .)
    OR              reduce using rule 88 (expression -> FLOAT .)
    EQ              reduce using rule 88 (expression -> FLOAT .)
    NEQ             reduce using rule 88 (expression -> FLOAT .)
    STRICT_EQ       reduce using rule 88 (expression -> FLOAT .)
    STRICT_NEQ      reduce using rule 88 (expression -> FLOAT .)
    LT              reduce using rule 88 (expression -> FLOAT .)
    GT              reduce using rule 88 (expression -> FLOAT .)
    LE              reduce using rule 88 (expression -> FLOAT .)
    GE              reduce using rule 88 (expression -> FLOAT .)
    DOT             reduce using rule 88 (expression -> FLOAT .)
    LBRACKET        reduce using rule 88 (expression -> FLOAT .)
    PLUSPLUS        reduce using rule 88 (expression -> FLOAT .)
    MINUSMINUS      reduce using rule 88 (expression -> FLOAT .)
    COMMA           reduce using rule 88 (expression -> FLOAT .)
    RPAREN          reduce using rule 88 (expression -> FLOAT .)
    RBRACKET        reduce using rule 88 (expression -> FLOAT .)
    RBRACE          reduce using rule 88 (expression -> FLOAT .)
    COLON           reduce using rule 88 (expression -> FLOAT .)


state 41

    (91) expression -> TRUE .

    SEMICOLON       reduce using rule 91 (expression -> TRUE .)
    PLUS            reduce using rule 91 (expression -> TRUE .)
    MINUS           reduce using rule 91 (expression -> TRUE .)
    TIMES           reduce using rule 91 (expression -> TRUE .)
    DIV             reduce using rule 91 (expression -> TRUE .)
    MOD             reduce using rule 91 (expression -> TRUE .)
    PLUS_ASSIGN     reduce using rule 91 (expression -> TRUE .)
    MINUS_ASSIGN    reduce using rule 91 (expression -> TRUE .)
    MULT_ASSIGN     reduce using rule 91 (expression -> TRUE .)
    DIV_ASSIGN      reduce using rule 91 (expression -> TRUE .)
    MOD_ASSIGN      reduce using rule 91 (expression -> TRUE .)
    POT             reduce using rule 91 (expression -> TRUE .)
    AND             reduce using rule 91 (expression -> TRUE .)
    OR              reduce using rule 91 (expression -> TRUE .)
    EQ              reduce using rule 91 (expression -> TRUE .)
    NEQ             reduce using rule 91 (expression -> TRUE .)
    STRICT_EQ       reduce using rule 91 (expression -> TRUE .)
    STRICT_NEQ      reduce using rule 91 (expression -> TRUE .)
    LT              reduce using rule 91 (expression -> TRUE .)
    GT              reduce using rule 91 (expression -> TRUE .)
    LE              reduce using rule 91 (expression -> TRUE .)
    GE              reduce using rule 91 (expression -> TRUE .)
    DOT             reduce using rule 91 (expression -> TRUE .)
    LBRACKET        reduce using rule 91 (expression -> TRUE .)
    PLUSPLUS        reduce using rule 91 (expression -> TRUE .)
    MINUSMINUS      reduce using rule 91 (expression -> TRUE .)
    COMMA           reduce using rule 91 (expression -> TRUE .)
    RPAREN          reduce using rule 91 (expression -> TRUE .)
    RBRACKET        reduce using rule 91 (expression -> TRUE .)
    RBRACE          reduce using rule 91 (expression -> TRUE .)
    COLON           reduce using rule 91 (expression -> TRUE .)


state 42

    (92) expression -> FALSE .

    SEMICOLON       reduce using rule 92 (expression -> FALSE .)
    PLUS            reduce using rule 92 (expression -> FALSE .)
    MINUS           reduce using rule 92 (expression -> FALSE .)
    TIMES           reduce using rule 92 (expression -> FALSE .)
    DIV             reduce using rule 92 (expression -> FALSE .)
    MOD             reduce using rule 92 (expression -> FALSE .)
    PLUS_ASSIGN     reduce using rule 92 (expression -> FALSE .)
    MINUS_ASSIGN    reduce using rule 92 (expression -> FALSE .)
    MULT_ASSIGN     reduce using rule 92 (expression -> FALSE .)
    DIV_ASSIGN      reduce using rule 92 (expression -> FALSE .)
    MOD_ASSIGN      reduce using rule 92 (expression -> FALSE .)
    POT             reduce using rule 92 (expression -> FALSE .)
    AND             reduce using rule 92 (expression -> FALSE .)
    OR              reduce using rule 92 (expression -> FALSE .)
    EQ              reduce using rule 92 (expression -> FALSE .)
    NEQ             reduce using rule 92 (expression -> FALSE .)
    STRICT_EQ       reduce using rule 92 (expression -> FALSE .)
    STRICT_NEQ      reduce using rule 92 (expression -> FALSE .)
    LT              reduce using rule 92 (expression -> FALSE .)
    GT              reduce using rule 92 (expression -> FALSE .)
    LE              reduce using rule 92 (expression -> FALSE .)
    GE              reduce using rule 92 (expression -> FALSE .)
    DOT             reduce using rule 92 (expression -> FALSE .)
    LBRACKET        reduce using rule 92 (expression -> FALSE .)
    PLUSPLUS        reduce using rule 92 (expression -> FALSE .)
    MINUSMINUS      reduce using rule 92 (expression -> FALSE .)
    COMMA           reduce using rule 92 (expression -> FALSE .)
    RPAREN          reduce using rule 92 (expression -> FALSE .)
    RBRACKET        reduce using rule 92 (expression -> FALSE .)
    RBRACE          reduce using rule 92 (expression -> FALSE .)
    COLON           reduce using rule 92 (expression -> FALSE .)


state 43

    (95) expression -> PLUSPLUS . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 115

state 44

    (96) expression -> MINUSMINUS . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 116

state 45

    (97) consolelog -> CONSOLE . DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON

    DOT             shift and go to state 117


state 46

    (21) varAssignment -> VAR . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> VAR . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 118


state 47

    (32) forEstructure -> FOR . LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> FOR . LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    LPAREN          shift and go to state 119


state 48

    (1) program -> program element .

    LET             reduce using rule 1 (program -> program element .)
    FUNCTION        reduce using rule 1 (program -> program element .)
    CONST           reduce using rule 1 (program -> program element .)
    ASYNC           reduce using rule 1 (program -> program element .)
    ENUM            reduce using rule 1 (program -> program element .)
    IF              reduce using rule 1 (program -> program element .)
    SWITCH          reduce using rule 1 (program -> program element .)
    WHILE           reduce using rule 1 (program -> program element .)
    CLASS           reduce using rule 1 (program -> program element .)
    RETURN          reduce using rule 1 (program -> program element .)
    LBRACE          reduce using rule 1 (program -> program element .)
    BREAK           reduce using rule 1 (program -> program element .)
    CONTINUE        reduce using rule 1 (program -> program element .)
    INTERFACE       reduce using rule 1 (program -> program element .)
    IDENTIFIER      reduce using rule 1 (program -> program element .)
    LBRACKET        reduce using rule 1 (program -> program element .)
    PROMPT          reduce using rule 1 (program -> program element .)
    NOT             reduce using rule 1 (program -> program element .)
    LPAREN          reduce using rule 1 (program -> program element .)
    NUMBER          reduce using rule 1 (program -> program element .)
    FLOAT           reduce using rule 1 (program -> program element .)
    STRING          reduce using rule 1 (program -> program element .)
    TRUE            reduce using rule 1 (program -> program element .)
    FALSE           reduce using rule 1 (program -> program element .)
    PLUSPLUS        reduce using rule 1 (program -> program element .)
    MINUSMINUS      reduce using rule 1 (program -> program element .)
    CONSOLE         reduce using rule 1 (program -> program element .)
    VAR             reduce using rule 1 (program -> program element .)
    FOR             reduce using rule 1 (program -> program element .)
    $end            reduce using rule 1 (program -> program element .)


state 49

    (15) element -> expression SEMICOLON .
    (111) statement -> expression SEMICOLON .

  ! reduce/reduce conflict for LET resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for ASYNC resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for ENUM resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LBRACE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for PROMPT resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for VAR resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (element -> expression SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 15 (element -> expression SEMICOLON .)
    LET             reduce using rule 15 (element -> expression SEMICOLON .)
    FUNCTION        reduce using rule 15 (element -> expression SEMICOLON .)
    CONST           reduce using rule 15 (element -> expression SEMICOLON .)
    ASYNC           reduce using rule 15 (element -> expression SEMICOLON .)
    ENUM            reduce using rule 15 (element -> expression SEMICOLON .)
    IF              reduce using rule 15 (element -> expression SEMICOLON .)
    SWITCH          reduce using rule 15 (element -> expression SEMICOLON .)
    WHILE           reduce using rule 15 (element -> expression SEMICOLON .)
    CLASS           reduce using rule 15 (element -> expression SEMICOLON .)
    RETURN          reduce using rule 15 (element -> expression SEMICOLON .)
    LBRACE          reduce using rule 15 (element -> expression SEMICOLON .)
    BREAK           reduce using rule 15 (element -> expression SEMICOLON .)
    CONTINUE        reduce using rule 15 (element -> expression SEMICOLON .)
    INTERFACE       reduce using rule 15 (element -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 15 (element -> expression SEMICOLON .)
    LBRACKET        reduce using rule 15 (element -> expression SEMICOLON .)
    PROMPT          reduce using rule 15 (element -> expression SEMICOLON .)
    NOT             reduce using rule 15 (element -> expression SEMICOLON .)
    LPAREN          reduce using rule 15 (element -> expression SEMICOLON .)
    NUMBER          reduce using rule 15 (element -> expression SEMICOLON .)
    FLOAT           reduce using rule 15 (element -> expression SEMICOLON .)
    STRING          reduce using rule 15 (element -> expression SEMICOLON .)
    TRUE            reduce using rule 15 (element -> expression SEMICOLON .)
    FALSE           reduce using rule 15 (element -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 15 (element -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 15 (element -> expression SEMICOLON .)
    CONSOLE         reduce using rule 15 (element -> expression SEMICOLON .)
    VAR             reduce using rule 15 (element -> expression SEMICOLON .)
    FOR             reduce using rule 15 (element -> expression SEMICOLON .)
    $end            reduce using rule 15 (element -> expression SEMICOLON .)

  ! LET             [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! CONST           [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! ASYNC           [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! ENUM            [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! IF              [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! WHILE           [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! CLASS           [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! RETURN          [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! LBRACE          [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! BREAK           [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! INTERFACE       [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! IDENTIFIER      [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! LBRACKET        [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! PROMPT          [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! NOT             [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! STRING          [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! TRUE            [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! FALSE           [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! PLUSPLUS        [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! MINUSMINUS      [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! CONSOLE         [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! VAR             [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! FOR             [ reduce using rule 111 (statement -> expression SEMICOLON .) ]
  ! $end            [ reduce using rule 111 (statement -> expression SEMICOLON .) ]


state 50

    (60) expression -> expression PLUS . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 120

state 51

    (61) expression -> expression MINUS . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 121

state 52

    (62) expression -> expression TIMES . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 122

state 53

    (63) expression -> expression DIV . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 123

state 54

    (64) expression -> expression MOD . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 124

state 55

    (65) expression -> expression PLUS_ASSIGN . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 125

state 56

    (66) expression -> expression MINUS_ASSIGN . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 126

state 57

    (67) expression -> expression MULT_ASSIGN . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 127

state 58

    (68) expression -> expression DIV_ASSIGN . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 128

state 59

    (69) expression -> expression MOD_ASSIGN . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 129

state 60

    (70) expression -> expression POT . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 130

state 61

    (71) expression -> expression AND . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 131

state 62

    (72) expression -> expression OR . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 132

state 63

    (73) expression -> expression EQ . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 133

state 64

    (74) expression -> expression NEQ . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 134

state 65

    (75) expression -> expression STRICT_EQ . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 135

state 66

    (76) expression -> expression STRICT_NEQ . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 136

state 67

    (77) expression -> expression LT . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 137

state 68

    (78) expression -> expression GT . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 138

state 69

    (79) expression -> expression LE . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 139

state 70

    (80) expression -> expression GE . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 140

state 71

    (84) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 141


state 72

    (85) expression -> expression LBRACKET . expression RBRACKET
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 142

state 73

    (93) expression -> expression PLUSPLUS .

    SEMICOLON       reduce using rule 93 (expression -> expression PLUSPLUS .)
    PLUS            reduce using rule 93 (expression -> expression PLUSPLUS .)
    MINUS           reduce using rule 93 (expression -> expression PLUSPLUS .)
    TIMES           reduce using rule 93 (expression -> expression PLUSPLUS .)
    DIV             reduce using rule 93 (expression -> expression PLUSPLUS .)
    MOD             reduce using rule 93 (expression -> expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 93 (expression -> expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 93 (expression -> expression PLUSPLUS .)
    MULT_ASSIGN     reduce using rule 93 (expression -> expression PLUSPLUS .)
    DIV_ASSIGN      reduce using rule 93 (expression -> expression PLUSPLUS .)
    MOD_ASSIGN      reduce using rule 93 (expression -> expression PLUSPLUS .)
    POT             reduce using rule 93 (expression -> expression PLUSPLUS .)
    AND             reduce using rule 93 (expression -> expression PLUSPLUS .)
    OR              reduce using rule 93 (expression -> expression PLUSPLUS .)
    EQ              reduce using rule 93 (expression -> expression PLUSPLUS .)
    NEQ             reduce using rule 93 (expression -> expression PLUSPLUS .)
    STRICT_EQ       reduce using rule 93 (expression -> expression PLUSPLUS .)
    STRICT_NEQ      reduce using rule 93 (expression -> expression PLUSPLUS .)
    LT              reduce using rule 93 (expression -> expression PLUSPLUS .)
    GT              reduce using rule 93 (expression -> expression PLUSPLUS .)
    LE              reduce using rule 93 (expression -> expression PLUSPLUS .)
    GE              reduce using rule 93 (expression -> expression PLUSPLUS .)
    DOT             reduce using rule 93 (expression -> expression PLUSPLUS .)
    LBRACKET        reduce using rule 93 (expression -> expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 93 (expression -> expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 93 (expression -> expression PLUSPLUS .)
    COMMA           reduce using rule 93 (expression -> expression PLUSPLUS .)
    RPAREN          reduce using rule 93 (expression -> expression PLUSPLUS .)
    RBRACKET        reduce using rule 93 (expression -> expression PLUSPLUS .)
    RBRACE          reduce using rule 93 (expression -> expression PLUSPLUS .)
    COLON           reduce using rule 93 (expression -> expression PLUSPLUS .)


state 74

    (94) expression -> expression MINUSMINUS .

    SEMICOLON       reduce using rule 94 (expression -> expression MINUSMINUS .)
    PLUS            reduce using rule 94 (expression -> expression MINUSMINUS .)
    MINUS           reduce using rule 94 (expression -> expression MINUSMINUS .)
    TIMES           reduce using rule 94 (expression -> expression MINUSMINUS .)
    DIV             reduce using rule 94 (expression -> expression MINUSMINUS .)
    MOD             reduce using rule 94 (expression -> expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 94 (expression -> expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 94 (expression -> expression MINUSMINUS .)
    MULT_ASSIGN     reduce using rule 94 (expression -> expression MINUSMINUS .)
    DIV_ASSIGN      reduce using rule 94 (expression -> expression MINUSMINUS .)
    MOD_ASSIGN      reduce using rule 94 (expression -> expression MINUSMINUS .)
    POT             reduce using rule 94 (expression -> expression MINUSMINUS .)
    AND             reduce using rule 94 (expression -> expression MINUSMINUS .)
    OR              reduce using rule 94 (expression -> expression MINUSMINUS .)
    EQ              reduce using rule 94 (expression -> expression MINUSMINUS .)
    NEQ             reduce using rule 94 (expression -> expression MINUSMINUS .)
    STRICT_EQ       reduce using rule 94 (expression -> expression MINUSMINUS .)
    STRICT_NEQ      reduce using rule 94 (expression -> expression MINUSMINUS .)
    LT              reduce using rule 94 (expression -> expression MINUSMINUS .)
    GT              reduce using rule 94 (expression -> expression MINUSMINUS .)
    LE              reduce using rule 94 (expression -> expression MINUSMINUS .)
    GE              reduce using rule 94 (expression -> expression MINUSMINUS .)
    DOT             reduce using rule 94 (expression -> expression MINUSMINUS .)
    LBRACKET        reduce using rule 94 (expression -> expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 94 (expression -> expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 94 (expression -> expression MINUSMINUS .)
    COMMA           reduce using rule 94 (expression -> expression MINUSMINUS .)
    RPAREN          reduce using rule 94 (expression -> expression MINUSMINUS .)
    RBRACKET        reduce using rule 94 (expression -> expression MINUSMINUS .)
    RBRACE          reduce using rule 94 (expression -> expression MINUSMINUS .)
    COLON           reduce using rule 94 (expression -> expression MINUSMINUS .)


state 75

    (18) letAssignment -> LET IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET IDENTIFIER . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER . COLON type SEMICOLON
    (23) declaracion -> LET IDENTIFIER . COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    COLON           shift and go to state 143
    EQUAL           shift and go to state 144


state 76

    (17) assignment -> IDENTIFIER EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 145

state 77

    (86) expression -> IDENTIFIER LPAREN . lista_expresiones_opt RPAREN
    (24) lista_expresiones_opt -> . lista_expresiones
    (25) lista_expresiones_opt -> . empty
    (26) lista_expresiones -> . expression
    (27) lista_expresiones -> . expression COMMA lista_expresiones
    (120) empty -> .
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    RPAREN          reduce using rule 120 (empty -> .)
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    lista_expresiones_opt          shift and go to state 146
    lista_expresiones              shift and go to state 147
    empty                          shift and go to state 148
    expression                     shift and go to state 149

state 78

    (53) expression -> LBRACKET expression . COMMA expression RBRACKET
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    COMMA           shift and go to state 150
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 79

    (86) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (90) expression -> IDENTIFIER .

    LPAREN          shift and go to state 77
    COMMA           reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 90 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 90 (expression -> IDENTIFIER .)
    DIV             reduce using rule 90 (expression -> IDENTIFIER .)
    MOD             reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 90 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    POT             reduce using rule 90 (expression -> IDENTIFIER .)
    AND             reduce using rule 90 (expression -> IDENTIFIER .)
    OR              reduce using rule 90 (expression -> IDENTIFIER .)
    EQ              reduce using rule 90 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 90 (expression -> IDENTIFIER .)
    LT              reduce using rule 90 (expression -> IDENTIFIER .)
    GT              reduce using rule 90 (expression -> IDENTIFIER .)
    LE              reduce using rule 90 (expression -> IDENTIFIER .)
    GE              reduce using rule 90 (expression -> IDENTIFIER .)
    DOT             reduce using rule 90 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 90 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 90 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 90 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 90 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 90 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 90 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 90 (expression -> IDENTIFIER .)
    COLON           reduce using rule 90 (expression -> IDENTIFIER .)


state 80

    (150) expression -> LBRACE . object_properties RBRACE
    (151) object_properties -> . object_property
    (152) object_properties -> . object_property COMMA object_properties
    (153) object_properties -> . empty
    (154) object_property -> . IDENTIFIER COLON expression
    (120) empty -> .

    IDENTIFIER      shift and go to state 152
    RBRACE          reduce using rule 120 (empty -> .)

    object_properties              shift and go to state 85
    object_property                shift and go to state 88
    empty                          shift and go to state 151

state 81

    (45) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    LPAREN          shift and go to state 153


state 82

    (83) expression -> LPAREN expression . RPAREN
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 154
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 83

    (102) statement -> LBRACE instruction_list . RBRACE
    (117) instruction_list -> instruction_list . statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          shift and go to state 155
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 156
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 84

    (116) statement -> LBRACE RBRACE .

    LET             reduce using rule 116 (statement -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 116 (statement -> LBRACE RBRACE .)
    CONST           reduce using rule 116 (statement -> LBRACE RBRACE .)
    ASYNC           reduce using rule 116 (statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 116 (statement -> LBRACE RBRACE .)
    IF              reduce using rule 116 (statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 116 (statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 116 (statement -> LBRACE RBRACE .)
    CLASS           reduce using rule 116 (statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 116 (statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 116 (statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 116 (statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 116 (statement -> LBRACE RBRACE .)
    INTERFACE       reduce using rule 116 (statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 116 (statement -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 116 (statement -> LBRACE RBRACE .)
    PROMPT          reduce using rule 116 (statement -> LBRACE RBRACE .)
    NOT             reduce using rule 116 (statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 116 (statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 116 (statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 116 (statement -> LBRACE RBRACE .)
    STRING          reduce using rule 116 (statement -> LBRACE RBRACE .)
    TRUE            reduce using rule 116 (statement -> LBRACE RBRACE .)
    FALSE           reduce using rule 116 (statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 116 (statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 116 (statement -> LBRACE RBRACE .)
    CONSOLE         reduce using rule 116 (statement -> LBRACE RBRACE .)
    VAR             reduce using rule 116 (statement -> LBRACE RBRACE .)
    FOR             reduce using rule 116 (statement -> LBRACE RBRACE .)
    $end            reduce using rule 116 (statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 116 (statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 116 (statement -> LBRACE RBRACE .)
    CASE            reduce using rule 116 (statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 116 (statement -> LBRACE RBRACE .)


state 85

    (150) expression -> LBRACE object_properties . RBRACE

    RBRACE          shift and go to state 157


state 86

    (118) instruction_list -> statement .

    RBRACE          reduce using rule 118 (instruction_list -> statement .)
    RETURN          reduce using rule 118 (instruction_list -> statement .)
    LBRACE          reduce using rule 118 (instruction_list -> statement .)
    BREAK           reduce using rule 118 (instruction_list -> statement .)
    CONTINUE        reduce using rule 118 (instruction_list -> statement .)
    LET             reduce using rule 118 (instruction_list -> statement .)
    VAR             reduce using rule 118 (instruction_list -> statement .)
    CONST           reduce using rule 118 (instruction_list -> statement .)
    FUNCTION        reduce using rule 118 (instruction_list -> statement .)
    ASYNC           reduce using rule 118 (instruction_list -> statement .)
    CONSOLE         reduce using rule 118 (instruction_list -> statement .)
    LBRACKET        reduce using rule 118 (instruction_list -> statement .)
    PROMPT          reduce using rule 118 (instruction_list -> statement .)
    NOT             reduce using rule 118 (instruction_list -> statement .)
    LPAREN          reduce using rule 118 (instruction_list -> statement .)
    IDENTIFIER      reduce using rule 118 (instruction_list -> statement .)
    NUMBER          reduce using rule 118 (instruction_list -> statement .)
    FLOAT           reduce using rule 118 (instruction_list -> statement .)
    STRING          reduce using rule 118 (instruction_list -> statement .)
    TRUE            reduce using rule 118 (instruction_list -> statement .)
    FALSE           reduce using rule 118 (instruction_list -> statement .)
    PLUSPLUS        reduce using rule 118 (instruction_list -> statement .)
    MINUSMINUS      reduce using rule 118 (instruction_list -> statement .)
    IF              reduce using rule 118 (instruction_list -> statement .)
    SWITCH          reduce using rule 118 (instruction_list -> statement .)
    WHILE           reduce using rule 118 (instruction_list -> statement .)
    FOR             reduce using rule 118 (instruction_list -> statement .)
    CLASS           reduce using rule 118 (instruction_list -> statement .)
    CASE            reduce using rule 118 (instruction_list -> statement .)
    DEFAULT         reduce using rule 118 (instruction_list -> statement .)


state 87

    (119) instruction_list -> empty .
    (153) object_properties -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 119 (instruction_list -> empty .)
    RBRACE          reduce using rule 119 (instruction_list -> empty .)
    RETURN          reduce using rule 119 (instruction_list -> empty .)
    LBRACE          reduce using rule 119 (instruction_list -> empty .)
    BREAK           reduce using rule 119 (instruction_list -> empty .)
    CONTINUE        reduce using rule 119 (instruction_list -> empty .)
    LET             reduce using rule 119 (instruction_list -> empty .)
    VAR             reduce using rule 119 (instruction_list -> empty .)
    CONST           reduce using rule 119 (instruction_list -> empty .)
    FUNCTION        reduce using rule 119 (instruction_list -> empty .)
    ASYNC           reduce using rule 119 (instruction_list -> empty .)
    CONSOLE         reduce using rule 119 (instruction_list -> empty .)
    LBRACKET        reduce using rule 119 (instruction_list -> empty .)
    PROMPT          reduce using rule 119 (instruction_list -> empty .)
    NOT             reduce using rule 119 (instruction_list -> empty .)
    LPAREN          reduce using rule 119 (instruction_list -> empty .)
    IDENTIFIER      reduce using rule 119 (instruction_list -> empty .)
    NUMBER          reduce using rule 119 (instruction_list -> empty .)
    FLOAT           reduce using rule 119 (instruction_list -> empty .)
    STRING          reduce using rule 119 (instruction_list -> empty .)
    TRUE            reduce using rule 119 (instruction_list -> empty .)
    FALSE           reduce using rule 119 (instruction_list -> empty .)
    PLUSPLUS        reduce using rule 119 (instruction_list -> empty .)
    MINUSMINUS      reduce using rule 119 (instruction_list -> empty .)
    IF              reduce using rule 119 (instruction_list -> empty .)
    SWITCH          reduce using rule 119 (instruction_list -> empty .)
    WHILE           reduce using rule 119 (instruction_list -> empty .)
    FOR             reduce using rule 119 (instruction_list -> empty .)
    CLASS           reduce using rule 119 (instruction_list -> empty .)

  ! RBRACE          [ reduce using rule 153 (object_properties -> empty .) ]


state 88

    (151) object_properties -> object_property .
    (152) object_properties -> object_property . COMMA object_properties

    RBRACE          reduce using rule 151 (object_properties -> object_property .)
    COMMA           shift and go to state 158


state 89

    (111) statement -> expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 159
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 90

    (103) statement -> letAssignment .

    RBRACE          reduce using rule 103 (statement -> letAssignment .)
    RETURN          reduce using rule 103 (statement -> letAssignment .)
    LBRACE          reduce using rule 103 (statement -> letAssignment .)
    BREAK           reduce using rule 103 (statement -> letAssignment .)
    CONTINUE        reduce using rule 103 (statement -> letAssignment .)
    LET             reduce using rule 103 (statement -> letAssignment .)
    VAR             reduce using rule 103 (statement -> letAssignment .)
    CONST           reduce using rule 103 (statement -> letAssignment .)
    FUNCTION        reduce using rule 103 (statement -> letAssignment .)
    ASYNC           reduce using rule 103 (statement -> letAssignment .)
    CONSOLE         reduce using rule 103 (statement -> letAssignment .)
    LBRACKET        reduce using rule 103 (statement -> letAssignment .)
    PROMPT          reduce using rule 103 (statement -> letAssignment .)
    NOT             reduce using rule 103 (statement -> letAssignment .)
    LPAREN          reduce using rule 103 (statement -> letAssignment .)
    IDENTIFIER      reduce using rule 103 (statement -> letAssignment .)
    NUMBER          reduce using rule 103 (statement -> letAssignment .)
    FLOAT           reduce using rule 103 (statement -> letAssignment .)
    STRING          reduce using rule 103 (statement -> letAssignment .)
    TRUE            reduce using rule 103 (statement -> letAssignment .)
    FALSE           reduce using rule 103 (statement -> letAssignment .)
    PLUSPLUS        reduce using rule 103 (statement -> letAssignment .)
    MINUSMINUS      reduce using rule 103 (statement -> letAssignment .)
    IF              reduce using rule 103 (statement -> letAssignment .)
    SWITCH          reduce using rule 103 (statement -> letAssignment .)
    WHILE           reduce using rule 103 (statement -> letAssignment .)
    FOR             reduce using rule 103 (statement -> letAssignment .)
    CLASS           reduce using rule 103 (statement -> letAssignment .)
    ELSE            reduce using rule 103 (statement -> letAssignment .)
    ENUM            reduce using rule 103 (statement -> letAssignment .)
    INTERFACE       reduce using rule 103 (statement -> letAssignment .)
    $end            reduce using rule 103 (statement -> letAssignment .)
    CASE            reduce using rule 103 (statement -> letAssignment .)
    DEFAULT         reduce using rule 103 (statement -> letAssignment .)


state 91

    (105) statement -> constAssignment .

    RBRACE          reduce using rule 105 (statement -> constAssignment .)
    RETURN          reduce using rule 105 (statement -> constAssignment .)
    LBRACE          reduce using rule 105 (statement -> constAssignment .)
    BREAK           reduce using rule 105 (statement -> constAssignment .)
    CONTINUE        reduce using rule 105 (statement -> constAssignment .)
    LET             reduce using rule 105 (statement -> constAssignment .)
    VAR             reduce using rule 105 (statement -> constAssignment .)
    CONST           reduce using rule 105 (statement -> constAssignment .)
    FUNCTION        reduce using rule 105 (statement -> constAssignment .)
    ASYNC           reduce using rule 105 (statement -> constAssignment .)
    CONSOLE         reduce using rule 105 (statement -> constAssignment .)
    LBRACKET        reduce using rule 105 (statement -> constAssignment .)
    PROMPT          reduce using rule 105 (statement -> constAssignment .)
    NOT             reduce using rule 105 (statement -> constAssignment .)
    LPAREN          reduce using rule 105 (statement -> constAssignment .)
    IDENTIFIER      reduce using rule 105 (statement -> constAssignment .)
    NUMBER          reduce using rule 105 (statement -> constAssignment .)
    FLOAT           reduce using rule 105 (statement -> constAssignment .)
    STRING          reduce using rule 105 (statement -> constAssignment .)
    TRUE            reduce using rule 105 (statement -> constAssignment .)
    FALSE           reduce using rule 105 (statement -> constAssignment .)
    PLUSPLUS        reduce using rule 105 (statement -> constAssignment .)
    MINUSMINUS      reduce using rule 105 (statement -> constAssignment .)
    IF              reduce using rule 105 (statement -> constAssignment .)
    SWITCH          reduce using rule 105 (statement -> constAssignment .)
    WHILE           reduce using rule 105 (statement -> constAssignment .)
    FOR             reduce using rule 105 (statement -> constAssignment .)
    CLASS           reduce using rule 105 (statement -> constAssignment .)
    ELSE            reduce using rule 105 (statement -> constAssignment .)
    ENUM            reduce using rule 105 (statement -> constAssignment .)
    INTERFACE       reduce using rule 105 (statement -> constAssignment .)
    $end            reduce using rule 105 (statement -> constAssignment .)
    CASE            reduce using rule 105 (statement -> constAssignment .)
    DEFAULT         reduce using rule 105 (statement -> constAssignment .)


state 92

    (106) statement -> declaracion .

    RBRACE          reduce using rule 106 (statement -> declaracion .)
    RETURN          reduce using rule 106 (statement -> declaracion .)
    LBRACE          reduce using rule 106 (statement -> declaracion .)
    BREAK           reduce using rule 106 (statement -> declaracion .)
    CONTINUE        reduce using rule 106 (statement -> declaracion .)
    LET             reduce using rule 106 (statement -> declaracion .)
    VAR             reduce using rule 106 (statement -> declaracion .)
    CONST           reduce using rule 106 (statement -> declaracion .)
    FUNCTION        reduce using rule 106 (statement -> declaracion .)
    ASYNC           reduce using rule 106 (statement -> declaracion .)
    CONSOLE         reduce using rule 106 (statement -> declaracion .)
    LBRACKET        reduce using rule 106 (statement -> declaracion .)
    PROMPT          reduce using rule 106 (statement -> declaracion .)
    NOT             reduce using rule 106 (statement -> declaracion .)
    LPAREN          reduce using rule 106 (statement -> declaracion .)
    IDENTIFIER      reduce using rule 106 (statement -> declaracion .)
    NUMBER          reduce using rule 106 (statement -> declaracion .)
    FLOAT           reduce using rule 106 (statement -> declaracion .)
    STRING          reduce using rule 106 (statement -> declaracion .)
    TRUE            reduce using rule 106 (statement -> declaracion .)
    FALSE           reduce using rule 106 (statement -> declaracion .)
    PLUSPLUS        reduce using rule 106 (statement -> declaracion .)
    MINUSMINUS      reduce using rule 106 (statement -> declaracion .)
    IF              reduce using rule 106 (statement -> declaracion .)
    SWITCH          reduce using rule 106 (statement -> declaracion .)
    WHILE           reduce using rule 106 (statement -> declaracion .)
    FOR             reduce using rule 106 (statement -> declaracion .)
    CLASS           reduce using rule 106 (statement -> declaracion .)
    ELSE            reduce using rule 106 (statement -> declaracion .)
    ENUM            reduce using rule 106 (statement -> declaracion .)
    INTERFACE       reduce using rule 106 (statement -> declaracion .)
    $end            reduce using rule 106 (statement -> declaracion .)
    CASE            reduce using rule 106 (statement -> declaracion .)
    DEFAULT         reduce using rule 106 (statement -> declaracion .)


state 93

    (107) statement -> function .

    RBRACE          reduce using rule 107 (statement -> function .)
    RETURN          reduce using rule 107 (statement -> function .)
    LBRACE          reduce using rule 107 (statement -> function .)
    BREAK           reduce using rule 107 (statement -> function .)
    CONTINUE        reduce using rule 107 (statement -> function .)
    LET             reduce using rule 107 (statement -> function .)
    VAR             reduce using rule 107 (statement -> function .)
    CONST           reduce using rule 107 (statement -> function .)
    FUNCTION        reduce using rule 107 (statement -> function .)
    ASYNC           reduce using rule 107 (statement -> function .)
    CONSOLE         reduce using rule 107 (statement -> function .)
    LBRACKET        reduce using rule 107 (statement -> function .)
    PROMPT          reduce using rule 107 (statement -> function .)
    NOT             reduce using rule 107 (statement -> function .)
    LPAREN          reduce using rule 107 (statement -> function .)
    IDENTIFIER      reduce using rule 107 (statement -> function .)
    NUMBER          reduce using rule 107 (statement -> function .)
    FLOAT           reduce using rule 107 (statement -> function .)
    STRING          reduce using rule 107 (statement -> function .)
    TRUE            reduce using rule 107 (statement -> function .)
    FALSE           reduce using rule 107 (statement -> function .)
    PLUSPLUS        reduce using rule 107 (statement -> function .)
    MINUSMINUS      reduce using rule 107 (statement -> function .)
    IF              reduce using rule 107 (statement -> function .)
    SWITCH          reduce using rule 107 (statement -> function .)
    WHILE           reduce using rule 107 (statement -> function .)
    FOR             reduce using rule 107 (statement -> function .)
    CLASS           reduce using rule 107 (statement -> function .)
    ELSE            reduce using rule 107 (statement -> function .)
    ENUM            reduce using rule 107 (statement -> function .)
    INTERFACE       reduce using rule 107 (statement -> function .)
    $end            reduce using rule 107 (statement -> function .)
    CASE            reduce using rule 107 (statement -> function .)
    DEFAULT         reduce using rule 107 (statement -> function .)


state 94

    (108) statement -> arrow_function .

    RBRACE          reduce using rule 108 (statement -> arrow_function .)
    RETURN          reduce using rule 108 (statement -> arrow_function .)
    LBRACE          reduce using rule 108 (statement -> arrow_function .)
    BREAK           reduce using rule 108 (statement -> arrow_function .)
    CONTINUE        reduce using rule 108 (statement -> arrow_function .)
    LET             reduce using rule 108 (statement -> arrow_function .)
    VAR             reduce using rule 108 (statement -> arrow_function .)
    CONST           reduce using rule 108 (statement -> arrow_function .)
    FUNCTION        reduce using rule 108 (statement -> arrow_function .)
    ASYNC           reduce using rule 108 (statement -> arrow_function .)
    CONSOLE         reduce using rule 108 (statement -> arrow_function .)
    LBRACKET        reduce using rule 108 (statement -> arrow_function .)
    PROMPT          reduce using rule 108 (statement -> arrow_function .)
    NOT             reduce using rule 108 (statement -> arrow_function .)
    LPAREN          reduce using rule 108 (statement -> arrow_function .)
    IDENTIFIER      reduce using rule 108 (statement -> arrow_function .)
    NUMBER          reduce using rule 108 (statement -> arrow_function .)
    FLOAT           reduce using rule 108 (statement -> arrow_function .)
    STRING          reduce using rule 108 (statement -> arrow_function .)
    TRUE            reduce using rule 108 (statement -> arrow_function .)
    FALSE           reduce using rule 108 (statement -> arrow_function .)
    PLUSPLUS        reduce using rule 108 (statement -> arrow_function .)
    MINUSMINUS      reduce using rule 108 (statement -> arrow_function .)
    IF              reduce using rule 108 (statement -> arrow_function .)
    SWITCH          reduce using rule 108 (statement -> arrow_function .)
    WHILE           reduce using rule 108 (statement -> arrow_function .)
    FOR             reduce using rule 108 (statement -> arrow_function .)
    CLASS           reduce using rule 108 (statement -> arrow_function .)
    ELSE            reduce using rule 108 (statement -> arrow_function .)
    ENUM            reduce using rule 108 (statement -> arrow_function .)
    INTERFACE       reduce using rule 108 (statement -> arrow_function .)
    $end            reduce using rule 108 (statement -> arrow_function .)
    CASE            reduce using rule 108 (statement -> arrow_function .)
    DEFAULT         reduce using rule 108 (statement -> arrow_function .)


state 95

    (109) statement -> async_function .

    RBRACE          reduce using rule 109 (statement -> async_function .)
    RETURN          reduce using rule 109 (statement -> async_function .)
    LBRACE          reduce using rule 109 (statement -> async_function .)
    BREAK           reduce using rule 109 (statement -> async_function .)
    CONTINUE        reduce using rule 109 (statement -> async_function .)
    LET             reduce using rule 109 (statement -> async_function .)
    VAR             reduce using rule 109 (statement -> async_function .)
    CONST           reduce using rule 109 (statement -> async_function .)
    FUNCTION        reduce using rule 109 (statement -> async_function .)
    ASYNC           reduce using rule 109 (statement -> async_function .)
    CONSOLE         reduce using rule 109 (statement -> async_function .)
    LBRACKET        reduce using rule 109 (statement -> async_function .)
    PROMPT          reduce using rule 109 (statement -> async_function .)
    NOT             reduce using rule 109 (statement -> async_function .)
    LPAREN          reduce using rule 109 (statement -> async_function .)
    IDENTIFIER      reduce using rule 109 (statement -> async_function .)
    NUMBER          reduce using rule 109 (statement -> async_function .)
    FLOAT           reduce using rule 109 (statement -> async_function .)
    STRING          reduce using rule 109 (statement -> async_function .)
    TRUE            reduce using rule 109 (statement -> async_function .)
    FALSE           reduce using rule 109 (statement -> async_function .)
    PLUSPLUS        reduce using rule 109 (statement -> async_function .)
    MINUSMINUS      reduce using rule 109 (statement -> async_function .)
    IF              reduce using rule 109 (statement -> async_function .)
    SWITCH          reduce using rule 109 (statement -> async_function .)
    WHILE           reduce using rule 109 (statement -> async_function .)
    FOR             reduce using rule 109 (statement -> async_function .)
    CLASS           reduce using rule 109 (statement -> async_function .)
    ELSE            reduce using rule 109 (statement -> async_function .)
    ENUM            reduce using rule 109 (statement -> async_function .)
    INTERFACE       reduce using rule 109 (statement -> async_function .)
    $end            reduce using rule 109 (statement -> async_function .)
    CASE            reduce using rule 109 (statement -> async_function .)
    DEFAULT         reduce using rule 109 (statement -> async_function .)


state 96

    (110) statement -> consolelog .

    RBRACE          reduce using rule 110 (statement -> consolelog .)
    RETURN          reduce using rule 110 (statement -> consolelog .)
    LBRACE          reduce using rule 110 (statement -> consolelog .)
    BREAK           reduce using rule 110 (statement -> consolelog .)
    CONTINUE        reduce using rule 110 (statement -> consolelog .)
    LET             reduce using rule 110 (statement -> consolelog .)
    VAR             reduce using rule 110 (statement -> consolelog .)
    CONST           reduce using rule 110 (statement -> consolelog .)
    FUNCTION        reduce using rule 110 (statement -> consolelog .)
    ASYNC           reduce using rule 110 (statement -> consolelog .)
    CONSOLE         reduce using rule 110 (statement -> consolelog .)
    LBRACKET        reduce using rule 110 (statement -> consolelog .)
    PROMPT          reduce using rule 110 (statement -> consolelog .)
    NOT             reduce using rule 110 (statement -> consolelog .)
    LPAREN          reduce using rule 110 (statement -> consolelog .)
    IDENTIFIER      reduce using rule 110 (statement -> consolelog .)
    NUMBER          reduce using rule 110 (statement -> consolelog .)
    FLOAT           reduce using rule 110 (statement -> consolelog .)
    STRING          reduce using rule 110 (statement -> consolelog .)
    TRUE            reduce using rule 110 (statement -> consolelog .)
    FALSE           reduce using rule 110 (statement -> consolelog .)
    PLUSPLUS        reduce using rule 110 (statement -> consolelog .)
    MINUSMINUS      reduce using rule 110 (statement -> consolelog .)
    IF              reduce using rule 110 (statement -> consolelog .)
    SWITCH          reduce using rule 110 (statement -> consolelog .)
    WHILE           reduce using rule 110 (statement -> consolelog .)
    FOR             reduce using rule 110 (statement -> consolelog .)
    CLASS           reduce using rule 110 (statement -> consolelog .)
    ELSE            reduce using rule 110 (statement -> consolelog .)
    ENUM            reduce using rule 110 (statement -> consolelog .)
    INTERFACE       reduce using rule 110 (statement -> consolelog .)
    $end            reduce using rule 110 (statement -> consolelog .)
    CASE            reduce using rule 110 (statement -> consolelog .)
    DEFAULT         reduce using rule 110 (statement -> consolelog .)


state 97

    (112) statement -> controlEstructure .

    RBRACE          reduce using rule 112 (statement -> controlEstructure .)
    RETURN          reduce using rule 112 (statement -> controlEstructure .)
    LBRACE          reduce using rule 112 (statement -> controlEstructure .)
    BREAK           reduce using rule 112 (statement -> controlEstructure .)
    CONTINUE        reduce using rule 112 (statement -> controlEstructure .)
    LET             reduce using rule 112 (statement -> controlEstructure .)
    VAR             reduce using rule 112 (statement -> controlEstructure .)
    CONST           reduce using rule 112 (statement -> controlEstructure .)
    FUNCTION        reduce using rule 112 (statement -> controlEstructure .)
    ASYNC           reduce using rule 112 (statement -> controlEstructure .)
    CONSOLE         reduce using rule 112 (statement -> controlEstructure .)
    LBRACKET        reduce using rule 112 (statement -> controlEstructure .)
    PROMPT          reduce using rule 112 (statement -> controlEstructure .)
    NOT             reduce using rule 112 (statement -> controlEstructure .)
    LPAREN          reduce using rule 112 (statement -> controlEstructure .)
    IDENTIFIER      reduce using rule 112 (statement -> controlEstructure .)
    NUMBER          reduce using rule 112 (statement -> controlEstructure .)
    FLOAT           reduce using rule 112 (statement -> controlEstructure .)
    STRING          reduce using rule 112 (statement -> controlEstructure .)
    TRUE            reduce using rule 112 (statement -> controlEstructure .)
    FALSE           reduce using rule 112 (statement -> controlEstructure .)
    PLUSPLUS        reduce using rule 112 (statement -> controlEstructure .)
    MINUSMINUS      reduce using rule 112 (statement -> controlEstructure .)
    IF              reduce using rule 112 (statement -> controlEstructure .)
    SWITCH          reduce using rule 112 (statement -> controlEstructure .)
    WHILE           reduce using rule 112 (statement -> controlEstructure .)
    FOR             reduce using rule 112 (statement -> controlEstructure .)
    CLASS           reduce using rule 112 (statement -> controlEstructure .)
    ELSE            reduce using rule 112 (statement -> controlEstructure .)
    ENUM            reduce using rule 112 (statement -> controlEstructure .)
    INTERFACE       reduce using rule 112 (statement -> controlEstructure .)
    $end            reduce using rule 112 (statement -> controlEstructure .)
    CASE            reduce using rule 112 (statement -> controlEstructure .)
    DEFAULT         reduce using rule 112 (statement -> controlEstructure .)


state 98

    (115) statement -> class_definition .

    RBRACE          reduce using rule 115 (statement -> class_definition .)
    RETURN          reduce using rule 115 (statement -> class_definition .)
    LBRACE          reduce using rule 115 (statement -> class_definition .)
    BREAK           reduce using rule 115 (statement -> class_definition .)
    CONTINUE        reduce using rule 115 (statement -> class_definition .)
    LET             reduce using rule 115 (statement -> class_definition .)
    VAR             reduce using rule 115 (statement -> class_definition .)
    CONST           reduce using rule 115 (statement -> class_definition .)
    FUNCTION        reduce using rule 115 (statement -> class_definition .)
    ASYNC           reduce using rule 115 (statement -> class_definition .)
    CONSOLE         reduce using rule 115 (statement -> class_definition .)
    LBRACKET        reduce using rule 115 (statement -> class_definition .)
    PROMPT          reduce using rule 115 (statement -> class_definition .)
    NOT             reduce using rule 115 (statement -> class_definition .)
    LPAREN          reduce using rule 115 (statement -> class_definition .)
    IDENTIFIER      reduce using rule 115 (statement -> class_definition .)
    NUMBER          reduce using rule 115 (statement -> class_definition .)
    FLOAT           reduce using rule 115 (statement -> class_definition .)
    STRING          reduce using rule 115 (statement -> class_definition .)
    TRUE            reduce using rule 115 (statement -> class_definition .)
    FALSE           reduce using rule 115 (statement -> class_definition .)
    PLUSPLUS        reduce using rule 115 (statement -> class_definition .)
    MINUSMINUS      reduce using rule 115 (statement -> class_definition .)
    IF              reduce using rule 115 (statement -> class_definition .)
    SWITCH          reduce using rule 115 (statement -> class_definition .)
    WHILE           reduce using rule 115 (statement -> class_definition .)
    FOR             reduce using rule 115 (statement -> class_definition .)
    CLASS           reduce using rule 115 (statement -> class_definition .)
    ELSE            reduce using rule 115 (statement -> class_definition .)
    ENUM            reduce using rule 115 (statement -> class_definition .)
    INTERFACE       reduce using rule 115 (statement -> class_definition .)
    $end            reduce using rule 115 (statement -> class_definition .)
    CASE            reduce using rule 115 (statement -> class_definition .)
    DEFAULT         reduce using rule 115 (statement -> class_definition .)


state 99

    (154) object_property -> IDENTIFIER . COLON expression
    (86) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (90) expression -> IDENTIFIER .

    COLON           shift and go to state 160
    LPAREN          shift and go to state 77
    SEMICOLON       reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 90 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 90 (expression -> IDENTIFIER .)
    DIV             reduce using rule 90 (expression -> IDENTIFIER .)
    MOD             reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 90 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    POT             reduce using rule 90 (expression -> IDENTIFIER .)
    AND             reduce using rule 90 (expression -> IDENTIFIER .)
    OR              reduce using rule 90 (expression -> IDENTIFIER .)
    EQ              reduce using rule 90 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 90 (expression -> IDENTIFIER .)
    LT              reduce using rule 90 (expression -> IDENTIFIER .)
    GT              reduce using rule 90 (expression -> IDENTIFIER .)
    LE              reduce using rule 90 (expression -> IDENTIFIER .)
    GE              reduce using rule 90 (expression -> IDENTIFIER .)
    DOT             reduce using rule 90 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 90 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 90 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 90 (expression -> IDENTIFIER .)


state 100

    (121) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON
    (144) arrow_function -> CONST . IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    IDENTIFIER      shift and go to state 161


state 101

    (144) arrow_function -> CONST IDENTIFIER . EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (121) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 162
    COLON           shift and go to state 163


state 102

    (142) async_function -> ASYNC FUNCTION . IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    IDENTIFIER      shift and go to state 164


state 103

    (139) enum_definition -> ENUM IDENTIFIER . LBRACE enum_members RBRACE

    LBRACE          shift and go to state 165


state 104

    (98) controlEstructure -> IF LPAREN . expression RPAREN statement
    (99) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE statement
    (100) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 166

state 105

    (131) controlEstructure -> SWITCH LPAREN . expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 167

state 106

    (143) controlEstructure -> WHILE LPAREN . expression RPAREN push_loop statement pop_loop
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 168

state 107

    (123) class_definition -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 169


state 108

    (46) statement -> RETURN expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 170
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 109

    (114) statement -> RETURN SEMICOLON .

    LET             reduce using rule 114 (statement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 114 (statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 114 (statement -> RETURN SEMICOLON .)
    ASYNC           reduce using rule 114 (statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 114 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 114 (statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 114 (statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 114 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 114 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 114 (statement -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 114 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 114 (statement -> RETURN SEMICOLON .)
    LBRACKET        reduce using rule 114 (statement -> RETURN SEMICOLON .)
    PROMPT          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 114 (statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 114 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 114 (statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 114 (statement -> RETURN SEMICOLON .)
    PLUSPLUS        reduce using rule 114 (statement -> RETURN SEMICOLON .)
    MINUSMINUS      reduce using rule 114 (statement -> RETURN SEMICOLON .)
    CONSOLE         reduce using rule 114 (statement -> RETURN SEMICOLON .)
    VAR             reduce using rule 114 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 114 (statement -> RETURN SEMICOLON .)
    $end            reduce using rule 114 (statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 114 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 114 (statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 114 (statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 114 (statement -> RETURN SEMICOLON .)


state 110

    (137) statement -> BREAK SEMICOLON .

    LET             reduce using rule 137 (statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 137 (statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 137 (statement -> BREAK SEMICOLON .)
    ASYNC           reduce using rule 137 (statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 137 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 137 (statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 137 (statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 137 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 137 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 137 (statement -> BREAK SEMICOLON .)
    INTERFACE       reduce using rule 137 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 137 (statement -> BREAK SEMICOLON .)
    LBRACKET        reduce using rule 137 (statement -> BREAK SEMICOLON .)
    PROMPT          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 137 (statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 137 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 137 (statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 137 (statement -> BREAK SEMICOLON .)
    PLUSPLUS        reduce using rule 137 (statement -> BREAK SEMICOLON .)
    MINUSMINUS      reduce using rule 137 (statement -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 137 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 137 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 137 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 137 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 137 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 137 (statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 137 (statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 137 (statement -> BREAK SEMICOLON .)


state 111

    (138) statement -> CONTINUE SEMICOLON .

    LET             reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    ASYNC           reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    LBRACKET        reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    PROMPT          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    PLUSPLUS        reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    MINUSMINUS      reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    CONSOLE         reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 138 (statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 138 (statement -> CONTINUE SEMICOLON .)


state 112

    (145) interface -> INTERFACE IDENTIFIER . LBRACE interface_body RBRACE

    LBRACE          shift and go to state 171


state 113

    (81) expression -> PROMPT LPAREN . STRING RPAREN

    STRING          shift and go to state 172


state 114

    (82) expression -> NOT expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 82 (expression -> NOT expression .)
    COMMA           reduce using rule 82 (expression -> NOT expression .)
    RPAREN          reduce using rule 82 (expression -> NOT expression .)
    RBRACKET        reduce using rule 82 (expression -> NOT expression .)
    RBRACE          reduce using rule 82 (expression -> NOT expression .)
    COLON           reduce using rule 82 (expression -> NOT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 82 (expression -> NOT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 82 (expression -> NOT expression .) ]
  ! POT             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 82 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 82 (expression -> NOT expression .) ]
  ! NEQ             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! STRICT_EQ       [ reduce using rule 82 (expression -> NOT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 82 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 82 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 82 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 82 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 82 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! LBRACKET        [ reduce using rule 82 (expression -> NOT expression .) ]
  ! PLUSPLUS        [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MINUSMINUS      [ reduce using rule 82 (expression -> NOT expression .) ]


state 115

    (95) expression -> PLUSPLUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 95 (expression -> PLUSPLUS expression .)
    COMMA           reduce using rule 95 (expression -> PLUSPLUS expression .)
    RPAREN          reduce using rule 95 (expression -> PLUSPLUS expression .)
    RBRACKET        reduce using rule 95 (expression -> PLUSPLUS expression .)
    RBRACE          reduce using rule 95 (expression -> PLUSPLUS expression .)
    COLON           reduce using rule 95 (expression -> PLUSPLUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MINUS           [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! TIMES           [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! DIV             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MOD             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! POT             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! AND             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! OR              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! EQ              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! NEQ             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! LT              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! GT              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! LE              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! GE              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! DOT             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! LBRACKET        [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]


state 116

    (96) expression -> MINUSMINUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 96 (expression -> MINUSMINUS expression .)
    COMMA           reduce using rule 96 (expression -> MINUSMINUS expression .)
    RPAREN          reduce using rule 96 (expression -> MINUSMINUS expression .)
    RBRACKET        reduce using rule 96 (expression -> MINUSMINUS expression .)
    RBRACE          reduce using rule 96 (expression -> MINUSMINUS expression .)
    COLON           reduce using rule 96 (expression -> MINUSMINUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MINUS           [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! TIMES           [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! DIV             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MOD             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! POT             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! AND             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! OR              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! EQ              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! NEQ             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! LT              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! GT              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! LE              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! GE              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! DOT             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! LBRACKET        [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]


state 117

    (97) consolelog -> CONSOLE DOT . LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON

    LOG             shift and go to state 173


state 118

    (21) varAssignment -> VAR IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> VAR IDENTIFIER . EQUAL expression SEMICOLON

    COLON           shift and go to state 174
    EQUAL           shift and go to state 175


state 119

    (32) forEstructure -> FOR LPAREN . for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> FOR LPAREN . CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (34) for_init -> . LET IDENTIFIER EQUAL expression
    (35) for_init -> . LET IDENTIFIER COLON type EQUAL expression
    (36) for_init -> . IDENTIFIER EQUAL expression
    (37) for_init -> . expression
    (38) for_init -> . empty
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (120) empty -> .

    CONST           shift and go to state 178
    LET             shift and go to state 180
    IDENTIFIER      shift and go to state 179
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80
    SEMICOLON       reduce using rule 120 (empty -> .)

    for_init                       shift and go to state 176
    expression                     shift and go to state 177
    empty                          shift and go to state 181

state 120

    (60) expression -> expression PLUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 60 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 60 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 60 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 60 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 60 (expression -> expression PLUS expression .)
    COLON           reduce using rule 60 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! POT             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! DOT             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! LBRACKET        [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 60 (expression -> expression PLUS expression .) ]


state 121

    (61) expression -> expression MINUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 61 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 61 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 61 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 61 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 61 (expression -> expression MINUS expression .)
    COLON           reduce using rule 61 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! POT             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! NEQ             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! DOT             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! LBRACKET        [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! PLUSPLUS        [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 61 (expression -> expression MINUS expression .) ]


state 122

    (62) expression -> expression TIMES expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 62 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 62 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 62 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 62 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 62 (expression -> expression TIMES expression .)
    COLON           reduce using rule 62 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! DIV             [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! POT             [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! NEQ             [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! STRICT_EQ       [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! STRICT_NEQ      [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! DOT             [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! LBRACKET        [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! PLUSPLUS        [ reduce using rule 62 (expression -> expression TIMES expression .) ]
  ! MINUSMINUS      [ reduce using rule 62 (expression -> expression TIMES expression .) ]


state 123

    (63) expression -> expression DIV expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 63 (expression -> expression DIV expression .)
    COMMA           reduce using rule 63 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 63 (expression -> expression DIV expression .)
    RBRACKET        reduce using rule 63 (expression -> expression DIV expression .)
    RBRACE          reduce using rule 63 (expression -> expression DIV expression .)
    COLON           reduce using rule 63 (expression -> expression DIV expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! POT             [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! EQ              [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! NEQ             [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! STRICT_EQ       [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! STRICT_NEQ      [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! DOT             [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! LBRACKET        [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! PLUSPLUS        [ reduce using rule 63 (expression -> expression DIV expression .) ]
  ! MINUSMINUS      [ reduce using rule 63 (expression -> expression DIV expression .) ]


state 124

    (64) expression -> expression MOD expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 64 (expression -> expression MOD expression .)
    COMMA           reduce using rule 64 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 64 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 64 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 64 (expression -> expression MOD expression .)
    COLON           reduce using rule 64 (expression -> expression MOD expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! DIV             [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! POT             [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! EQ              [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! NEQ             [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! STRICT_EQ       [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! STRICT_NEQ      [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! DOT             [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! LBRACKET        [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! PLUSPLUS        [ reduce using rule 64 (expression -> expression MOD expression .) ]
  ! MINUSMINUS      [ reduce using rule 64 (expression -> expression MOD expression .) ]


state 125

    (65) expression -> expression PLUS_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .)
    COMMA           reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .)
    COLON           reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! POT             [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LT              [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! GT              [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LE              [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! GE              [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 65 (expression -> expression PLUS_ASSIGN expression .) ]


state 126

    (66) expression -> expression MINUS_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .)
    COMMA           reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .)
    COLON           reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! POT             [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LE              [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! GE              [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 66 (expression -> expression MINUS_ASSIGN expression .) ]


state 127

    (67) expression -> expression MULT_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 67 (expression -> expression MULT_ASSIGN expression .)
    COMMA           reduce using rule 67 (expression -> expression MULT_ASSIGN expression .)
    RPAREN          reduce using rule 67 (expression -> expression MULT_ASSIGN expression .)
    RBRACKET        reduce using rule 67 (expression -> expression MULT_ASSIGN expression .)
    RBRACE          reduce using rule 67 (expression -> expression MULT_ASSIGN expression .)
    COLON           reduce using rule 67 (expression -> expression MULT_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! POT             [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! LE              [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! GE              [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 67 (expression -> expression MULT_ASSIGN expression .) ]


state 128

    (68) expression -> expression DIV_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 68 (expression -> expression DIV_ASSIGN expression .)
    COMMA           reduce using rule 68 (expression -> expression DIV_ASSIGN expression .)
    RPAREN          reduce using rule 68 (expression -> expression DIV_ASSIGN expression .)
    RBRACKET        reduce using rule 68 (expression -> expression DIV_ASSIGN expression .)
    RBRACE          reduce using rule 68 (expression -> expression DIV_ASSIGN expression .)
    COLON           reduce using rule 68 (expression -> expression DIV_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! POT             [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! OR              [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! LT              [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! GT              [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! LE              [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! GE              [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 68 (expression -> expression DIV_ASSIGN expression .) ]


state 129

    (69) expression -> expression MOD_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 69 (expression -> expression MOD_ASSIGN expression .)
    COMMA           reduce using rule 69 (expression -> expression MOD_ASSIGN expression .)
    RPAREN          reduce using rule 69 (expression -> expression MOD_ASSIGN expression .)
    RBRACKET        reduce using rule 69 (expression -> expression MOD_ASSIGN expression .)
    RBRACE          reduce using rule 69 (expression -> expression MOD_ASSIGN expression .)
    COLON           reduce using rule 69 (expression -> expression MOD_ASSIGN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! DIV             [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! POT             [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! AND             [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! OR              [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! EQ              [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! NEQ             [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! STRICT_EQ       [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! STRICT_NEQ      [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! LT              [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! GT              [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! LE              [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! GE              [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! DOT             [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! LBRACKET        [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! PLUSPLUS        [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]
  ! MINUSMINUS      [ reduce using rule 69 (expression -> expression MOD_ASSIGN expression .) ]


state 130

    (70) expression -> expression POT expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 70 (expression -> expression POT expression .)
    COMMA           reduce using rule 70 (expression -> expression POT expression .)
    RPAREN          reduce using rule 70 (expression -> expression POT expression .)
    RBRACKET        reduce using rule 70 (expression -> expression POT expression .)
    RBRACE          reduce using rule 70 (expression -> expression POT expression .)
    COLON           reduce using rule 70 (expression -> expression POT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! TIMES           [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! DIV             [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! MOD             [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! POT             [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! AND             [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! OR              [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! EQ              [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! NEQ             [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! STRICT_EQ       [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! LT              [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! GT              [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! LE              [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! GE              [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! DOT             [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! LBRACKET        [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! PLUSPLUS        [ reduce using rule 70 (expression -> expression POT expression .) ]
  ! MINUSMINUS      [ reduce using rule 70 (expression -> expression POT expression .) ]


state 131

    (71) expression -> expression AND expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 71 (expression -> expression AND expression .)
    COMMA           reduce using rule 71 (expression -> expression AND expression .)
    RPAREN          reduce using rule 71 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 71 (expression -> expression AND expression .)
    RBRACE          reduce using rule 71 (expression -> expression AND expression .)
    COLON           reduce using rule 71 (expression -> expression AND expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! POT             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! STRICT_EQ       [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! STRICT_NEQ      [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! DOT             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! LBRACKET        [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! PLUSPLUS        [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MINUSMINUS      [ reduce using rule 71 (expression -> expression AND expression .) ]


state 132

    (72) expression -> expression OR expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 72 (expression -> expression OR expression .)
    COMMA           reduce using rule 72 (expression -> expression OR expression .)
    RPAREN          reduce using rule 72 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 72 (expression -> expression OR expression .)
    RBRACE          reduce using rule 72 (expression -> expression OR expression .)
    COLON           reduce using rule 72 (expression -> expression OR expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! POT             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! STRICT_EQ       [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! STRICT_NEQ      [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! DOT             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! LBRACKET        [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! PLUSPLUS        [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MINUSMINUS      [ reduce using rule 72 (expression -> expression OR expression .) ]


state 133

    (73) expression -> expression EQ expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 73 (expression -> expression EQ expression .)
    COMMA           reduce using rule 73 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 73 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 73 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 73 (expression -> expression EQ expression .)
    COLON           reduce using rule 73 (expression -> expression EQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! POT             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! DOT             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! LBRACKET        [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 73 (expression -> expression EQ expression .) ]


state 134

    (74) expression -> expression NEQ expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 74 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 74 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 74 (expression -> expression NEQ expression .)
    RBRACKET        reduce using rule 74 (expression -> expression NEQ expression .)
    RBRACE          reduce using rule 74 (expression -> expression NEQ expression .)
    COLON           reduce using rule 74 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! POT             [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! DOT             [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! LBRACKET        [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 74 (expression -> expression NEQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 74 (expression -> expression NEQ expression .) ]


state 135

    (75) expression -> expression STRICT_EQ expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 75 (expression -> expression STRICT_EQ expression .)
    COMMA           reduce using rule 75 (expression -> expression STRICT_EQ expression .)
    RPAREN          reduce using rule 75 (expression -> expression STRICT_EQ expression .)
    RBRACKET        reduce using rule 75 (expression -> expression STRICT_EQ expression .)
    RBRACE          reduce using rule 75 (expression -> expression STRICT_EQ expression .)
    COLON           reduce using rule 75 (expression -> expression STRICT_EQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! TIMES           [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! DIV             [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! MOD             [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! POT             [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! AND             [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! OR              [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! EQ              [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! NEQ             [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! LT              [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! GT              [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! LE              [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! GE              [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! DOT             [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! LBRACKET        [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 75 (expression -> expression STRICT_EQ expression .) ]


state 136

    (76) expression -> expression STRICT_NEQ expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 76 (expression -> expression STRICT_NEQ expression .)
    COMMA           reduce using rule 76 (expression -> expression STRICT_NEQ expression .)
    RPAREN          reduce using rule 76 (expression -> expression STRICT_NEQ expression .)
    RBRACKET        reduce using rule 76 (expression -> expression STRICT_NEQ expression .)
    RBRACE          reduce using rule 76 (expression -> expression STRICT_NEQ expression .)
    COLON           reduce using rule 76 (expression -> expression STRICT_NEQ expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! DIV             [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! MOD             [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! POT             [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! AND             [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! OR              [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! EQ              [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! NEQ             [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! STRICT_EQ       [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! STRICT_NEQ      [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! LT              [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! GT              [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! LE              [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! GE              [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! DOT             [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! LBRACKET        [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! PLUSPLUS        [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]
  ! MINUSMINUS      [ reduce using rule 76 (expression -> expression STRICT_NEQ expression .) ]


state 137

    (77) expression -> expression LT expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 77 (expression -> expression LT expression .)
    COMMA           reduce using rule 77 (expression -> expression LT expression .)
    RPAREN          reduce using rule 77 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 77 (expression -> expression LT expression .)
    RBRACE          reduce using rule 77 (expression -> expression LT expression .)
    COLON           reduce using rule 77 (expression -> expression LT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! POT             [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! STRICT_EQ       [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! DOT             [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! LBRACKET        [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! PLUSPLUS        [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MINUSMINUS      [ reduce using rule 77 (expression -> expression LT expression .) ]


state 138

    (78) expression -> expression GT expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 78 (expression -> expression GT expression .)
    COMMA           reduce using rule 78 (expression -> expression GT expression .)
    RPAREN          reduce using rule 78 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 78 (expression -> expression GT expression .)
    RBRACE          reduce using rule 78 (expression -> expression GT expression .)
    COLON           reduce using rule 78 (expression -> expression GT expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! POT             [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! STRICT_EQ       [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! STRICT_NEQ      [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! DOT             [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! LBRACKET        [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! PLUSPLUS        [ reduce using rule 78 (expression -> expression GT expression .) ]
  ! MINUSMINUS      [ reduce using rule 78 (expression -> expression GT expression .) ]


state 139

    (79) expression -> expression LE expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 79 (expression -> expression LE expression .)
    COMMA           reduce using rule 79 (expression -> expression LE expression .)
    RPAREN          reduce using rule 79 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 79 (expression -> expression LE expression .)
    RBRACE          reduce using rule 79 (expression -> expression LE expression .)
    COLON           reduce using rule 79 (expression -> expression LE expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! POT             [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! NEQ             [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! STRICT_EQ       [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! STRICT_NEQ      [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! DOT             [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! LBRACKET        [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! PLUSPLUS        [ reduce using rule 79 (expression -> expression LE expression .) ]
  ! MINUSMINUS      [ reduce using rule 79 (expression -> expression LE expression .) ]


state 140

    (80) expression -> expression GE expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 80 (expression -> expression GE expression .)
    COMMA           reduce using rule 80 (expression -> expression GE expression .)
    RPAREN          reduce using rule 80 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 80 (expression -> expression GE expression .)
    RBRACE          reduce using rule 80 (expression -> expression GE expression .)
    COLON           reduce using rule 80 (expression -> expression GE expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUS            [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! POT             [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! NEQ             [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! STRICT_EQ       [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! STRICT_NEQ      [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! DOT             [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! LBRACKET        [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! PLUSPLUS        [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MINUSMINUS      [ reduce using rule 80 (expression -> expression GE expression .) ]


state 141

    (84) expression -> expression DOT IDENTIFIER .

    SEMICOLON       reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    DIV             reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    POT             reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    STRICT_EQ       reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    STRICT_NEQ      reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    DOT             reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    PLUSPLUS        reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    MINUSMINUS      reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 84 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 84 (expression -> expression DOT IDENTIFIER .)


state 142

    (85) expression -> expression LBRACKET expression . RBRACKET
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RBRACKET        shift and go to state 182
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 143

    (18) letAssignment -> LET IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON . type SEMICOLON
    (23) declaracion -> LET IDENTIFIER COLON . type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 184

state 144

    (19) letAssignment -> LET IDENTIFIER EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 190

state 145

    (17) assignment -> IDENTIFIER EQUAL expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 191
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 146

    (86) expression -> IDENTIFIER LPAREN lista_expresiones_opt . RPAREN

    RPAREN          shift and go to state 192


state 147

    (24) lista_expresiones_opt -> lista_expresiones .

    RPAREN          reduce using rule 24 (lista_expresiones_opt -> lista_expresiones .)
    RBRACKET        reduce using rule 24 (lista_expresiones_opt -> lista_expresiones .)


state 148

    (25) lista_expresiones_opt -> empty .

    RPAREN          reduce using rule 25 (lista_expresiones_opt -> empty .)
    RBRACKET        reduce using rule 25 (lista_expresiones_opt -> empty .)


state 149

    (26) lista_expresiones -> expression .
    (27) lista_expresiones -> expression . COMMA lista_expresiones
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RPAREN          reduce using rule 26 (lista_expresiones -> expression .)
    RBRACKET        reduce using rule 26 (lista_expresiones -> expression .)
    COMMA           shift and go to state 193
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 150

    (53) expression -> LBRACKET expression COMMA . expression RBRACKET
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 194

state 151

    (153) object_properties -> empty .

    RBRACE          reduce using rule 153 (object_properties -> empty .)


state 152

    (154) object_property -> IDENTIFIER . COLON expression

    COLON           shift and go to state 160


state 153

    (45) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN COLON type LBRACE body_function RBRACE
    (47) parameters -> . IDENTIFIER COLON type
    (48) parameters -> . IDENTIFIER COLON type COMMA parameters
    (49) parameters -> . empty
    (120) empty -> .

    IDENTIFIER      shift and go to state 195
    RPAREN          reduce using rule 120 (empty -> .)

    parameters                     shift and go to state 196
    empty                          shift and go to state 197

state 154

    (83) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MULT_ASSIGN     reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    POT             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    STRICT_EQ       reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    STRICT_NEQ      reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 83 (expression -> LPAREN expression RPAREN .)


state 155

    (102) statement -> LBRACE instruction_list RBRACE .

    LET             reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    FUNCTION        reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    CONST           reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    ASYNC           reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    ENUM            reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    IF              reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    SWITCH          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    WHILE           reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    CLASS           reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    RETURN          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    LBRACE          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    BREAK           reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    CONTINUE        reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    INTERFACE       reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    IDENTIFIER      reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    LBRACKET        reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    PROMPT          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    NOT             reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    LPAREN          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    NUMBER          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    FLOAT           reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    STRING          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    TRUE            reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    FALSE           reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    PLUSPLUS        reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    MINUSMINUS      reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    CONSOLE         reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    VAR             reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    FOR             reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    $end            reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    RBRACE          reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    ELSE            reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    CASE            reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)
    DEFAULT         reduce using rule 102 (statement -> LBRACE instruction_list RBRACE .)


state 156

    (117) instruction_list -> instruction_list statement .

    RBRACE          reduce using rule 117 (instruction_list -> instruction_list statement .)
    RETURN          reduce using rule 117 (instruction_list -> instruction_list statement .)
    LBRACE          reduce using rule 117 (instruction_list -> instruction_list statement .)
    BREAK           reduce using rule 117 (instruction_list -> instruction_list statement .)
    CONTINUE        reduce using rule 117 (instruction_list -> instruction_list statement .)
    LET             reduce using rule 117 (instruction_list -> instruction_list statement .)
    VAR             reduce using rule 117 (instruction_list -> instruction_list statement .)
    CONST           reduce using rule 117 (instruction_list -> instruction_list statement .)
    FUNCTION        reduce using rule 117 (instruction_list -> instruction_list statement .)
    ASYNC           reduce using rule 117 (instruction_list -> instruction_list statement .)
    CONSOLE         reduce using rule 117 (instruction_list -> instruction_list statement .)
    LBRACKET        reduce using rule 117 (instruction_list -> instruction_list statement .)
    PROMPT          reduce using rule 117 (instruction_list -> instruction_list statement .)
    NOT             reduce using rule 117 (instruction_list -> instruction_list statement .)
    LPAREN          reduce using rule 117 (instruction_list -> instruction_list statement .)
    IDENTIFIER      reduce using rule 117 (instruction_list -> instruction_list statement .)
    NUMBER          reduce using rule 117 (instruction_list -> instruction_list statement .)
    FLOAT           reduce using rule 117 (instruction_list -> instruction_list statement .)
    STRING          reduce using rule 117 (instruction_list -> instruction_list statement .)
    TRUE            reduce using rule 117 (instruction_list -> instruction_list statement .)
    FALSE           reduce using rule 117 (instruction_list -> instruction_list statement .)
    PLUSPLUS        reduce using rule 117 (instruction_list -> instruction_list statement .)
    MINUSMINUS      reduce using rule 117 (instruction_list -> instruction_list statement .)
    IF              reduce using rule 117 (instruction_list -> instruction_list statement .)
    SWITCH          reduce using rule 117 (instruction_list -> instruction_list statement .)
    WHILE           reduce using rule 117 (instruction_list -> instruction_list statement .)
    FOR             reduce using rule 117 (instruction_list -> instruction_list statement .)
    CLASS           reduce using rule 117 (instruction_list -> instruction_list statement .)
    CASE            reduce using rule 117 (instruction_list -> instruction_list statement .)
    DEFAULT         reduce using rule 117 (instruction_list -> instruction_list statement .)


state 157

    (150) expression -> LBRACE object_properties RBRACE .

    SEMICOLON       reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    PLUS            reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    MINUS           reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    TIMES           reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    DIV             reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    MOD             reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    PLUS_ASSIGN     reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    MINUS_ASSIGN    reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    MULT_ASSIGN     reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    DIV_ASSIGN      reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    MOD_ASSIGN      reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    POT             reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    AND             reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    OR              reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    EQ              reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    NEQ             reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    STRICT_EQ       reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    STRICT_NEQ      reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    LT              reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    GT              reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    LE              reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    GE              reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    DOT             reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    LBRACKET        reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    PLUSPLUS        reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    MINUSMINUS      reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    COMMA           reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    RPAREN          reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    RBRACKET        reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    RBRACE          reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)
    COLON           reduce using rule 150 (expression -> LBRACE object_properties RBRACE .)


state 158

    (152) object_properties -> object_property COMMA . object_properties
    (151) object_properties -> . object_property
    (152) object_properties -> . object_property COMMA object_properties
    (153) object_properties -> . empty
    (154) object_property -> . IDENTIFIER COLON expression
    (120) empty -> .

    IDENTIFIER      shift and go to state 152
    RBRACE          reduce using rule 120 (empty -> .)

    object_property                shift and go to state 88
    object_properties              shift and go to state 198
    empty                          shift and go to state 151

state 159

    (111) statement -> expression SEMICOLON .

    RBRACE          reduce using rule 111 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 111 (statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 111 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 111 (statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 111 (statement -> expression SEMICOLON .)
    LET             reduce using rule 111 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 111 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 111 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 111 (statement -> expression SEMICOLON .)
    ASYNC           reduce using rule 111 (statement -> expression SEMICOLON .)
    CONSOLE         reduce using rule 111 (statement -> expression SEMICOLON .)
    LBRACKET        reduce using rule 111 (statement -> expression SEMICOLON .)
    PROMPT          reduce using rule 111 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 111 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 111 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 111 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 111 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 111 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 111 (statement -> expression SEMICOLON .)
    TRUE            reduce using rule 111 (statement -> expression SEMICOLON .)
    FALSE           reduce using rule 111 (statement -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 111 (statement -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 111 (statement -> expression SEMICOLON .)
    IF              reduce using rule 111 (statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 111 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 111 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 111 (statement -> expression SEMICOLON .)
    CLASS           reduce using rule 111 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 111 (statement -> expression SEMICOLON .)
    ENUM            reduce using rule 111 (statement -> expression SEMICOLON .)
    INTERFACE       reduce using rule 111 (statement -> expression SEMICOLON .)
    $end            reduce using rule 111 (statement -> expression SEMICOLON .)
    CASE            reduce using rule 111 (statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 111 (statement -> expression SEMICOLON .)


state 160

    (154) object_property -> IDENTIFIER COLON . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 199

state 161

    (121) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON
    (144) arrow_function -> CONST IDENTIFIER . EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    COLON           shift and go to state 163
    EQUAL           shift and go to state 200


state 162

    (144) arrow_function -> CONST IDENTIFIER EQUAL . LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (122) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LPAREN          shift and go to state 201
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 202

state 163

    (121) constAssignment -> CONST IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 203

state 164

    (142) async_function -> ASYNC FUNCTION IDENTIFIER . LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE

    LPAREN          shift and go to state 204


state 165

    (139) enum_definition -> ENUM IDENTIFIER LBRACE . enum_members RBRACE
    (140) enum_members -> . IDENTIFIER
    (141) enum_members -> . IDENTIFIER COMMA enum_members

    IDENTIFIER      shift and go to state 205

    enum_members                   shift and go to state 206

state 166

    (98) controlEstructure -> IF LPAREN expression . RPAREN statement
    (99) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE statement
    (100) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 207
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 167

    (131) controlEstructure -> SWITCH LPAREN expression . RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 208
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 168

    (143) controlEstructure -> WHILE LPAREN expression . RPAREN push_loop statement pop_loop
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 209
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 169

    (123) class_definition -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (124) class_body -> . class_body class_element
    (125) class_body -> . class_element
    (126) class_body -> . empty
    (127) class_element -> . function
    (128) class_element -> . letAssignment
    (129) class_element -> . varAssignment
    (130) class_element -> . constAssignment
    (120) empty -> .
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    RBRACE          reduce using rule 120 (empty -> .)
    FUNCTION        shift and go to state 20
    LET             shift and go to state 217
    VAR             shift and go to state 46
    CONST           shift and go to state 218

  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]

    class_body                     shift and go to state 210
    class_element                  shift and go to state 211
    empty                          shift and go to state 212
    function                       shift and go to state 213
    letAssignment                  shift and go to state 214
    varAssignment                  shift and go to state 215
    constAssignment                shift and go to state 216

state 170

    (46) statement -> RETURN expression SEMICOLON .

    LET             reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    ASYNC           reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    INTERFACE       reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    LBRACKET        reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    PROMPT          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    PLUSPLUS        reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    MINUSMINUS      reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 46 (statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 46 (statement -> RETURN expression SEMICOLON .)


state 171

    (145) interface -> INTERFACE IDENTIFIER LBRACE . interface_body RBRACE
    (146) interface_body -> . interface_body interface_property
    (147) interface_body -> . interface_property
    (148) interface_body -> . empty
    (149) interface_property -> . IDENTIFIER COLON type SEMICOLON
    (120) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 219
    RBRACE          reduce using rule 120 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]

    interface_body                 shift and go to state 220
    interface_property             shift and go to state 221
    empty                          shift and go to state 222

state 172

    (81) expression -> PROMPT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 223


state 173

    (97) consolelog -> CONSOLE DOT LOG . LPAREN lista_expresiones_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 224


state 174

    (21) varAssignment -> VAR IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 225

state 175

    (22) varAssignment -> VAR IDENTIFIER EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 226

state 176

    (32) forEstructure -> FOR LPAREN for_init . SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE

    SEMICOLON       shift and go to state 227


state 177

    (37) for_init -> expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 37 (for_init -> expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 178

    (33) forEstructure -> FOR LPAREN CONST . IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop

    IDENTIFIER      shift and go to state 228


state 179

    (36) for_init -> IDENTIFIER . EQUAL expression
    (86) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (90) expression -> IDENTIFIER .

    EQUAL           shift and go to state 229
    LPAREN          shift and go to state 77
    PLUS            reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 90 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 90 (expression -> IDENTIFIER .)
    DIV             reduce using rule 90 (expression -> IDENTIFIER .)
    MOD             reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 90 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    POT             reduce using rule 90 (expression -> IDENTIFIER .)
    AND             reduce using rule 90 (expression -> IDENTIFIER .)
    OR              reduce using rule 90 (expression -> IDENTIFIER .)
    EQ              reduce using rule 90 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 90 (expression -> IDENTIFIER .)
    LT              reduce using rule 90 (expression -> IDENTIFIER .)
    GT              reduce using rule 90 (expression -> IDENTIFIER .)
    LE              reduce using rule 90 (expression -> IDENTIFIER .)
    GE              reduce using rule 90 (expression -> IDENTIFIER .)
    DOT             reduce using rule 90 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 90 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 90 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 90 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 90 (expression -> IDENTIFIER .)


state 180

    (34) for_init -> LET . IDENTIFIER EQUAL expression
    (35) for_init -> LET . IDENTIFIER COLON type EQUAL expression

    IDENTIFIER      shift and go to state 230


state 181

    (38) for_init -> empty .

    SEMICOLON       reduce using rule 38 (for_init -> empty .)


state 182

    (85) expression -> expression LBRACKET expression RBRACKET .

    SEMICOLON       reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    MULT_ASSIGN     reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    POT             reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    STRICT_EQ       reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    STRICT_NEQ      reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 85 (expression -> expression LBRACKET expression RBRACKET .)


state 183

    (57) type -> IDENTIFIER .

    EQUAL           reduce using rule 57 (type -> IDENTIFIER .)
    SEMICOLON       reduce using rule 57 (type -> IDENTIFIER .)
    LBRACKET        reduce using rule 57 (type -> IDENTIFIER .)
    COMMA           reduce using rule 57 (type -> IDENTIFIER .)
    RPAREN          reduce using rule 57 (type -> IDENTIFIER .)
    RBRACKET        reduce using rule 57 (type -> IDENTIFIER .)
    LBRACE          reduce using rule 57 (type -> IDENTIFIER .)


state 184

    (18) letAssignment -> LET IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON type . SEMICOLON
    (23) declaracion -> LET IDENTIFIER COLON type . LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (59) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 231
    SEMICOLON       shift and go to state 232
    LBRACKET        shift and go to state 233


state 185

    (52) type -> LBRACKET . type COMMA type RBRACKET
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 234

state 186

    (54) type -> NUMBER_TYPE .

    EQUAL           reduce using rule 54 (type -> NUMBER_TYPE .)
    SEMICOLON       reduce using rule 54 (type -> NUMBER_TYPE .)
    LBRACKET        reduce using rule 54 (type -> NUMBER_TYPE .)
    COMMA           reduce using rule 54 (type -> NUMBER_TYPE .)
    RPAREN          reduce using rule 54 (type -> NUMBER_TYPE .)
    RBRACKET        reduce using rule 54 (type -> NUMBER_TYPE .)
    LBRACE          reduce using rule 54 (type -> NUMBER_TYPE .)


state 187

    (55) type -> STRING_TYPE .

    EQUAL           reduce using rule 55 (type -> STRING_TYPE .)
    SEMICOLON       reduce using rule 55 (type -> STRING_TYPE .)
    LBRACKET        reduce using rule 55 (type -> STRING_TYPE .)
    COMMA           reduce using rule 55 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 55 (type -> STRING_TYPE .)
    RBRACKET        reduce using rule 55 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 55 (type -> STRING_TYPE .)


state 188

    (56) type -> BOOLEAN_TYPE .

    EQUAL           reduce using rule 56 (type -> BOOLEAN_TYPE .)
    SEMICOLON       reduce using rule 56 (type -> BOOLEAN_TYPE .)
    LBRACKET        reduce using rule 56 (type -> BOOLEAN_TYPE .)
    COMMA           reduce using rule 56 (type -> BOOLEAN_TYPE .)
    RPAREN          reduce using rule 56 (type -> BOOLEAN_TYPE .)
    RBRACKET        reduce using rule 56 (type -> BOOLEAN_TYPE .)
    LBRACE          reduce using rule 56 (type -> BOOLEAN_TYPE .)


state 189

    (58) type -> VOID .

    EQUAL           reduce using rule 58 (type -> VOID .)
    SEMICOLON       reduce using rule 58 (type -> VOID .)
    LBRACKET        reduce using rule 58 (type -> VOID .)
    COMMA           reduce using rule 58 (type -> VOID .)
    RPAREN          reduce using rule 58 (type -> VOID .)
    RBRACKET        reduce using rule 58 (type -> VOID .)
    LBRACE          reduce using rule 58 (type -> VOID .)


state 190

    (19) letAssignment -> LET IDENTIFIER EQUAL expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 235
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 191

    (17) assignment -> IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 17 (assignment -> IDENTIFIER EQUAL expression SEMICOLON .)


state 192

    (86) expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .

    SEMICOLON       reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUS            reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUS           reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    TIMES           reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DIV             reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MOD             reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUS_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUS_ASSIGN    reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MULT_ASSIGN     reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DIV_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MOD_ASSIGN      reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    POT             reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    AND             reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    OR              reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    EQ              reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    NEQ             reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    STRICT_EQ       reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    STRICT_NEQ      reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LT              reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    GT              reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LE              reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    GE              reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    DOT             reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    LBRACKET        reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    PLUSPLUS        reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    MINUSMINUS      reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    COMMA           reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RPAREN          reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RBRACKET        reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    RBRACE          reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)
    COLON           reduce using rule 86 (expression -> IDENTIFIER LPAREN lista_expresiones_opt RPAREN .)


state 193

    (27) lista_expresiones -> expression COMMA . lista_expresiones
    (26) lista_expresiones -> . expression
    (27) lista_expresiones -> . expression COMMA lista_expresiones
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 149
    lista_expresiones              shift and go to state 236

state 194

    (53) expression -> LBRACKET expression COMMA expression . RBRACKET
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RBRACKET        shift and go to state 237
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 195

    (47) parameters -> IDENTIFIER . COLON type
    (48) parameters -> IDENTIFIER . COLON type COMMA parameters

    COLON           shift and go to state 238


state 196

    (45) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN COLON type LBRACE body_function RBRACE

    RPAREN          shift and go to state 239


state 197

    (49) parameters -> empty .

    RPAREN          reduce using rule 49 (parameters -> empty .)


state 198

    (152) object_properties -> object_property COMMA object_properties .

    RBRACE          reduce using rule 152 (object_properties -> object_property COMMA object_properties .)


state 199

    (154) object_property -> IDENTIFIER COLON expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    COMMA           reduce using rule 154 (object_property -> IDENTIFIER COLON expression .)
    RBRACE          reduce using rule 154 (object_property -> IDENTIFIER COLON expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 200

    (122) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (144) arrow_function -> CONST IDENTIFIER EQUAL . LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LPAREN          shift and go to state 201
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 202

state 201

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN . parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (83) expression -> LPAREN . expression RPAREN
    (47) parameters -> . IDENTIFIER COLON type
    (48) parameters -> . IDENTIFIER COLON type COMMA parameters
    (49) parameters -> . empty
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (120) empty -> .

    IDENTIFIER      shift and go to state 240
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80
    RPAREN          reduce using rule 120 (empty -> .)

    parameters                     shift and go to state 241
    expression                     shift and go to state 82
    empty                          shift and go to state 197

state 202

    (122) constAssignment -> CONST IDENTIFIER EQUAL expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 242
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 203

    (121) constAssignment -> CONST IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (59) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 243
    LBRACKET        shift and go to state 244


state 204

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN . parameters RPAREN COLON type LBRACE body_function RBRACE
    (47) parameters -> . IDENTIFIER COLON type
    (48) parameters -> . IDENTIFIER COLON type COMMA parameters
    (49) parameters -> . empty
    (120) empty -> .

    IDENTIFIER      shift and go to state 195
    RPAREN          reduce using rule 120 (empty -> .)

    parameters                     shift and go to state 245
    empty                          shift and go to state 197

state 205

    (140) enum_members -> IDENTIFIER .
    (141) enum_members -> IDENTIFIER . COMMA enum_members

    RBRACE          reduce using rule 140 (enum_members -> IDENTIFIER .)
    COMMA           shift and go to state 246


state 206

    (139) enum_definition -> ENUM IDENTIFIER LBRACE enum_members . RBRACE

    RBRACE          shift and go to state 247


state 207

    (98) controlEstructure -> IF LPAREN expression RPAREN . statement
    (99) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE statement
    (100) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 248
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 208

    (131) controlEstructure -> SWITCH LPAREN expression RPAREN . LBRACE push_switch case_list pop_switch RBRACE

    LBRACE          shift and go to state 249


state 209

    (143) controlEstructure -> WHILE LPAREN expression RPAREN . push_loop statement pop_loop
    (28) push_loop -> .

    RETURN          reduce using rule 28 (push_loop -> .)
    LBRACE          reduce using rule 28 (push_loop -> .)
    BREAK           reduce using rule 28 (push_loop -> .)
    CONTINUE        reduce using rule 28 (push_loop -> .)
    LET             reduce using rule 28 (push_loop -> .)
    VAR             reduce using rule 28 (push_loop -> .)
    CONST           reduce using rule 28 (push_loop -> .)
    FUNCTION        reduce using rule 28 (push_loop -> .)
    ASYNC           reduce using rule 28 (push_loop -> .)
    CONSOLE         reduce using rule 28 (push_loop -> .)
    LBRACKET        reduce using rule 28 (push_loop -> .)
    PROMPT          reduce using rule 28 (push_loop -> .)
    NOT             reduce using rule 28 (push_loop -> .)
    LPAREN          reduce using rule 28 (push_loop -> .)
    IDENTIFIER      reduce using rule 28 (push_loop -> .)
    NUMBER          reduce using rule 28 (push_loop -> .)
    FLOAT           reduce using rule 28 (push_loop -> .)
    STRING          reduce using rule 28 (push_loop -> .)
    TRUE            reduce using rule 28 (push_loop -> .)
    FALSE           reduce using rule 28 (push_loop -> .)
    PLUSPLUS        reduce using rule 28 (push_loop -> .)
    MINUSMINUS      reduce using rule 28 (push_loop -> .)
    IF              reduce using rule 28 (push_loop -> .)
    SWITCH          reduce using rule 28 (push_loop -> .)
    WHILE           reduce using rule 28 (push_loop -> .)
    FOR             reduce using rule 28 (push_loop -> .)
    CLASS           reduce using rule 28 (push_loop -> .)

    push_loop                      shift and go to state 250

state 210

    (123) class_definition -> CLASS IDENTIFIER LBRACE class_body . RBRACE
    (124) class_body -> class_body . class_element
    (127) class_element -> . function
    (128) class_element -> . letAssignment
    (129) class_element -> . varAssignment
    (130) class_element -> . constAssignment
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON

    RBRACE          shift and go to state 251
    FUNCTION        shift and go to state 20
    LET             shift and go to state 217
    VAR             shift and go to state 46
    CONST           shift and go to state 218

    class_element                  shift and go to state 252
    function                       shift and go to state 213
    letAssignment                  shift and go to state 214
    varAssignment                  shift and go to state 215
    constAssignment                shift and go to state 216

state 211

    (125) class_body -> class_element .

    RBRACE          reduce using rule 125 (class_body -> class_element .)
    FUNCTION        reduce using rule 125 (class_body -> class_element .)
    LET             reduce using rule 125 (class_body -> class_element .)
    VAR             reduce using rule 125 (class_body -> class_element .)
    CONST           reduce using rule 125 (class_body -> class_element .)


state 212

    (126) class_body -> empty .

    RBRACE          reduce using rule 126 (class_body -> empty .)
    FUNCTION        reduce using rule 126 (class_body -> empty .)
    LET             reduce using rule 126 (class_body -> empty .)
    VAR             reduce using rule 126 (class_body -> empty .)
    CONST           reduce using rule 126 (class_body -> empty .)


state 213

    (127) class_element -> function .

    RBRACE          reduce using rule 127 (class_element -> function .)
    FUNCTION        reduce using rule 127 (class_element -> function .)
    LET             reduce using rule 127 (class_element -> function .)
    VAR             reduce using rule 127 (class_element -> function .)
    CONST           reduce using rule 127 (class_element -> function .)


state 214

    (128) class_element -> letAssignment .

    RBRACE          reduce using rule 128 (class_element -> letAssignment .)
    FUNCTION        reduce using rule 128 (class_element -> letAssignment .)
    LET             reduce using rule 128 (class_element -> letAssignment .)
    VAR             reduce using rule 128 (class_element -> letAssignment .)
    CONST           reduce using rule 128 (class_element -> letAssignment .)


state 215

    (129) class_element -> varAssignment .

    RBRACE          reduce using rule 129 (class_element -> varAssignment .)
    FUNCTION        reduce using rule 129 (class_element -> varAssignment .)
    LET             reduce using rule 129 (class_element -> varAssignment .)
    VAR             reduce using rule 129 (class_element -> varAssignment .)
    CONST           reduce using rule 129 (class_element -> varAssignment .)


state 216

    (130) class_element -> constAssignment .

    RBRACE          reduce using rule 130 (class_element -> constAssignment .)
    FUNCTION        reduce using rule 130 (class_element -> constAssignment .)
    LET             reduce using rule 130 (class_element -> constAssignment .)
    VAR             reduce using rule 130 (class_element -> constAssignment .)
    CONST           reduce using rule 130 (class_element -> constAssignment .)


state 217

    (18) letAssignment -> LET . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET . IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> LET . IDENTIFIER COLON type SEMICOLON

    IDENTIFIER      shift and go to state 253


state 218

    (121) constAssignment -> CONST . IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> CONST . IDENTIFIER EQUAL expression SEMICOLON

    IDENTIFIER      shift and go to state 254


state 219

    (149) interface_property -> IDENTIFIER . COLON type SEMICOLON

    COLON           shift and go to state 255


state 220

    (145) interface -> INTERFACE IDENTIFIER LBRACE interface_body . RBRACE
    (146) interface_body -> interface_body . interface_property
    (149) interface_property -> . IDENTIFIER COLON type SEMICOLON

    RBRACE          shift and go to state 256
    IDENTIFIER      shift and go to state 219

    interface_property             shift and go to state 257

state 221

    (147) interface_body -> interface_property .

    RBRACE          reduce using rule 147 (interface_body -> interface_property .)
    IDENTIFIER      reduce using rule 147 (interface_body -> interface_property .)


state 222

    (148) interface_body -> empty .

    RBRACE          reduce using rule 148 (interface_body -> empty .)
    IDENTIFIER      reduce using rule 148 (interface_body -> empty .)


state 223

    (81) expression -> PROMPT LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUS            reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUS           reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    TIMES           reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    DIV             reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    MOD             reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUS_ASSIGN     reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUS_ASSIGN    reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    MULT_ASSIGN     reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    DIV_ASSIGN      reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    MOD_ASSIGN      reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    POT             reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    AND             reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    OR              reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    EQ              reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    NEQ             reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    STRICT_EQ       reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    STRICT_NEQ      reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    LT              reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    GT              reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    LE              reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    GE              reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    DOT             reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    LBRACKET        reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    PLUSPLUS        reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    MINUSMINUS      reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    COMMA           reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    RBRACKET        reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    RBRACE          reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)
    COLON           reduce using rule 81 (expression -> PROMPT LPAREN STRING RPAREN .)


state 224

    (97) consolelog -> CONSOLE DOT LOG LPAREN . lista_expresiones_opt RPAREN SEMICOLON
    (24) lista_expresiones_opt -> . lista_expresiones
    (25) lista_expresiones_opt -> . empty
    (26) lista_expresiones -> . expression
    (27) lista_expresiones -> . expression COMMA lista_expresiones
    (120) empty -> .
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    RPAREN          reduce using rule 120 (empty -> .)
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    lista_expresiones_opt          shift and go to state 258
    lista_expresiones              shift and go to state 147
    empty                          shift and go to state 148
    expression                     shift and go to state 149

state 225

    (21) varAssignment -> VAR IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (59) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 259
    LBRACKET        shift and go to state 244


state 226

    (22) varAssignment -> VAR IDENTIFIER EQUAL expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 260
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 227

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON . expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 261

state 228

    (33) forEstructure -> FOR LPAREN CONST IDENTIFIER . OF IDENTIFIER RPAREN push_loop statement pop_loop

    OF              shift and go to state 262


state 229

    (36) for_init -> IDENTIFIER EQUAL . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 263

state 230

    (34) for_init -> LET IDENTIFIER . EQUAL expression
    (35) for_init -> LET IDENTIFIER . COLON type EQUAL expression

    EQUAL           shift and go to state 264
    COLON           shift and go to state 265


state 231

    (18) letAssignment -> LET IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 266

state 232

    (20) letAssignment -> LET IDENTIFIER COLON type SEMICOLON .

    LET             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FUNCTION        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CONST           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    ASYNC           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    ENUM            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    IF              reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    SWITCH          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    WHILE           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CLASS           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    RETURN          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    LBRACE          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    BREAK           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CONTINUE        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    INTERFACE       reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    LBRACKET        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    PROMPT          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    NOT             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    LPAREN          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    NUMBER          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FLOAT           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    STRING          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    TRUE            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FALSE           reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    PLUSPLUS        reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    MINUSMINUS      reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CONSOLE         reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    VAR             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    FOR             reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    $end            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    RBRACE          reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    ELSE            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    CASE            reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)
    DEFAULT         reduce using rule 20 (letAssignment -> LET IDENTIFIER COLON type SEMICOLON .)


state 233

    (23) declaracion -> LET IDENTIFIER COLON type LBRACKET . RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (59) type -> type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 267


state 234

    (52) type -> LBRACKET type . COMMA type RBRACKET
    (59) type -> type . LBRACKET RBRACKET

    COMMA           shift and go to state 268
    LBRACKET        shift and go to state 244


state 235

    (19) letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 19 (letAssignment -> LET IDENTIFIER EQUAL expression SEMICOLON .)


state 236

    (27) lista_expresiones -> expression COMMA lista_expresiones .

    RPAREN          reduce using rule 27 (lista_expresiones -> expression COMMA lista_expresiones .)
    RBRACKET        reduce using rule 27 (lista_expresiones -> expression COMMA lista_expresiones .)


state 237

    (53) expression -> LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUS            reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUS           reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    TIMES           reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DIV             reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MOD             reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MULT_ASSIGN     reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    POT             reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    AND             reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    OR              reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    EQ              reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    NEQ             reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    STRICT_EQ       reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    STRICT_NEQ      reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LT              reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    GT              reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LE              reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    GE              reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    DOT             reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    LBRACKET        reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    PLUSPLUS        reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    MINUSMINUS      reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    COMMA           reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RPAREN          reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RBRACKET        reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    RBRACE          reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)
    COLON           reduce using rule 53 (expression -> LBRACKET expression COMMA expression RBRACKET .)


state 238

    (47) parameters -> IDENTIFIER COLON . type
    (48) parameters -> IDENTIFIER COLON . type COMMA parameters
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 269

state 239

    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . COLON type LBRACE body_function RBRACE

    COLON           shift and go to state 270


state 240

    (47) parameters -> IDENTIFIER . COLON type
    (48) parameters -> IDENTIFIER . COLON type COMMA parameters
    (86) expression -> IDENTIFIER . LPAREN lista_expresiones_opt RPAREN
    (90) expression -> IDENTIFIER .

    COLON           shift and go to state 238
    LPAREN          shift and go to state 77
    RPAREN          reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 90 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 90 (expression -> IDENTIFIER .)
    DIV             reduce using rule 90 (expression -> IDENTIFIER .)
    MOD             reduce using rule 90 (expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 90 (expression -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 90 (expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 90 (expression -> IDENTIFIER .)
    POT             reduce using rule 90 (expression -> IDENTIFIER .)
    AND             reduce using rule 90 (expression -> IDENTIFIER .)
    OR              reduce using rule 90 (expression -> IDENTIFIER .)
    EQ              reduce using rule 90 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_EQ       reduce using rule 90 (expression -> IDENTIFIER .)
    STRICT_NEQ      reduce using rule 90 (expression -> IDENTIFIER .)
    LT              reduce using rule 90 (expression -> IDENTIFIER .)
    GT              reduce using rule 90 (expression -> IDENTIFIER .)
    LE              reduce using rule 90 (expression -> IDENTIFIER .)
    GE              reduce using rule 90 (expression -> IDENTIFIER .)
    DOT             reduce using rule 90 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 90 (expression -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 90 (expression -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 90 (expression -> IDENTIFIER .)


state 241

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters . RPAREN ARROW LBRACE body_function RBRACE SEMICOLON

    RPAREN          shift and go to state 271


state 242

    (122) constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 122 (constAssignment -> CONST IDENTIFIER EQUAL expression SEMICOLON .)


state 243

    (121) constAssignment -> CONST IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 272

state 244

    (59) type -> type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 273


state 245

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters . RPAREN COLON type LBRACE body_function RBRACE

    RPAREN          shift and go to state 274


state 246

    (141) enum_members -> IDENTIFIER COMMA . enum_members
    (140) enum_members -> . IDENTIFIER
    (141) enum_members -> . IDENTIFIER COMMA enum_members

    IDENTIFIER      shift and go to state 205

    enum_members                   shift and go to state 275

state 247

    (139) enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .

    LET             reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FUNCTION        reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONST           reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    ASYNC           reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    ENUM            reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    IF              reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    SWITCH          reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    WHILE           reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CLASS           reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    RETURN          reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LBRACE          reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    BREAK           reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONTINUE        reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    INTERFACE       reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    IDENTIFIER      reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LBRACKET        reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    PROMPT          reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    NOT             reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    LPAREN          reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    NUMBER          reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FLOAT           reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    STRING          reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    TRUE            reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FALSE           reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    PLUSPLUS        reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    MINUSMINUS      reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    CONSOLE         reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    VAR             reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    FOR             reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)
    $end            reduce using rule 139 (enum_definition -> ENUM IDENTIFIER LBRACE enum_members RBRACE .)


state 248

    (98) controlEstructure -> IF LPAREN expression RPAREN statement .
    (99) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE statement
    (100) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LET             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    INTERFACE       reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 276

  ! ELSE            [ reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .) ]


state 249

    (131) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE . push_switch case_list pop_switch RBRACE
    (30) push_switch -> .

    CASE            reduce using rule 30 (push_switch -> .)
    DEFAULT         reduce using rule 30 (push_switch -> .)
    RBRACE          reduce using rule 30 (push_switch -> .)

    push_switch                    shift and go to state 277

state 250

    (143) controlEstructure -> WHILE LPAREN expression RPAREN push_loop . statement pop_loop
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 278
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 251

    (123) class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    LET             reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ASYNC           reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ENUM            reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    SWITCH          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RETURN          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LBRACE          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    BREAK           reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONTINUE        reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTERFACE       reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LBRACKET        reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROMPT          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NOT             reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    LPAREN          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NUMBER          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    STRING          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    TRUE            reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FALSE           reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PLUSPLUS        reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    MINUSMINUS      reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONSOLE         reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FOR             reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    $end            reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ELSE            reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CASE            reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    DEFAULT         reduce using rule 123 (class_definition -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 252

    (124) class_body -> class_body class_element .

    RBRACE          reduce using rule 124 (class_body -> class_body class_element .)
    FUNCTION        reduce using rule 124 (class_body -> class_body class_element .)
    LET             reduce using rule 124 (class_body -> class_body class_element .)
    VAR             reduce using rule 124 (class_body -> class_body class_element .)
    CONST           reduce using rule 124 (class_body -> class_body class_element .)


state 253

    (18) letAssignment -> LET IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> LET IDENTIFIER . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER . COLON type SEMICOLON

    COLON           shift and go to state 279
    EQUAL           shift and go to state 144


state 254

    (121) constAssignment -> CONST IDENTIFIER . COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> CONST IDENTIFIER . EQUAL expression SEMICOLON

    COLON           shift and go to state 163
    EQUAL           shift and go to state 280


state 255

    (149) interface_property -> IDENTIFIER COLON . type SEMICOLON
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 281

state 256

    (145) interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .

    LET             reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FUNCTION        reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CONST           reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    ASYNC           reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    ENUM            reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    IF              reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    SWITCH          reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    WHILE           reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CLASS           reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    RETURN          reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    LBRACE          reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    BREAK           reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CONTINUE        reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    INTERFACE       reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    IDENTIFIER      reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    LBRACKET        reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    PROMPT          reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    NOT             reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    LPAREN          reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    NUMBER          reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FLOAT           reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    STRING          reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    TRUE            reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FALSE           reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    PLUSPLUS        reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    MINUSMINUS      reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    CONSOLE         reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    VAR             reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    FOR             reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)
    $end            reduce using rule 145 (interface -> INTERFACE IDENTIFIER LBRACE interface_body RBRACE .)


state 257

    (146) interface_body -> interface_body interface_property .

    RBRACE          reduce using rule 146 (interface_body -> interface_body interface_property .)
    IDENTIFIER      reduce using rule 146 (interface_body -> interface_body interface_property .)


state 258

    (97) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 282


state 259

    (21) varAssignment -> VAR IDENTIFIER COLON type EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 283

state 260

    (22) varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .

    LET             reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONST           reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    IF              reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    NOT             reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    STRING          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    VAR             reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    FOR             reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    $end            reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    CASE            reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 22 (varAssignment -> VAR IDENTIFIER EQUAL expression SEMICOLON .)


state 261

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression . SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 284
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 262

    (33) forEstructure -> FOR LPAREN CONST IDENTIFIER OF . IDENTIFIER RPAREN push_loop statement pop_loop

    IDENTIFIER      shift and go to state 285


state 263

    (36) for_init -> IDENTIFIER EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 36 (for_init -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 264

    (34) for_init -> LET IDENTIFIER EQUAL . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 286

state 265

    (35) for_init -> LET IDENTIFIER COLON . type EQUAL expression
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 287

state 266

    (18) letAssignment -> LET IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 288
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 267

    (23) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET . EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (59) type -> type LBRACKET RBRACKET .

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 289
    SEMICOLON       reduce using rule 59 (type -> type LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 59 (type -> type LBRACKET RBRACKET .)

  ! EQUAL           [ reduce using rule 59 (type -> type LBRACKET RBRACKET .) ]


state 268

    (52) type -> LBRACKET type COMMA . type RBRACKET
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 290

state 269

    (47) parameters -> IDENTIFIER COLON type .
    (48) parameters -> IDENTIFIER COLON type . COMMA parameters
    (59) type -> type . LBRACKET RBRACKET

    RPAREN          reduce using rule 47 (parameters -> IDENTIFIER COLON type .)
    COMMA           shift and go to state 291
    LBRACKET        shift and go to state 244


state 270

    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON . type LBRACE body_function RBRACE
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 292

state 271

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN . ARROW LBRACE body_function RBRACE SEMICOLON

    ARROW           shift and go to state 293


state 272

    (121) constAssignment -> CONST IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 294
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 273

    (59) type -> type LBRACKET RBRACKET .

    EQUAL           reduce using rule 59 (type -> type LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 59 (type -> type LBRACKET RBRACKET .)
    COMMA           reduce using rule 59 (type -> type LBRACKET RBRACKET .)
    RPAREN          reduce using rule 59 (type -> type LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 59 (type -> type LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 59 (type -> type LBRACKET RBRACKET .)
    LBRACE          reduce using rule 59 (type -> type LBRACKET RBRACKET .)


state 274

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN . COLON type LBRACE body_function RBRACE

    COLON           shift and go to state 295


state 275

    (141) enum_members -> IDENTIFIER COMMA enum_members .

    RBRACE          reduce using rule 141 (enum_members -> IDENTIFIER COMMA enum_members .)


state 276

    (99) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . statement
    (100) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement ELSE statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    IF              shift and go to state 296
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 297
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 277

    (131) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch . case_list pop_switch RBRACE
    (132) case_list -> . case_list case
    (133) case_list -> . case
    (134) case_list -> . empty
    (135) case -> . CASE expression COLON instruction_list
    (136) case -> . DEFAULT COLON instruction_list
    (120) empty -> .

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    CASE            shift and go to state 301
    DEFAULT         shift and go to state 302
    RBRACE          reduce using rule 120 (empty -> .)

  ! CASE            [ reduce using rule 120 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 120 (empty -> .) ]

    case_list                      shift and go to state 298
    case                           shift and go to state 299
    empty                          shift and go to state 300

state 278

    (143) controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement . pop_loop
    (29) pop_loop -> .

    LET             reduce using rule 29 (pop_loop -> .)
    FUNCTION        reduce using rule 29 (pop_loop -> .)
    CONST           reduce using rule 29 (pop_loop -> .)
    ASYNC           reduce using rule 29 (pop_loop -> .)
    ENUM            reduce using rule 29 (pop_loop -> .)
    IF              reduce using rule 29 (pop_loop -> .)
    SWITCH          reduce using rule 29 (pop_loop -> .)
    WHILE           reduce using rule 29 (pop_loop -> .)
    CLASS           reduce using rule 29 (pop_loop -> .)
    RETURN          reduce using rule 29 (pop_loop -> .)
    LBRACE          reduce using rule 29 (pop_loop -> .)
    BREAK           reduce using rule 29 (pop_loop -> .)
    CONTINUE        reduce using rule 29 (pop_loop -> .)
    INTERFACE       reduce using rule 29 (pop_loop -> .)
    IDENTIFIER      reduce using rule 29 (pop_loop -> .)
    LBRACKET        reduce using rule 29 (pop_loop -> .)
    PROMPT          reduce using rule 29 (pop_loop -> .)
    NOT             reduce using rule 29 (pop_loop -> .)
    LPAREN          reduce using rule 29 (pop_loop -> .)
    NUMBER          reduce using rule 29 (pop_loop -> .)
    FLOAT           reduce using rule 29 (pop_loop -> .)
    STRING          reduce using rule 29 (pop_loop -> .)
    TRUE            reduce using rule 29 (pop_loop -> .)
    FALSE           reduce using rule 29 (pop_loop -> .)
    PLUSPLUS        reduce using rule 29 (pop_loop -> .)
    MINUSMINUS      reduce using rule 29 (pop_loop -> .)
    CONSOLE         reduce using rule 29 (pop_loop -> .)
    VAR             reduce using rule 29 (pop_loop -> .)
    FOR             reduce using rule 29 (pop_loop -> .)
    $end            reduce using rule 29 (pop_loop -> .)
    RBRACE          reduce using rule 29 (pop_loop -> .)
    ELSE            reduce using rule 29 (pop_loop -> .)
    CASE            reduce using rule 29 (pop_loop -> .)
    DEFAULT         reduce using rule 29 (pop_loop -> .)

    pop_loop                       shift and go to state 303

state 279

    (18) letAssignment -> LET IDENTIFIER COLON . type EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON . type SEMICOLON
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 304

state 280

    (122) constAssignment -> CONST IDENTIFIER EQUAL . expression SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 202

state 281

    (149) interface_property -> IDENTIFIER COLON type . SEMICOLON
    (59) type -> type . LBRACKET RBRACKET

    SEMICOLON       shift and go to state 305
    LBRACKET        shift and go to state 244


state 282

    (97) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 306


state 283

    (21) varAssignment -> VAR IDENTIFIER COLON type EQUAL expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       shift and go to state 307
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 284

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON . for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (39) for_update -> . expression
    (40) for_update -> . expression PLUSPLUS
    (41) for_update -> . expression MINUSMINUS
    (42) for_update -> . PLUSPLUS expression
    (43) for_update -> . MINUSMINUS expression
    (44) for_update -> . empty
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (120) empty -> .

    PLUSPLUS        shift and go to state 310
    MINUSMINUS      shift and go to state 311
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    LBRACE          shift and go to state 80
    RPAREN          reduce using rule 120 (empty -> .)

    expression                     shift and go to state 308
    for_update                     shift and go to state 309
    empty                          shift and go to state 312

state 285

    (33) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER . RPAREN push_loop statement pop_loop

    RPAREN          shift and go to state 313


state 286

    (34) for_init -> LET IDENTIFIER EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 34 (for_init -> LET IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 287

    (35) for_init -> LET IDENTIFIER COLON type . EQUAL expression
    (59) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 314
    LBRACKET        shift and go to state 244


state 288

    (18) letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 18 (letAssignment -> LET IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 289

    (23) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL . LBRACKET lista_expresiones_opt RBRACKET SEMICOLON

    LBRACKET        shift and go to state 315


state 290

    (52) type -> LBRACKET type COMMA type . RBRACKET
    (59) type -> type . LBRACKET RBRACKET

    RBRACKET        shift and go to state 316
    LBRACKET        shift and go to state 244


state 291

    (48) parameters -> IDENTIFIER COLON type COMMA . parameters
    (47) parameters -> . IDENTIFIER COLON type
    (48) parameters -> . IDENTIFIER COLON type COMMA parameters
    (49) parameters -> . empty
    (120) empty -> .

    IDENTIFIER      shift and go to state 195
    RPAREN          reduce using rule 120 (empty -> .)

    parameters                     shift and go to state 317
    empty                          shift and go to state 197

state 292

    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type . LBRACE body_function RBRACE
    (59) type -> type . LBRACKET RBRACKET

    LBRACE          shift and go to state 318
    LBRACKET        shift and go to state 244


state 293

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW . LBRACE body_function RBRACE SEMICOLON

    LBRACE          shift and go to state 319


state 294

    (121) constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 121 (constAssignment -> CONST IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 295

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON . type LBRACE body_function RBRACE
    (52) type -> . LBRACKET type COMMA type RBRACKET
    (54) type -> . NUMBER_TYPE
    (55) type -> . STRING_TYPE
    (56) type -> . BOOLEAN_TYPE
    (57) type -> . IDENTIFIER
    (58) type -> . VOID
    (59) type -> . type LBRACKET RBRACKET

    LBRACKET        shift and go to state 185
    NUMBER_TYPE     shift and go to state 186
    STRING_TYPE     shift and go to state 187
    BOOLEAN_TYPE    shift and go to state 188
    IDENTIFIER      shift and go to state 183
    VOID            shift and go to state 189

    type                           shift and go to state 320

state 296

    (100) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF . LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF . LPAREN expression RPAREN statement ELSE statement
    (98) controlEstructure -> IF . LPAREN expression RPAREN statement
    (99) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF . LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 321


state 297

    (99) controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .

    LET             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASYNC           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    INTERFACE       reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACKET        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PROMPT          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONSOLE         reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)


state 298

    (131) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list . pop_switch RBRACE
    (132) case_list -> case_list . case
    (31) pop_switch -> .
    (135) case -> . CASE expression COLON instruction_list
    (136) case -> . DEFAULT COLON instruction_list

    RBRACE          reduce using rule 31 (pop_switch -> .)
    CASE            shift and go to state 301
    DEFAULT         shift and go to state 302

    pop_switch                     shift and go to state 322
    case                           shift and go to state 323

state 299

    (133) case_list -> case .

    CASE            reduce using rule 133 (case_list -> case .)
    DEFAULT         reduce using rule 133 (case_list -> case .)
    RBRACE          reduce using rule 133 (case_list -> case .)


state 300

    (134) case_list -> empty .

    CASE            reduce using rule 134 (case_list -> empty .)
    DEFAULT         reduce using rule 134 (case_list -> empty .)
    RBRACE          reduce using rule 134 (case_list -> empty .)


state 301

    (135) case -> CASE . expression COLON instruction_list
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 324

state 302

    (136) case -> DEFAULT . COLON instruction_list

    COLON           shift and go to state 325


state 303

    (143) controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .

    LET             reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    FUNCTION        reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    CONST           reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    ASYNC           reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    ENUM            reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    IF              reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    SWITCH          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    WHILE           reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    CLASS           reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    RETURN          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    LBRACE          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    BREAK           reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    CONTINUE        reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    INTERFACE       reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    IDENTIFIER      reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    LBRACKET        reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    PROMPT          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    NOT             reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    LPAREN          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    NUMBER          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    FLOAT           reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    STRING          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    TRUE            reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    FALSE           reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    PLUSPLUS        reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    MINUSMINUS      reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    CONSOLE         reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    VAR             reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    FOR             reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    $end            reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    RBRACE          reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    ELSE            reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    CASE            reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)
    DEFAULT         reduce using rule 143 (controlEstructure -> WHILE LPAREN expression RPAREN push_loop statement pop_loop .)


state 304

    (18) letAssignment -> LET IDENTIFIER COLON type . EQUAL expression SEMICOLON
    (20) letAssignment -> LET IDENTIFIER COLON type . SEMICOLON
    (59) type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 231
    SEMICOLON       shift and go to state 232
    LBRACKET        shift and go to state 244


state 305

    (149) interface_property -> IDENTIFIER COLON type SEMICOLON .

    RBRACE          reduce using rule 149 (interface_property -> IDENTIFIER COLON type SEMICOLON .)
    IDENTIFIER      reduce using rule 149 (interface_property -> IDENTIFIER COLON type SEMICOLON .)


state 306

    (97) consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .

    LET             reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONST           reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ASYNC           reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ENUM            reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    IF              reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    PROMPT          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    NOT             reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    NUMBER          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    STRING          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    TRUE            reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FALSE           reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    PLUSPLUS        reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    MINUSMINUS      reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    VAR             reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    $end            reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 97 (consolelog -> CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON .)


state 307

    (21) varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .

    LET             reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ASYNC           reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ENUM            reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CLASS           reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LBRACKET        reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PROMPT          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    STRING          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    TRUE            reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FALSE           reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    PLUSPLUS        reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    MINUSMINUS      reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 21 (varAssignment -> VAR IDENTIFIER COLON type EQUAL expression SEMICOLON .)


state 308

    (39) for_update -> expression .
    (40) for_update -> expression . PLUSPLUS
    (41) for_update -> expression . MINUSMINUS
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RPAREN          reduce using rule 39 (for_update -> expression .)
    PLUSPLUS        shift and go to state 326
    MINUSMINUS      shift and go to state 327
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72


state 309

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update . RPAREN LBRACE push_loop instruction_list pop_loop RBRACE

    RPAREN          shift and go to state 328


state 310

    (42) for_update -> PLUSPLUS . expression
    (95) expression -> PLUSPLUS . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 329

state 311

    (43) for_update -> MINUSMINUS . expression
    (96) expression -> MINUSMINUS . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 330

state 312

    (44) for_update -> empty .

    RPAREN          reduce using rule 44 (for_update -> empty .)


state 313

    (33) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN . push_loop statement pop_loop
    (28) push_loop -> .

    RETURN          reduce using rule 28 (push_loop -> .)
    LBRACE          reduce using rule 28 (push_loop -> .)
    BREAK           reduce using rule 28 (push_loop -> .)
    CONTINUE        reduce using rule 28 (push_loop -> .)
    LET             reduce using rule 28 (push_loop -> .)
    VAR             reduce using rule 28 (push_loop -> .)
    CONST           reduce using rule 28 (push_loop -> .)
    FUNCTION        reduce using rule 28 (push_loop -> .)
    ASYNC           reduce using rule 28 (push_loop -> .)
    CONSOLE         reduce using rule 28 (push_loop -> .)
    LBRACKET        reduce using rule 28 (push_loop -> .)
    PROMPT          reduce using rule 28 (push_loop -> .)
    NOT             reduce using rule 28 (push_loop -> .)
    LPAREN          reduce using rule 28 (push_loop -> .)
    IDENTIFIER      reduce using rule 28 (push_loop -> .)
    NUMBER          reduce using rule 28 (push_loop -> .)
    FLOAT           reduce using rule 28 (push_loop -> .)
    STRING          reduce using rule 28 (push_loop -> .)
    TRUE            reduce using rule 28 (push_loop -> .)
    FALSE           reduce using rule 28 (push_loop -> .)
    PLUSPLUS        reduce using rule 28 (push_loop -> .)
    MINUSMINUS      reduce using rule 28 (push_loop -> .)
    IF              reduce using rule 28 (push_loop -> .)
    SWITCH          reduce using rule 28 (push_loop -> .)
    WHILE           reduce using rule 28 (push_loop -> .)
    FOR             reduce using rule 28 (push_loop -> .)
    CLASS           reduce using rule 28 (push_loop -> .)

    push_loop                      shift and go to state 331

state 314

    (35) for_init -> LET IDENTIFIER COLON type EQUAL . expression
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 332

state 315

    (23) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET . lista_expresiones_opt RBRACKET SEMICOLON
    (24) lista_expresiones_opt -> . lista_expresiones
    (25) lista_expresiones_opt -> . empty
    (26) lista_expresiones -> . expression
    (27) lista_expresiones -> . expression COMMA lista_expresiones
    (120) empty -> .
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    RBRACKET        reduce using rule 120 (empty -> .)
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    lista_expresiones_opt          shift and go to state 333
    lista_expresiones              shift and go to state 147
    empty                          shift and go to state 148
    expression                     shift and go to state 149

state 316

    (52) type -> LBRACKET type COMMA type RBRACKET .

    EQUAL           reduce using rule 52 (type -> LBRACKET type COMMA type RBRACKET .)
    SEMICOLON       reduce using rule 52 (type -> LBRACKET type COMMA type RBRACKET .)
    LBRACKET        reduce using rule 52 (type -> LBRACKET type COMMA type RBRACKET .)
    COMMA           reduce using rule 52 (type -> LBRACKET type COMMA type RBRACKET .)
    RPAREN          reduce using rule 52 (type -> LBRACKET type COMMA type RBRACKET .)
    RBRACKET        reduce using rule 52 (type -> LBRACKET type COMMA type RBRACKET .)
    LBRACE          reduce using rule 52 (type -> LBRACKET type COMMA type RBRACKET .)


state 317

    (48) parameters -> IDENTIFIER COLON type COMMA parameters .

    RPAREN          reduce using rule 48 (parameters -> IDENTIFIER COLON type COMMA parameters .)


state 318

    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE . body_function RBRACE
    (50) body_function -> . instruction_list
    (51) body_function -> . empty
    (117) instruction_list -> . instruction_list statement
    (118) instruction_list -> . statement
    (119) instruction_list -> . empty
    (120) empty -> .
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          reduce using rule 120 (empty -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 120 (empty -> .) ]
  ! LBRACE          [ reduce using rule 120 (empty -> .) ]
  ! BREAK           [ reduce using rule 120 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! ASYNC           [ reduce using rule 120 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 120 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 120 (empty -> .) ]
  ! PROMPT          [ reduce using rule 120 (empty -> .) ]
  ! NOT             [ reduce using rule 120 (empty -> .) ]
  ! LPAREN          [ reduce using rule 120 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]
  ! NUMBER          [ reduce using rule 120 (empty -> .) ]
  ! FLOAT           [ reduce using rule 120 (empty -> .) ]
  ! STRING          [ reduce using rule 120 (empty -> .) ]
  ! TRUE            [ reduce using rule 120 (empty -> .) ]
  ! FALSE           [ reduce using rule 120 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 120 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 120 (empty -> .) ]
  ! IF              [ reduce using rule 120 (empty -> .) ]
  ! SWITCH          [ reduce using rule 120 (empty -> .) ]
  ! WHILE           [ reduce using rule 120 (empty -> .) ]
  ! FOR             [ reduce using rule 120 (empty -> .) ]
  ! CLASS           [ reduce using rule 120 (empty -> .) ]

    body_function                  shift and go to state 334
    instruction_list               shift and go to state 335
    empty                          shift and go to state 336
    statement                      shift and go to state 86
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 319

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE . body_function RBRACE SEMICOLON
    (50) body_function -> . instruction_list
    (51) body_function -> . empty
    (117) instruction_list -> . instruction_list statement
    (118) instruction_list -> . statement
    (119) instruction_list -> . empty
    (120) empty -> .
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          reduce using rule 120 (empty -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 120 (empty -> .) ]
  ! LBRACE          [ reduce using rule 120 (empty -> .) ]
  ! BREAK           [ reduce using rule 120 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! ASYNC           [ reduce using rule 120 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 120 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 120 (empty -> .) ]
  ! PROMPT          [ reduce using rule 120 (empty -> .) ]
  ! NOT             [ reduce using rule 120 (empty -> .) ]
  ! LPAREN          [ reduce using rule 120 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]
  ! NUMBER          [ reduce using rule 120 (empty -> .) ]
  ! FLOAT           [ reduce using rule 120 (empty -> .) ]
  ! STRING          [ reduce using rule 120 (empty -> .) ]
  ! TRUE            [ reduce using rule 120 (empty -> .) ]
  ! FALSE           [ reduce using rule 120 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 120 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 120 (empty -> .) ]
  ! IF              [ reduce using rule 120 (empty -> .) ]
  ! SWITCH          [ reduce using rule 120 (empty -> .) ]
  ! WHILE           [ reduce using rule 120 (empty -> .) ]
  ! FOR             [ reduce using rule 120 (empty -> .) ]
  ! CLASS           [ reduce using rule 120 (empty -> .) ]

    body_function                  shift and go to state 337
    instruction_list               shift and go to state 335
    empty                          shift and go to state 336
    statement                      shift and go to state 86
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 320

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type . LBRACE body_function RBRACE
    (59) type -> type . LBRACKET RBRACKET

    LBRACE          shift and go to state 338
    LBRACKET        shift and go to state 244


state 321

    (100) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN . expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN . expression RPAREN statement ELSE statement
    (98) controlEstructure -> IF LPAREN . expression RPAREN statement
    (99) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE statement
    (100) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN . expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE

    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    LBRACE          shift and go to state 80

    expression                     shift and go to state 339

state 322

    (131) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch . RBRACE

    RBRACE          shift and go to state 340


state 323

    (132) case_list -> case_list case .

    CASE            reduce using rule 132 (case_list -> case_list case .)
    DEFAULT         reduce using rule 132 (case_list -> case_list case .)
    RBRACE          reduce using rule 132 (case_list -> case_list case .)


state 324

    (135) case -> CASE expression . COLON instruction_list
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    COLON           shift and go to state 341
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 325

    (136) case -> DEFAULT COLON . instruction_list
    (117) instruction_list -> . instruction_list statement
    (118) instruction_list -> . statement
    (119) instruction_list -> . empty
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (120) empty -> .
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    CASE            reduce using rule 120 (empty -> .)
    DEFAULT         reduce using rule 120 (empty -> .)
    RBRACE          reduce using rule 120 (empty -> .)
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 120 (empty -> .) ]
  ! LBRACE          [ reduce using rule 120 (empty -> .) ]
  ! BREAK           [ reduce using rule 120 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! ASYNC           [ reduce using rule 120 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 120 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 120 (empty -> .) ]
  ! PROMPT          [ reduce using rule 120 (empty -> .) ]
  ! NOT             [ reduce using rule 120 (empty -> .) ]
  ! LPAREN          [ reduce using rule 120 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]
  ! NUMBER          [ reduce using rule 120 (empty -> .) ]
  ! FLOAT           [ reduce using rule 120 (empty -> .) ]
  ! STRING          [ reduce using rule 120 (empty -> .) ]
  ! TRUE            [ reduce using rule 120 (empty -> .) ]
  ! FALSE           [ reduce using rule 120 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 120 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 120 (empty -> .) ]
  ! IF              [ reduce using rule 120 (empty -> .) ]
  ! SWITCH          [ reduce using rule 120 (empty -> .) ]
  ! WHILE           [ reduce using rule 120 (empty -> .) ]
  ! FOR             [ reduce using rule 120 (empty -> .) ]
  ! CLASS           [ reduce using rule 120 (empty -> .) ]

    instruction_list               shift and go to state 342
    statement                      shift and go to state 86
    empty                          shift and go to state 343
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 326

    (40) for_update -> expression PLUSPLUS .
    (93) expression -> expression PLUSPLUS .

  ! reduce/reduce conflict for RPAREN resolved using rule 40 (for_update -> expression PLUSPLUS .)
    RPAREN          reduce using rule 40 (for_update -> expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 93 (expression -> expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 93 (expression -> expression PLUSPLUS .)
    PLUS            reduce using rule 93 (expression -> expression PLUSPLUS .)
    MINUS           reduce using rule 93 (expression -> expression PLUSPLUS .)
    TIMES           reduce using rule 93 (expression -> expression PLUSPLUS .)
    DIV             reduce using rule 93 (expression -> expression PLUSPLUS .)
    MOD             reduce using rule 93 (expression -> expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 93 (expression -> expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 93 (expression -> expression PLUSPLUS .)
    MULT_ASSIGN     reduce using rule 93 (expression -> expression PLUSPLUS .)
    DIV_ASSIGN      reduce using rule 93 (expression -> expression PLUSPLUS .)
    MOD_ASSIGN      reduce using rule 93 (expression -> expression PLUSPLUS .)
    POT             reduce using rule 93 (expression -> expression PLUSPLUS .)
    AND             reduce using rule 93 (expression -> expression PLUSPLUS .)
    OR              reduce using rule 93 (expression -> expression PLUSPLUS .)
    EQ              reduce using rule 93 (expression -> expression PLUSPLUS .)
    NEQ             reduce using rule 93 (expression -> expression PLUSPLUS .)
    STRICT_EQ       reduce using rule 93 (expression -> expression PLUSPLUS .)
    STRICT_NEQ      reduce using rule 93 (expression -> expression PLUSPLUS .)
    LT              reduce using rule 93 (expression -> expression PLUSPLUS .)
    GT              reduce using rule 93 (expression -> expression PLUSPLUS .)
    LE              reduce using rule 93 (expression -> expression PLUSPLUS .)
    GE              reduce using rule 93 (expression -> expression PLUSPLUS .)
    DOT             reduce using rule 93 (expression -> expression PLUSPLUS .)
    LBRACKET        reduce using rule 93 (expression -> expression PLUSPLUS .)

  ! RPAREN          [ reduce using rule 93 (expression -> expression PLUSPLUS .) ]


state 327

    (41) for_update -> expression MINUSMINUS .
    (94) expression -> expression MINUSMINUS .

  ! reduce/reduce conflict for RPAREN resolved using rule 41 (for_update -> expression MINUSMINUS .)
    RPAREN          reduce using rule 41 (for_update -> expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 94 (expression -> expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 94 (expression -> expression MINUSMINUS .)
    PLUS            reduce using rule 94 (expression -> expression MINUSMINUS .)
    MINUS           reduce using rule 94 (expression -> expression MINUSMINUS .)
    TIMES           reduce using rule 94 (expression -> expression MINUSMINUS .)
    DIV             reduce using rule 94 (expression -> expression MINUSMINUS .)
    MOD             reduce using rule 94 (expression -> expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 94 (expression -> expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 94 (expression -> expression MINUSMINUS .)
    MULT_ASSIGN     reduce using rule 94 (expression -> expression MINUSMINUS .)
    DIV_ASSIGN      reduce using rule 94 (expression -> expression MINUSMINUS .)
    MOD_ASSIGN      reduce using rule 94 (expression -> expression MINUSMINUS .)
    POT             reduce using rule 94 (expression -> expression MINUSMINUS .)
    AND             reduce using rule 94 (expression -> expression MINUSMINUS .)
    OR              reduce using rule 94 (expression -> expression MINUSMINUS .)
    EQ              reduce using rule 94 (expression -> expression MINUSMINUS .)
    NEQ             reduce using rule 94 (expression -> expression MINUSMINUS .)
    STRICT_EQ       reduce using rule 94 (expression -> expression MINUSMINUS .)
    STRICT_NEQ      reduce using rule 94 (expression -> expression MINUSMINUS .)
    LT              reduce using rule 94 (expression -> expression MINUSMINUS .)
    GT              reduce using rule 94 (expression -> expression MINUSMINUS .)
    LE              reduce using rule 94 (expression -> expression MINUSMINUS .)
    GE              reduce using rule 94 (expression -> expression MINUSMINUS .)
    DOT             reduce using rule 94 (expression -> expression MINUSMINUS .)
    LBRACKET        reduce using rule 94 (expression -> expression MINUSMINUS .)

  ! RPAREN          [ reduce using rule 94 (expression -> expression MINUSMINUS .) ]


state 328

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN . LBRACE push_loop instruction_list pop_loop RBRACE

    LBRACE          shift and go to state 344


state 329

    (42) for_update -> PLUSPLUS expression .
    (95) expression -> PLUSPLUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! reduce/reduce conflict for RPAREN resolved using rule 42 (for_update -> PLUSPLUS expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 42 (for_update -> PLUSPLUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUSPLUS        [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! PLUS            [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MINUS           [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! TIMES           [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! DIV             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MOD             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! POT             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! AND             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! OR              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! EQ              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! NEQ             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! LT              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! GT              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! LE              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! GE              [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! DOT             [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! LBRACKET        [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]
  ! RPAREN          [ reduce using rule 95 (expression -> PLUSPLUS expression .) ]


state 330

    (43) for_update -> MINUSMINUS expression .
    (96) expression -> MINUSMINUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

  ! reduce/reduce conflict for RPAREN resolved using rule 43 (for_update -> MINUSMINUS expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASSIGN resolved as shift
  ! shift/reduce conflict for MULT_ASSIGN resolved as shift
  ! shift/reduce conflict for DIV_ASSIGN resolved as shift
  ! shift/reduce conflict for MOD_ASSIGN resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICT_EQ resolved as shift
  ! shift/reduce conflict for STRICT_NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 43 (for_update -> MINUSMINUS expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74

  ! PLUSPLUS        [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MINUSMINUS      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! PLUS            [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MINUS           [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! TIMES           [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! DIV             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MOD             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! PLUS_ASSIGN     [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MINUS_ASSIGN    [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MULT_ASSIGN     [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! DIV_ASSIGN      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! MOD_ASSIGN      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! POT             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! AND             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! OR              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! EQ              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! NEQ             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! STRICT_EQ       [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! STRICT_NEQ      [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! LT              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! GT              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! LE              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! GE              [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! DOT             [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! LBRACKET        [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]
  ! RPAREN          [ reduce using rule 96 (expression -> MINUSMINUS expression .) ]


state 331

    (33) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop . statement pop_loop
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 345
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 332

    (35) for_init -> LET IDENTIFIER COLON type EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    SEMICOLON       reduce using rule 35 (for_init -> LET IDENTIFIER COLON type EQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 333

    (23) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 346


state 334

    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function . RBRACE

    RBRACE          shift and go to state 347


state 335

    (50) body_function -> instruction_list .
    (117) instruction_list -> instruction_list . statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 50 (body_function -> instruction_list .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 156
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 336

    (51) body_function -> empty .
    (119) instruction_list -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 51 (body_function -> empty .)
    RBRACE          reduce using rule 51 (body_function -> empty .)
    RETURN          reduce using rule 119 (instruction_list -> empty .)
    LBRACE          reduce using rule 119 (instruction_list -> empty .)
    BREAK           reduce using rule 119 (instruction_list -> empty .)
    CONTINUE        reduce using rule 119 (instruction_list -> empty .)
    LET             reduce using rule 119 (instruction_list -> empty .)
    VAR             reduce using rule 119 (instruction_list -> empty .)
    CONST           reduce using rule 119 (instruction_list -> empty .)
    FUNCTION        reduce using rule 119 (instruction_list -> empty .)
    ASYNC           reduce using rule 119 (instruction_list -> empty .)
    CONSOLE         reduce using rule 119 (instruction_list -> empty .)
    LBRACKET        reduce using rule 119 (instruction_list -> empty .)
    PROMPT          reduce using rule 119 (instruction_list -> empty .)
    NOT             reduce using rule 119 (instruction_list -> empty .)
    LPAREN          reduce using rule 119 (instruction_list -> empty .)
    IDENTIFIER      reduce using rule 119 (instruction_list -> empty .)
    NUMBER          reduce using rule 119 (instruction_list -> empty .)
    FLOAT           reduce using rule 119 (instruction_list -> empty .)
    STRING          reduce using rule 119 (instruction_list -> empty .)
    TRUE            reduce using rule 119 (instruction_list -> empty .)
    FALSE           reduce using rule 119 (instruction_list -> empty .)
    PLUSPLUS        reduce using rule 119 (instruction_list -> empty .)
    MINUSMINUS      reduce using rule 119 (instruction_list -> empty .)
    IF              reduce using rule 119 (instruction_list -> empty .)
    SWITCH          reduce using rule 119 (instruction_list -> empty .)
    WHILE           reduce using rule 119 (instruction_list -> empty .)
    FOR             reduce using rule 119 (instruction_list -> empty .)
    CLASS           reduce using rule 119 (instruction_list -> empty .)

  ! RBRACE          [ reduce using rule 119 (instruction_list -> empty .) ]


state 337

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function . RBRACE SEMICOLON

    RBRACE          shift and go to state 348


state 338

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE . body_function RBRACE
    (50) body_function -> . instruction_list
    (51) body_function -> . empty
    (117) instruction_list -> . instruction_list statement
    (118) instruction_list -> . statement
    (119) instruction_list -> . empty
    (120) empty -> .
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RBRACE          reduce using rule 120 (empty -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 120 (empty -> .) ]
  ! LBRACE          [ reduce using rule 120 (empty -> .) ]
  ! BREAK           [ reduce using rule 120 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! ASYNC           [ reduce using rule 120 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 120 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 120 (empty -> .) ]
  ! PROMPT          [ reduce using rule 120 (empty -> .) ]
  ! NOT             [ reduce using rule 120 (empty -> .) ]
  ! LPAREN          [ reduce using rule 120 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]
  ! NUMBER          [ reduce using rule 120 (empty -> .) ]
  ! FLOAT           [ reduce using rule 120 (empty -> .) ]
  ! STRING          [ reduce using rule 120 (empty -> .) ]
  ! TRUE            [ reduce using rule 120 (empty -> .) ]
  ! FALSE           [ reduce using rule 120 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 120 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 120 (empty -> .) ]
  ! IF              [ reduce using rule 120 (empty -> .) ]
  ! SWITCH          [ reduce using rule 120 (empty -> .) ]
  ! WHILE           [ reduce using rule 120 (empty -> .) ]
  ! FOR             [ reduce using rule 120 (empty -> .) ]
  ! CLASS           [ reduce using rule 120 (empty -> .) ]

    body_function                  shift and go to state 349
    instruction_list               shift and go to state 335
    empty                          shift and go to state 336
    statement                      shift and go to state 86
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 339

    (100) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression . RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression . RPAREN statement ELSE statement
    (98) controlEstructure -> IF LPAREN expression . RPAREN statement
    (99) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE statement
    (100) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression . RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIV expression
    (64) expression -> expression . MOD expression
    (65) expression -> expression . PLUS_ASSIGN expression
    (66) expression -> expression . MINUS_ASSIGN expression
    (67) expression -> expression . MULT_ASSIGN expression
    (68) expression -> expression . DIV_ASSIGN expression
    (69) expression -> expression . MOD_ASSIGN expression
    (70) expression -> expression . POT expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . NEQ expression
    (75) expression -> expression . STRICT_EQ expression
    (76) expression -> expression . STRICT_NEQ expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GT expression
    (79) expression -> expression . LE expression
    (80) expression -> expression . GE expression
    (84) expression -> expression . DOT IDENTIFIER
    (85) expression -> expression . LBRACKET expression RBRACKET
    (93) expression -> expression . PLUSPLUS
    (94) expression -> expression . MINUSMINUS

    RPAREN          shift and go to state 350
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    MULT_ASSIGN     shift and go to state 57
    DIV_ASSIGN      shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    POT             shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    EQ              shift and go to state 63
    NEQ             shift and go to state 64
    STRICT_EQ       shift and go to state 65
    STRICT_NEQ      shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 68
    LE              shift and go to state 69
    GE              shift and go to state 70
    DOT             shift and go to state 71
    LBRACKET        shift and go to state 72
    PLUSPLUS        shift and go to state 73
    MINUSMINUS      shift and go to state 74


state 340

    (131) controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .

    LET             reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    FUNCTION        reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    CONST           reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    ASYNC           reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    ENUM            reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    IF              reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    SWITCH          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    WHILE           reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    CLASS           reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    RETURN          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    LBRACE          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    BREAK           reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    CONTINUE        reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    INTERFACE       reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    IDENTIFIER      reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    LBRACKET        reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    PROMPT          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    NOT             reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    LPAREN          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    NUMBER          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    FLOAT           reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    STRING          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    TRUE            reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    FALSE           reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    PLUSPLUS        reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    MINUSMINUS      reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    CONSOLE         reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    VAR             reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    FOR             reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    $end            reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    RBRACE          reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    ELSE            reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    CASE            reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)
    DEFAULT         reduce using rule 131 (controlEstructure -> SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE .)


state 341

    (135) case -> CASE expression COLON . instruction_list
    (117) instruction_list -> . instruction_list statement
    (118) instruction_list -> . statement
    (119) instruction_list -> . empty
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (120) empty -> .
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    CASE            reduce using rule 120 (empty -> .)
    DEFAULT         reduce using rule 120 (empty -> .)
    RBRACE          reduce using rule 120 (empty -> .)
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 120 (empty -> .) ]
  ! LBRACE          [ reduce using rule 120 (empty -> .) ]
  ! BREAK           [ reduce using rule 120 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! ASYNC           [ reduce using rule 120 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 120 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 120 (empty -> .) ]
  ! PROMPT          [ reduce using rule 120 (empty -> .) ]
  ! NOT             [ reduce using rule 120 (empty -> .) ]
  ! LPAREN          [ reduce using rule 120 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]
  ! NUMBER          [ reduce using rule 120 (empty -> .) ]
  ! FLOAT           [ reduce using rule 120 (empty -> .) ]
  ! STRING          [ reduce using rule 120 (empty -> .) ]
  ! TRUE            [ reduce using rule 120 (empty -> .) ]
  ! FALSE           [ reduce using rule 120 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 120 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 120 (empty -> .) ]
  ! IF              [ reduce using rule 120 (empty -> .) ]
  ! SWITCH          [ reduce using rule 120 (empty -> .) ]
  ! WHILE           [ reduce using rule 120 (empty -> .) ]
  ! FOR             [ reduce using rule 120 (empty -> .) ]
  ! CLASS           [ reduce using rule 120 (empty -> .) ]

    expression                     shift and go to state 89
    instruction_list               shift and go to state 351
    statement                      shift and go to state 86
    empty                          shift and go to state 343
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 342

    (136) case -> DEFAULT COLON instruction_list .
    (117) instruction_list -> instruction_list . statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    CASE            reduce using rule 136 (case -> DEFAULT COLON instruction_list .)
    DEFAULT         reduce using rule 136 (case -> DEFAULT COLON instruction_list .)
    RBRACE          reduce using rule 136 (case -> DEFAULT COLON instruction_list .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    statement                      shift and go to state 156
    expression                     shift and go to state 89
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 343

    (119) instruction_list -> empty .

    RETURN          reduce using rule 119 (instruction_list -> empty .)
    LBRACE          reduce using rule 119 (instruction_list -> empty .)
    BREAK           reduce using rule 119 (instruction_list -> empty .)
    CONTINUE        reduce using rule 119 (instruction_list -> empty .)
    LET             reduce using rule 119 (instruction_list -> empty .)
    VAR             reduce using rule 119 (instruction_list -> empty .)
    CONST           reduce using rule 119 (instruction_list -> empty .)
    FUNCTION        reduce using rule 119 (instruction_list -> empty .)
    ASYNC           reduce using rule 119 (instruction_list -> empty .)
    CONSOLE         reduce using rule 119 (instruction_list -> empty .)
    LBRACKET        reduce using rule 119 (instruction_list -> empty .)
    PROMPT          reduce using rule 119 (instruction_list -> empty .)
    NOT             reduce using rule 119 (instruction_list -> empty .)
    LPAREN          reduce using rule 119 (instruction_list -> empty .)
    IDENTIFIER      reduce using rule 119 (instruction_list -> empty .)
    NUMBER          reduce using rule 119 (instruction_list -> empty .)
    FLOAT           reduce using rule 119 (instruction_list -> empty .)
    STRING          reduce using rule 119 (instruction_list -> empty .)
    TRUE            reduce using rule 119 (instruction_list -> empty .)
    FALSE           reduce using rule 119 (instruction_list -> empty .)
    PLUSPLUS        reduce using rule 119 (instruction_list -> empty .)
    MINUSMINUS      reduce using rule 119 (instruction_list -> empty .)
    IF              reduce using rule 119 (instruction_list -> empty .)
    SWITCH          reduce using rule 119 (instruction_list -> empty .)
    WHILE           reduce using rule 119 (instruction_list -> empty .)
    FOR             reduce using rule 119 (instruction_list -> empty .)
    CLASS           reduce using rule 119 (instruction_list -> empty .)
    CASE            reduce using rule 119 (instruction_list -> empty .)
    DEFAULT         reduce using rule 119 (instruction_list -> empty .)
    RBRACE          reduce using rule 119 (instruction_list -> empty .)


state 344

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE . push_loop instruction_list pop_loop RBRACE
    (28) push_loop -> .

    RETURN          reduce using rule 28 (push_loop -> .)
    LBRACE          reduce using rule 28 (push_loop -> .)
    BREAK           reduce using rule 28 (push_loop -> .)
    CONTINUE        reduce using rule 28 (push_loop -> .)
    LET             reduce using rule 28 (push_loop -> .)
    VAR             reduce using rule 28 (push_loop -> .)
    CONST           reduce using rule 28 (push_loop -> .)
    FUNCTION        reduce using rule 28 (push_loop -> .)
    ASYNC           reduce using rule 28 (push_loop -> .)
    CONSOLE         reduce using rule 28 (push_loop -> .)
    LBRACKET        reduce using rule 28 (push_loop -> .)
    PROMPT          reduce using rule 28 (push_loop -> .)
    NOT             reduce using rule 28 (push_loop -> .)
    LPAREN          reduce using rule 28 (push_loop -> .)
    IDENTIFIER      reduce using rule 28 (push_loop -> .)
    NUMBER          reduce using rule 28 (push_loop -> .)
    FLOAT           reduce using rule 28 (push_loop -> .)
    STRING          reduce using rule 28 (push_loop -> .)
    TRUE            reduce using rule 28 (push_loop -> .)
    FALSE           reduce using rule 28 (push_loop -> .)
    PLUSPLUS        reduce using rule 28 (push_loop -> .)
    MINUSMINUS      reduce using rule 28 (push_loop -> .)
    IF              reduce using rule 28 (push_loop -> .)
    SWITCH          reduce using rule 28 (push_loop -> .)
    WHILE           reduce using rule 28 (push_loop -> .)
    FOR             reduce using rule 28 (push_loop -> .)
    CLASS           reduce using rule 28 (push_loop -> .)
    RBRACE          reduce using rule 28 (push_loop -> .)

    push_loop                      shift and go to state 352

state 345

    (33) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement . pop_loop
    (29) pop_loop -> .

    LET             reduce using rule 29 (pop_loop -> .)
    FUNCTION        reduce using rule 29 (pop_loop -> .)
    CONST           reduce using rule 29 (pop_loop -> .)
    ASYNC           reduce using rule 29 (pop_loop -> .)
    ENUM            reduce using rule 29 (pop_loop -> .)
    IF              reduce using rule 29 (pop_loop -> .)
    SWITCH          reduce using rule 29 (pop_loop -> .)
    WHILE           reduce using rule 29 (pop_loop -> .)
    CLASS           reduce using rule 29 (pop_loop -> .)
    RETURN          reduce using rule 29 (pop_loop -> .)
    LBRACE          reduce using rule 29 (pop_loop -> .)
    BREAK           reduce using rule 29 (pop_loop -> .)
    CONTINUE        reduce using rule 29 (pop_loop -> .)
    INTERFACE       reduce using rule 29 (pop_loop -> .)
    IDENTIFIER      reduce using rule 29 (pop_loop -> .)
    LBRACKET        reduce using rule 29 (pop_loop -> .)
    PROMPT          reduce using rule 29 (pop_loop -> .)
    NOT             reduce using rule 29 (pop_loop -> .)
    LPAREN          reduce using rule 29 (pop_loop -> .)
    NUMBER          reduce using rule 29 (pop_loop -> .)
    FLOAT           reduce using rule 29 (pop_loop -> .)
    STRING          reduce using rule 29 (pop_loop -> .)
    TRUE            reduce using rule 29 (pop_loop -> .)
    FALSE           reduce using rule 29 (pop_loop -> .)
    PLUSPLUS        reduce using rule 29 (pop_loop -> .)
    MINUSMINUS      reduce using rule 29 (pop_loop -> .)
    CONSOLE         reduce using rule 29 (pop_loop -> .)
    VAR             reduce using rule 29 (pop_loop -> .)
    FOR             reduce using rule 29 (pop_loop -> .)
    $end            reduce using rule 29 (pop_loop -> .)
    RBRACE          reduce using rule 29 (pop_loop -> .)
    ELSE            reduce using rule 29 (pop_loop -> .)
    CASE            reduce using rule 29 (pop_loop -> .)
    DEFAULT         reduce using rule 29 (pop_loop -> .)

    pop_loop                       shift and go to state 353

state 346

    (23) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 354


state 347

    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .

    LET             reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FUNCTION        reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONST           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ASYNC           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ENUM            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IF              reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    SWITCH          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    WHILE           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CLASS           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RETURN          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACE          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    BREAK           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONTINUE        reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    INTERFACE       reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IDENTIFIER      reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACKET        reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PROMPT          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NOT             reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LPAREN          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NUMBER          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FLOAT           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    STRING          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    TRUE            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FALSE           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PLUSPLUS        reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    MINUSMINUS      reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONSOLE         reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    VAR             reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FOR             reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    $end            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RBRACE          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ELSE            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CASE            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    DEFAULT         reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)


state 348

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 355


state 349

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function . RBRACE

    RBRACE          shift and go to state 356


state 350

    (100) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN . statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN . statement ELSE statement
    (98) controlEstructure -> IF LPAREN expression RPAREN . statement
    (99) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE statement
    (100) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN . statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 357
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 351

    (135) case -> CASE expression COLON instruction_list .
    (117) instruction_list -> instruction_list . statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    CASE            reduce using rule 135 (case -> CASE expression COLON instruction_list .)
    DEFAULT         reduce using rule 135 (case -> CASE expression COLON instruction_list .)
    RBRACE          reduce using rule 135 (case -> CASE expression COLON instruction_list .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 156
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 352

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop . instruction_list pop_loop RBRACE
    (117) instruction_list -> . instruction_list statement
    (118) instruction_list -> . statement
    (119) instruction_list -> . empty
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (120) empty -> .
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PROMPT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    RBRACE          reduce using rule 120 (empty -> .)
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

  ! RETURN          [ reduce using rule 120 (empty -> .) ]
  ! LBRACE          [ reduce using rule 120 (empty -> .) ]
  ! BREAK           [ reduce using rule 120 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 120 (empty -> .) ]
  ! LET             [ reduce using rule 120 (empty -> .) ]
  ! VAR             [ reduce using rule 120 (empty -> .) ]
  ! CONST           [ reduce using rule 120 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 120 (empty -> .) ]
  ! ASYNC           [ reduce using rule 120 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 120 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 120 (empty -> .) ]
  ! PROMPT          [ reduce using rule 120 (empty -> .) ]
  ! NOT             [ reduce using rule 120 (empty -> .) ]
  ! LPAREN          [ reduce using rule 120 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 120 (empty -> .) ]
  ! NUMBER          [ reduce using rule 120 (empty -> .) ]
  ! FLOAT           [ reduce using rule 120 (empty -> .) ]
  ! STRING          [ reduce using rule 120 (empty -> .) ]
  ! TRUE            [ reduce using rule 120 (empty -> .) ]
  ! FALSE           [ reduce using rule 120 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 120 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 120 (empty -> .) ]
  ! IF              [ reduce using rule 120 (empty -> .) ]
  ! SWITCH          [ reduce using rule 120 (empty -> .) ]
  ! WHILE           [ reduce using rule 120 (empty -> .) ]
  ! FOR             [ reduce using rule 120 (empty -> .) ]
  ! CLASS           [ reduce using rule 120 (empty -> .) ]

    expression                     shift and go to state 89
    instruction_list               shift and go to state 358
    statement                      shift and go to state 86
    empty                          shift and go to state 343
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 353

    (33) forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .

    LET             reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FUNCTION        reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CONST           reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    ASYNC           reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    ENUM            reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    IF              reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    SWITCH          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    WHILE           reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CLASS           reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    RETURN          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    LBRACE          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    BREAK           reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CONTINUE        reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    INTERFACE       reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    IDENTIFIER      reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    LBRACKET        reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    PROMPT          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    NOT             reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    LPAREN          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    NUMBER          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FLOAT           reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    STRING          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    TRUE            reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FALSE           reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    PLUSPLUS        reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    MINUSMINUS      reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CONSOLE         reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    VAR             reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    FOR             reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    $end            reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    RBRACE          reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    ELSE            reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    CASE            reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)
    DEFAULT         reduce using rule 33 (forEstructure -> FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop .)


state 354

    (23) declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .

    LET             reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONST           reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ASYNC           reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ENUM            reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    IF              reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    WHILE           reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CLASS           reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    RETURN          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LBRACE          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    BREAK           reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LBRACKET        reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    PROMPT          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    NOT             reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    STRING          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    TRUE            reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FALSE           reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    PLUSPLUS        reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    MINUSMINUS      reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CONSOLE         reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    VAR             reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    FOR             reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    $end            reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    ELSE            reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    CASE            reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 23 (declaracion -> LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON .)


state 355

    (144) arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .

    LET             reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FUNCTION        reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONST           reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ASYNC           reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ENUM            reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    IF              reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    SWITCH          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    WHILE           reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CLASS           reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    RETURN          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LBRACE          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    BREAK           reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONTINUE        reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    INTERFACE       reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LBRACKET        reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    PROMPT          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    NOT             reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    LPAREN          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    NUMBER          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FLOAT           reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    STRING          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    TRUE            reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FALSE           reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    PLUSPLUS        reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    MINUSMINUS      reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CONSOLE         reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    VAR             reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    FOR             reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    $end            reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    RBRACE          reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    ELSE            reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    CASE            reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 144 (arrow_function -> CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON .)


state 356

    (142) async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .

    LET             reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FUNCTION        reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONST           reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ASYNC           reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ENUM            reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IF              reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    SWITCH          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    WHILE           reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CLASS           reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RETURN          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACE          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    BREAK           reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONTINUE        reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    INTERFACE       reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    IDENTIFIER      reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LBRACKET        reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PROMPT          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NOT             reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    LPAREN          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    NUMBER          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FLOAT           reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    STRING          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    TRUE            reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FALSE           reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    PLUSPLUS        reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    MINUSMINUS      reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CONSOLE         reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    VAR             reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    FOR             reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    $end            reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    RBRACE          reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    ELSE            reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    CASE            reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)
    DEFAULT         reduce using rule 142 (async_function -> ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE .)


state 357

    (100) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .
    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement . ELSE statement
    (98) controlEstructure -> IF LPAREN expression RPAREN statement .
    (99) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE statement
    (100) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement . ELSE IF LPAREN expression RPAREN statement ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONST resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for ASYNC resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for ENUM resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for IF resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for PROMPT resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for NOT resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for NUMBER resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for STRING resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for VAR resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for FOR resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for $end resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for CASE resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 359
    LET             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ASYNC           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    INTERFACE       reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PROMPT          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CONSOLE         reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .)

  ! LET             [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FUNCTION        [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONST           [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ASYNC           [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ENUM            [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! IF              [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! SWITCH          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! WHILE           [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CLASS           [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! RETURN          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LBRACE          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! BREAK           [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONTINUE        [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! INTERFACE       [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! IDENTIFIER      [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LBRACKET        [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! PROMPT          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! NOT             [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! LPAREN          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! NUMBER          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FLOAT           [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! STRING          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! TRUE            [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FALSE           [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! PLUSPLUS        [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! MINUSMINUS      [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CONSOLE         [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! VAR             [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! FOR             [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! $end            [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! RBRACE          [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! CASE            [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! DEFAULT         [ reduce using rule 100 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 98 (controlEstructure -> IF LPAREN expression RPAREN statement .) ]


state 358

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list . pop_loop RBRACE
    (117) instruction_list -> instruction_list . statement
    (29) pop_loop -> .
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    RBRACE          reduce using rule 29 (pop_loop -> .)
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    pop_loop                       shift and go to state 360
    statement                      shift and go to state 156
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 359

    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE . statement
    (99) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . statement
    (100) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement
    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE . IF LPAREN expression RPAREN statement ELSE statement
    (46) statement -> . RETURN expression SEMICOLON
    (102) statement -> . LBRACE instruction_list RBRACE
    (103) statement -> . letAssignment
    (104) statement -> . varAssignment
    (105) statement -> . constAssignment
    (106) statement -> . declaracion
    (107) statement -> . function
    (108) statement -> . arrow_function
    (109) statement -> . async_function
    (110) statement -> . consolelog
    (111) statement -> . expression SEMICOLON
    (112) statement -> . controlEstructure
    (113) statement -> . forEstructure
    (114) statement -> . RETURN SEMICOLON
    (115) statement -> . class_definition
    (116) statement -> . LBRACE RBRACE
    (137) statement -> . BREAK SEMICOLON
    (138) statement -> . CONTINUE SEMICOLON
    (18) letAssignment -> . LET IDENTIFIER COLON type EQUAL expression SEMICOLON
    (19) letAssignment -> . LET IDENTIFIER EQUAL expression SEMICOLON
    (20) letAssignment -> . LET IDENTIFIER COLON type SEMICOLON
    (21) varAssignment -> . VAR IDENTIFIER COLON type EQUAL expression SEMICOLON
    (22) varAssignment -> . VAR IDENTIFIER EQUAL expression SEMICOLON
    (121) constAssignment -> . CONST IDENTIFIER COLON type EQUAL expression SEMICOLON
    (122) constAssignment -> . CONST IDENTIFIER EQUAL expression SEMICOLON
    (23) declaracion -> . LET IDENTIFIER COLON type LBRACKET RBRACKET EQUAL LBRACKET lista_expresiones_opt RBRACKET SEMICOLON
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (144) arrow_function -> . CONST IDENTIFIER EQUAL LPAREN parameters RPAREN ARROW LBRACE body_function RBRACE SEMICOLON
    (142) async_function -> . ASYNC FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON type LBRACE body_function RBRACE
    (97) consolelog -> . CONSOLE DOT LOG LPAREN lista_expresiones_opt RPAREN SEMICOLON
    (53) expression -> . LBRACKET expression COMMA expression RBRACKET
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIV expression
    (64) expression -> . expression MOD expression
    (65) expression -> . expression PLUS_ASSIGN expression
    (66) expression -> . expression MINUS_ASSIGN expression
    (67) expression -> . expression MULT_ASSIGN expression
    (68) expression -> . expression DIV_ASSIGN expression
    (69) expression -> . expression MOD_ASSIGN expression
    (70) expression -> . expression POT expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression NEQ expression
    (75) expression -> . expression STRICT_EQ expression
    (76) expression -> . expression STRICT_NEQ expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GT expression
    (79) expression -> . expression LE expression
    (80) expression -> . expression GE expression
    (81) expression -> . PROMPT LPAREN STRING RPAREN
    (82) expression -> . NOT expression
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . expression DOT IDENTIFIER
    (85) expression -> . expression LBRACKET expression RBRACKET
    (86) expression -> . IDENTIFIER LPAREN lista_expresiones_opt RPAREN
    (87) expression -> . NUMBER
    (88) expression -> . FLOAT
    (89) expression -> . STRING
    (90) expression -> . IDENTIFIER
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . expression PLUSPLUS
    (94) expression -> . expression MINUSMINUS
    (95) expression -> . PLUSPLUS expression
    (96) expression -> . MINUSMINUS expression
    (150) expression -> . LBRACE object_properties RBRACE
    (98) controlEstructure -> . IF LPAREN expression RPAREN statement
    (99) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE statement
    (100) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement
    (101) controlEstructure -> . IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement
    (131) controlEstructure -> . SWITCH LPAREN expression RPAREN LBRACE push_switch case_list pop_switch RBRACE
    (143) controlEstructure -> . WHILE LPAREN expression RPAREN push_loop statement pop_loop
    (32) forEstructure -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE
    (33) forEstructure -> . FOR LPAREN CONST IDENTIFIER OF IDENTIFIER RPAREN push_loop statement pop_loop
    (123) class_definition -> . CLASS IDENTIFIER LBRACE class_body RBRACE

    IF              shift and go to state 296
    RETURN          shift and go to state 30
    LBRACE          shift and go to state 22
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34
    LET             shift and go to state 17
    VAR             shift and go to state 46
    CONST           shift and go to state 100
    FUNCTION        shift and go to state 20
    ASYNC           shift and go to state 24
    CONSOLE         shift and go to state 45
    LBRACKET        shift and go to state 19
    PROMPT          shift and go to state 36
    NOT             shift and go to state 38
    LPAREN          shift and go to state 21
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 47
    CLASS           shift and go to state 29

    expression                     shift and go to state 89
    statement                      shift and go to state 361
    letAssignment                  shift and go to state 90
    varAssignment                  shift and go to state 31
    constAssignment                shift and go to state 91
    declaracion                    shift and go to state 92
    function                       shift and go to state 93
    arrow_function                 shift and go to state 94
    async_function                 shift and go to state 95
    consolelog                     shift and go to state 96
    controlEstructure              shift and go to state 97
    forEstructure                  shift and go to state 32
    class_definition               shift and go to state 98

state 360

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop . RBRACE

    RBRACE          shift and go to state 362


state 361

    (101) controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .
    (99) controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .

  ! reduce/reduce conflict for ELSE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LET resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONST resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for ASYNC resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for ENUM resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for IF resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for PROMPT resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for NOT resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for NUMBER resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for STRING resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for VAR resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for FOR resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for $end resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for CASE resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LET             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASYNC           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    INTERFACE       reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACKET        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PROMPT          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONSOLE         reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 99 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement .)

  ! LET             [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FUNCTION        [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONST           [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ASYNC           [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ENUM            [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! IF              [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! SWITCH          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CLASS           [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! RETURN          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LBRACE          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! BREAK           [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONTINUE        [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! INTERFACE       [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! IDENTIFIER      [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LBRACKET        [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! PROMPT          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! NOT             [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! LPAREN          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! NUMBER          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FLOAT           [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! STRING          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! TRUE            [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FALSE           [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! PLUSPLUS        [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! MINUSMINUS      [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CONSOLE         [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! VAR             [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! FOR             [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! $end            [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! RBRACE          [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! ELSE            [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! CASE            [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]
  ! DEFAULT         [ reduce using rule 101 (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement .) ]


state 362

    (32) forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .

    LET             reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FUNCTION        reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CONST           reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    ASYNC           reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    ENUM            reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    IF              reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    SWITCH          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    WHILE           reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CLASS           reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    RETURN          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    LBRACE          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    BREAK           reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CONTINUE        reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    INTERFACE       reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    IDENTIFIER      reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    LBRACKET        reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    PROMPT          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    NOT             reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    LPAREN          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    NUMBER          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FLOAT           reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    STRING          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    TRUE            reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FALSE           reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    PLUSPLUS        reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    MINUSMINUS      reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CONSOLE         reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    VAR             reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    FOR             reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    $end            reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    RBRACE          reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    ELSE            reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    CASE            reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)
    DEFAULT         reduce using rule 32 (forEstructure -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE push_loop instruction_list pop_loop RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACE in state 22 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 22 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 22 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 22 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 22 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 22 resolved as shift
WARNING: shift/reduce conflict for LET in state 22 resolved as shift
WARNING: shift/reduce conflict for VAR in state 22 resolved as shift
WARNING: shift/reduce conflict for CONST in state 22 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 22 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 22 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 22 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 22 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 22 resolved as shift
WARNING: shift/reduce conflict for NOT in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 22 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 22 resolved as shift
WARNING: shift/reduce conflict for STRING in state 22 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 22 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for IF in state 22 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 22 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 22 resolved as shift
WARNING: shift/reduce conflict for FOR in state 22 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV in state 114 resolved as shift
WARNING: shift/reduce conflict for MOD in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for POT in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for OR in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for LE in state 114 resolved as shift
WARNING: shift/reduce conflict for GE in state 114 resolved as shift
WARNING: shift/reduce conflict for DOT in state 114 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 115 resolved as shift
WARNING: shift/reduce conflict for POT in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for LE in state 115 resolved as shift
WARNING: shift/reduce conflict for GE in state 115 resolved as shift
WARNING: shift/reduce conflict for DOT in state 115 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for POT in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for LT in state 116 resolved as shift
WARNING: shift/reduce conflict for GT in state 116 resolved as shift
WARNING: shift/reduce conflict for LE in state 116 resolved as shift
WARNING: shift/reduce conflict for GE in state 116 resolved as shift
WARNING: shift/reduce conflict for DOT in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 120 resolved as shift
WARNING: shift/reduce conflict for POT in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for DOT in state 120 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for POT in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for LT in state 121 resolved as shift
WARNING: shift/reduce conflict for GT in state 121 resolved as shift
WARNING: shift/reduce conflict for LE in state 121 resolved as shift
WARNING: shift/reduce conflict for GE in state 121 resolved as shift
WARNING: shift/reduce conflict for DOT in state 121 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for POT in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for LT in state 122 resolved as shift
WARNING: shift/reduce conflict for GT in state 122 resolved as shift
WARNING: shift/reduce conflict for LE in state 122 resolved as shift
WARNING: shift/reduce conflict for GE in state 122 resolved as shift
WARNING: shift/reduce conflict for DOT in state 122 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV in state 123 resolved as shift
WARNING: shift/reduce conflict for MOD in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for POT in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for LT in state 123 resolved as shift
WARNING: shift/reduce conflict for GT in state 123 resolved as shift
WARNING: shift/reduce conflict for LE in state 123 resolved as shift
WARNING: shift/reduce conflict for GE in state 123 resolved as shift
WARNING: shift/reduce conflict for DOT in state 123 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV in state 124 resolved as shift
WARNING: shift/reduce conflict for MOD in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 124 resolved as shift
WARNING: shift/reduce conflict for POT in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for LT in state 124 resolved as shift
WARNING: shift/reduce conflict for GT in state 124 resolved as shift
WARNING: shift/reduce conflict for LE in state 124 resolved as shift
WARNING: shift/reduce conflict for GE in state 124 resolved as shift
WARNING: shift/reduce conflict for DOT in state 124 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV in state 125 resolved as shift
WARNING: shift/reduce conflict for MOD in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 125 resolved as shift
WARNING: shift/reduce conflict for POT in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 125 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 125 resolved as shift
WARNING: shift/reduce conflict for LT in state 125 resolved as shift
WARNING: shift/reduce conflict for GT in state 125 resolved as shift
WARNING: shift/reduce conflict for LE in state 125 resolved as shift
WARNING: shift/reduce conflict for GE in state 125 resolved as shift
WARNING: shift/reduce conflict for DOT in state 125 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for POT in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for LE in state 126 resolved as shift
WARNING: shift/reduce conflict for GE in state 126 resolved as shift
WARNING: shift/reduce conflict for DOT in state 126 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIV in state 127 resolved as shift
WARNING: shift/reduce conflict for MOD in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for POT in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 127 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for LE in state 127 resolved as shift
WARNING: shift/reduce conflict for GE in state 127 resolved as shift
WARNING: shift/reduce conflict for DOT in state 127 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIV in state 128 resolved as shift
WARNING: shift/reduce conflict for MOD in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 128 resolved as shift
WARNING: shift/reduce conflict for POT in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for EQ in state 128 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 128 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 128 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 128 resolved as shift
WARNING: shift/reduce conflict for LT in state 128 resolved as shift
WARNING: shift/reduce conflict for GT in state 128 resolved as shift
WARNING: shift/reduce conflict for LE in state 128 resolved as shift
WARNING: shift/reduce conflict for GE in state 128 resolved as shift
WARNING: shift/reduce conflict for DOT in state 128 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIV in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 129 resolved as shift
WARNING: shift/reduce conflict for POT in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for EQ in state 129 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 129 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for LT in state 129 resolved as shift
WARNING: shift/reduce conflict for GT in state 129 resolved as shift
WARNING: shift/reduce conflict for LE in state 129 resolved as shift
WARNING: shift/reduce conflict for GE in state 129 resolved as shift
WARNING: shift/reduce conflict for DOT in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for POT in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for EQ in state 130 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 130 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 130 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 130 resolved as shift
WARNING: shift/reduce conflict for LT in state 130 resolved as shift
WARNING: shift/reduce conflict for GT in state 130 resolved as shift
WARNING: shift/reduce conflict for LE in state 130 resolved as shift
WARNING: shift/reduce conflict for GE in state 130 resolved as shift
WARNING: shift/reduce conflict for DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIV in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for POT in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 131 resolved as shift
WARNING: shift/reduce conflict for EQ in state 131 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 131 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 131 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 131 resolved as shift
WARNING: shift/reduce conflict for LT in state 131 resolved as shift
WARNING: shift/reduce conflict for GT in state 131 resolved as shift
WARNING: shift/reduce conflict for LE in state 131 resolved as shift
WARNING: shift/reduce conflict for GE in state 131 resolved as shift
WARNING: shift/reduce conflict for DOT in state 131 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for DIV in state 132 resolved as shift
WARNING: shift/reduce conflict for MOD in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for POT in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 132 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 132 resolved as shift
WARNING: shift/reduce conflict for LT in state 132 resolved as shift
WARNING: shift/reduce conflict for GT in state 132 resolved as shift
WARNING: shift/reduce conflict for LE in state 132 resolved as shift
WARNING: shift/reduce conflict for GE in state 132 resolved as shift
WARNING: shift/reduce conflict for DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for DIV in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 133 resolved as shift
WARNING: shift/reduce conflict for POT in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for EQ in state 133 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 133 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for LT in state 133 resolved as shift
WARNING: shift/reduce conflict for GT in state 133 resolved as shift
WARNING: shift/reduce conflict for LE in state 133 resolved as shift
WARNING: shift/reduce conflict for GE in state 133 resolved as shift
WARNING: shift/reduce conflict for DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
WARNING: shift/reduce conflict for DIV in state 134 resolved as shift
WARNING: shift/reduce conflict for MOD in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for POT in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for EQ in state 134 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 134 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for LT in state 134 resolved as shift
WARNING: shift/reduce conflict for GT in state 134 resolved as shift
WARNING: shift/reduce conflict for LE in state 134 resolved as shift
WARNING: shift/reduce conflict for GE in state 134 resolved as shift
WARNING: shift/reduce conflict for DOT in state 134 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 135 resolved as shift
WARNING: shift/reduce conflict for DIV in state 135 resolved as shift
WARNING: shift/reduce conflict for MOD in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 135 resolved as shift
WARNING: shift/reduce conflict for POT in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for LT in state 135 resolved as shift
WARNING: shift/reduce conflict for GT in state 135 resolved as shift
WARNING: shift/reduce conflict for LE in state 135 resolved as shift
WARNING: shift/reduce conflict for GE in state 135 resolved as shift
WARNING: shift/reduce conflict for DOT in state 135 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for DIV in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 136 resolved as shift
WARNING: shift/reduce conflict for POT in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for LT in state 136 resolved as shift
WARNING: shift/reduce conflict for GT in state 136 resolved as shift
WARNING: shift/reduce conflict for LE in state 136 resolved as shift
WARNING: shift/reduce conflict for GE in state 136 resolved as shift
WARNING: shift/reduce conflict for DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 137 resolved as shift
WARNING: shift/reduce conflict for DIV in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 137 resolved as shift
WARNING: shift/reduce conflict for POT in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for LT in state 137 resolved as shift
WARNING: shift/reduce conflict for GT in state 137 resolved as shift
WARNING: shift/reduce conflict for LE in state 137 resolved as shift
WARNING: shift/reduce conflict for GE in state 137 resolved as shift
WARNING: shift/reduce conflict for DOT in state 137 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 138 resolved as shift
WARNING: shift/reduce conflict for DIV in state 138 resolved as shift
WARNING: shift/reduce conflict for MOD in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 138 resolved as shift
WARNING: shift/reduce conflict for POT in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for LT in state 138 resolved as shift
WARNING: shift/reduce conflict for GT in state 138 resolved as shift
WARNING: shift/reduce conflict for LE in state 138 resolved as shift
WARNING: shift/reduce conflict for GE in state 138 resolved as shift
WARNING: shift/reduce conflict for DOT in state 138 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 139 resolved as shift
WARNING: shift/reduce conflict for DIV in state 139 resolved as shift
WARNING: shift/reduce conflict for MOD in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 139 resolved as shift
WARNING: shift/reduce conflict for POT in state 139 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 139 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 139 resolved as shift
WARNING: shift/reduce conflict for LT in state 139 resolved as shift
WARNING: shift/reduce conflict for GT in state 139 resolved as shift
WARNING: shift/reduce conflict for LE in state 139 resolved as shift
WARNING: shift/reduce conflict for GE in state 139 resolved as shift
WARNING: shift/reduce conflict for DOT in state 139 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 140 resolved as shift
WARNING: shift/reduce conflict for DIV in state 140 resolved as shift
WARNING: shift/reduce conflict for MOD in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 140 resolved as shift
WARNING: shift/reduce conflict for POT in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for EQ in state 140 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 140 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 140 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 140 resolved as shift
WARNING: shift/reduce conflict for LT in state 140 resolved as shift
WARNING: shift/reduce conflict for GT in state 140 resolved as shift
WARNING: shift/reduce conflict for LE in state 140 resolved as shift
WARNING: shift/reduce conflict for GE in state 140 resolved as shift
WARNING: shift/reduce conflict for DOT in state 140 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 169 resolved as shift
WARNING: shift/reduce conflict for LET in state 169 resolved as shift
WARNING: shift/reduce conflict for VAR in state 169 resolved as shift
WARNING: shift/reduce conflict for CONST in state 169 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 171 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 248 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 267 resolved as shift
WARNING: shift/reduce conflict for CASE in state 277 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 277 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 318 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 318 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 318 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 318 resolved as shift
WARNING: shift/reduce conflict for LET in state 318 resolved as shift
WARNING: shift/reduce conflict for VAR in state 318 resolved as shift
WARNING: shift/reduce conflict for CONST in state 318 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 318 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 318 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 318 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 318 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 318 resolved as shift
WARNING: shift/reduce conflict for NOT in state 318 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 318 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 318 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 318 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 318 resolved as shift
WARNING: shift/reduce conflict for STRING in state 318 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 318 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 318 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 318 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 318 resolved as shift
WARNING: shift/reduce conflict for IF in state 318 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 318 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 318 resolved as shift
WARNING: shift/reduce conflict for FOR in state 318 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 318 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 319 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 319 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 319 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 319 resolved as shift
WARNING: shift/reduce conflict for LET in state 319 resolved as shift
WARNING: shift/reduce conflict for VAR in state 319 resolved as shift
WARNING: shift/reduce conflict for CONST in state 319 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 319 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 319 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 319 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 319 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 319 resolved as shift
WARNING: shift/reduce conflict for NOT in state 319 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 319 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 319 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 319 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 319 resolved as shift
WARNING: shift/reduce conflict for STRING in state 319 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 319 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 319 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 319 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 319 resolved as shift
WARNING: shift/reduce conflict for IF in state 319 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 319 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 319 resolved as shift
WARNING: shift/reduce conflict for FOR in state 319 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 319 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 325 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 325 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 325 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 325 resolved as shift
WARNING: shift/reduce conflict for LET in state 325 resolved as shift
WARNING: shift/reduce conflict for VAR in state 325 resolved as shift
WARNING: shift/reduce conflict for CONST in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 325 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 325 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 325 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 325 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 325 resolved as shift
WARNING: shift/reduce conflict for NOT in state 325 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 325 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 325 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 325 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 325 resolved as shift
WARNING: shift/reduce conflict for STRING in state 325 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 325 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 325 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 325 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 325 resolved as shift
WARNING: shift/reduce conflict for IF in state 325 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 325 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 325 resolved as shift
WARNING: shift/reduce conflict for FOR in state 325 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 325 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 329 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 329 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 329 resolved as shift
WARNING: shift/reduce conflict for DIV in state 329 resolved as shift
WARNING: shift/reduce conflict for MOD in state 329 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 329 resolved as shift
WARNING: shift/reduce conflict for POT in state 329 resolved as shift
WARNING: shift/reduce conflict for AND in state 329 resolved as shift
WARNING: shift/reduce conflict for OR in state 329 resolved as shift
WARNING: shift/reduce conflict for EQ in state 329 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 329 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 329 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 329 resolved as shift
WARNING: shift/reduce conflict for LT in state 329 resolved as shift
WARNING: shift/reduce conflict for GT in state 329 resolved as shift
WARNING: shift/reduce conflict for LE in state 329 resolved as shift
WARNING: shift/reduce conflict for GE in state 329 resolved as shift
WARNING: shift/reduce conflict for DOT in state 329 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 329 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 329 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 329 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 330 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 330 resolved as shift
WARNING: shift/reduce conflict for DIV in state 330 resolved as shift
WARNING: shift/reduce conflict for MOD in state 330 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for MULT_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for DIV_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for MOD_ASSIGN in state 330 resolved as shift
WARNING: shift/reduce conflict for POT in state 330 resolved as shift
WARNING: shift/reduce conflict for AND in state 330 resolved as shift
WARNING: shift/reduce conflict for OR in state 330 resolved as shift
WARNING: shift/reduce conflict for EQ in state 330 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 330 resolved as shift
WARNING: shift/reduce conflict for STRICT_EQ in state 330 resolved as shift
WARNING: shift/reduce conflict for STRICT_NEQ in state 330 resolved as shift
WARNING: shift/reduce conflict for LT in state 330 resolved as shift
WARNING: shift/reduce conflict for GT in state 330 resolved as shift
WARNING: shift/reduce conflict for LE in state 330 resolved as shift
WARNING: shift/reduce conflict for GE in state 330 resolved as shift
WARNING: shift/reduce conflict for DOT in state 330 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 330 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 330 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 338 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 338 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 338 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 338 resolved as shift
WARNING: shift/reduce conflict for LET in state 338 resolved as shift
WARNING: shift/reduce conflict for VAR in state 338 resolved as shift
WARNING: shift/reduce conflict for CONST in state 338 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 338 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 338 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 338 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 338 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 338 resolved as shift
WARNING: shift/reduce conflict for NOT in state 338 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 338 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 338 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 338 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 338 resolved as shift
WARNING: shift/reduce conflict for STRING in state 338 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 338 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 338 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 338 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 338 resolved as shift
WARNING: shift/reduce conflict for IF in state 338 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 338 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 338 resolved as shift
WARNING: shift/reduce conflict for FOR in state 338 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 338 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 341 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 341 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 341 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 341 resolved as shift
WARNING: shift/reduce conflict for LET in state 341 resolved as shift
WARNING: shift/reduce conflict for VAR in state 341 resolved as shift
WARNING: shift/reduce conflict for CONST in state 341 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 341 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 341 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 341 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 341 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 341 resolved as shift
WARNING: shift/reduce conflict for NOT in state 341 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 341 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 341 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 341 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 341 resolved as shift
WARNING: shift/reduce conflict for STRING in state 341 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 341 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 341 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 341 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 341 resolved as shift
WARNING: shift/reduce conflict for IF in state 341 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 341 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 341 resolved as shift
WARNING: shift/reduce conflict for FOR in state 341 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 341 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 352 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 352 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 352 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 352 resolved as shift
WARNING: shift/reduce conflict for LET in state 352 resolved as shift
WARNING: shift/reduce conflict for VAR in state 352 resolved as shift
WARNING: shift/reduce conflict for CONST in state 352 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 352 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 352 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 352 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 352 resolved as shift
WARNING: shift/reduce conflict for PROMPT in state 352 resolved as shift
WARNING: shift/reduce conflict for NOT in state 352 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 352 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 352 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 352 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 352 resolved as shift
WARNING: shift/reduce conflict for STRING in state 352 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 352 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 352 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 352 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 352 resolved as shift
WARNING: shift/reduce conflict for IF in state 352 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 352 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 352 resolved as shift
WARNING: shift/reduce conflict for FOR in state 352 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 352 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 357 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 357 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (element -> letAssignment)
WARNING: rejected rule (statement -> letAssignment) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (element -> declaracion)
WARNING: rejected rule (statement -> declaracion) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (element -> function)
WARNING: rejected rule (statement -> function) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (element -> arrow_function)
WARNING: rejected rule (statement -> arrow_function) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (element -> async_function)
WARNING: rejected rule (statement -> async_function) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (element -> constAssignment)
WARNING: rejected rule (statement -> constAssignment) in state 8
WARNING: reduce/reduce conflict in state 10 resolved using rule (element -> controlEstructure)
WARNING: rejected rule (statement -> controlEstructure) in state 10
WARNING: reduce/reduce conflict in state 11 resolved using rule (element -> class_definition)
WARNING: rejected rule (statement -> class_definition) in state 11
WARNING: reduce/reduce conflict in state 16 resolved using rule (element -> consolelog)
WARNING: rejected rule (statement -> consolelog) in state 16
WARNING: reduce/reduce conflict in state 49 resolved using rule (element -> expression SEMICOLON)
WARNING: rejected rule (statement -> expression SEMICOLON) in state 49
WARNING: reduce/reduce conflict in state 87 resolved using rule (instruction_list -> empty)
WARNING: rejected rule (object_properties -> empty) in state 87
WARNING: reduce/reduce conflict in state 326 resolved using rule (for_update -> expression PLUSPLUS)
WARNING: rejected rule (expression -> expression PLUSPLUS) in state 326
WARNING: reduce/reduce conflict in state 327 resolved using rule (for_update -> expression MINUSMINUS)
WARNING: rejected rule (expression -> expression MINUSMINUS) in state 327
WARNING: reduce/reduce conflict in state 329 resolved using rule (for_update -> PLUSPLUS expression)
WARNING: rejected rule (expression -> PLUSPLUS expression) in state 329
WARNING: reduce/reduce conflict in state 330 resolved using rule (for_update -> MINUSMINUS expression)
WARNING: rejected rule (expression -> MINUSMINUS expression) in state 330
WARNING: reduce/reduce conflict in state 336 resolved using rule (body_function -> empty)
WARNING: rejected rule (instruction_list -> empty) in state 336
WARNING: reduce/reduce conflict in state 357 resolved using rule (controlEstructure -> IF LPAREN expression RPAREN statement)
WARNING: rejected rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement) in state 357
WARNING: reduce/reduce conflict in state 361 resolved using rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE statement)
WARNING: rejected rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement) in state 361
WARNING: Rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement) is never reduced
WARNING: Rule (controlEstructure -> IF LPAREN expression RPAREN statement ELSE IF LPAREN expression RPAREN statement ELSE statement) is never reduced
